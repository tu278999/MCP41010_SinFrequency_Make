
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800d088  0800d088  0001d088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a8  0800d5a8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5a8  0800d5a8  0001d5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5b0  0800d5b0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5b0  0800d5b0  0001d5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5b4  0800d5b4  0001d5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800d5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e0c  200000fc  0800d6b4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f08  0800d6b4  00024f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032dfa  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ae4  00000000  00000000  00052f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e38  00000000  00000000  00059a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b60  00000000  00000000  0005b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ad6f  00000000  00000000  0005d3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ae89  00000000  00000000  00068117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef1ed  00000000  00000000  00092fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018218d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085a0  00000000  00000000  001821e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d06c 	.word	0x0800d06c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000100 	.word	0x20000100
 800020c:	0800d06c 	.word	0x0800d06c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fe34 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f824 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 f9f8 	bl	80012c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ed0:	f000 f9d6 	bl	8001280 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ed4:	f000 f9aa 	bl	800122c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000ed8:	f000 f888 	bl	8000fec <MX_ADC2_Init>
  MX_SPI2_Init();
 8000edc:	f000 f8d8 	bl	8001090 <MX_SPI2_Init>
  MX_TIM6_Init();
 8000ee0:	f000 f90e 	bl	8001100 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ee4:	f000 f942 	bl	800116c <MX_TIM7_Init>
  MX_UART5_Init();
 8000ee8:	f000 f976 	bl	80011d8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eec:	f005 f800 	bl	8005ef0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ef0:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <main+0x48>)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <main+0x4c>)
 8000ef6:	f005 f845 	bl	8005f84 <osThreadNew>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <main+0x50>)
 8000efe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f00:	f005 f81a 	bl	8005f38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x44>
 8000f06:	bf00      	nop
 8000f08:	0800d1ec 	.word	0x0800d1ec
 8000f0c:	080013e5 	.word	0x080013e5
 8000f10:	20004ab0 	.word	0x20004ab0

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	; 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2234      	movs	r2, #52	; 0x34
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f00a f926 	bl	800b174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f84:	2308      	movs	r3, #8
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f88:	23a0      	movs	r3, #160	; 0xa0
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fa2b 	bl	80033f8 <HAL_RCC_OscConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fa8:	f000 fa2c 	bl	8001404 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fac:	230f      	movs	r3, #15
 8000fae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	2105      	movs	r1, #5
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 ff16 	bl	8002dfc <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fd6:	f000 fa15 	bl	8001404 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3750      	adds	r7, #80	; 0x50
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_ADC2_Init+0x98>)
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <MX_ADC2_Init+0x9c>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_ADC2_Init+0x98>)
 8001006:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800100a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_ADC2_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_ADC2_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_ADC2_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_ADC2_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_ADC2_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_ADC2_Init+0x98>)
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <MX_ADC2_Init+0xa0>)
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_ADC2_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_ADC2_Init+0x98>)
 800103a:	2201      	movs	r2, #1
 800103c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_ADC2_Init+0x98>)
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_ADC2_Init+0x98>)
 8001048:	2201      	movs	r2, #1
 800104a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_ADC2_Init+0x98>)
 800104e:	f000 fdb1 	bl	8001bb4 <HAL_ADC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 f9d4 	bl	8001404 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800105c:	2301      	movs	r3, #1
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001064:	2306      	movs	r3, #6
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_ADC2_Init+0x98>)
 800106e:	f000 fe3f 	bl	8001cf0 <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001078:	f000 f9c4 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20004b0c 	.word	0x20004b0c
 8001088:	40012100 	.word	0x40012100
 800108c:	0f000001 	.word	0x0f000001

08001090 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_SPI2_Init+0x68>)
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <MX_SPI2_Init+0x6c>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_SPI2_Init+0x68>)
 800109c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010c8:	2208      	movs	r2, #8
 80010ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010da:	2200      	movs	r2, #0
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010e0:	220a      	movs	r2, #10
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_SPI2_Init+0x68>)
 80010e6:	f002 fc25 	bl	8003934 <HAL_SPI_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80010f0:	f000 f988 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20004ab4 	.word	0x20004ab4
 80010fc:	40003800 	.word	0x40003800

08001100 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_TIM6_Init+0x64>)
 8001110:	4a15      	ldr	r2, [pc, #84]	; (8001168 <MX_TIM6_Init+0x68>)
 8001112:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39999;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_TIM6_Init+0x64>)
 8001116:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800111a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_TIM6_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_TIM6_Init+0x64>)
 8001124:	2201      	movs	r2, #1
 8001126:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_TIM6_Init+0x64>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800112e:	480d      	ldr	r0, [pc, #52]	; (8001164 <MX_TIM6_Init+0x64>)
 8001130:	f002 fe90 	bl	8003e54 <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800113a:	f000 f963 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800113e:	2320      	movs	r3, #32
 8001140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_TIM6_Init+0x64>)
 800114c:	f003 f942 	bl	80043d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001156:	f000 f955 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20004b98 	.word	0x20004b98
 8001168:	40001000 	.word	0x40001000

0800116c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_TIM7_Init+0x64>)
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <MX_TIM7_Init+0x68>)
 800117e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_TIM7_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_TIM7_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_TIM7_Init+0x64>)
 800118e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001192:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_TIM7_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_TIM7_Init+0x64>)
 800119c:	f002 fe5a 	bl	8003e54 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80011a6:	f000 f92d 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_TIM7_Init+0x64>)
 80011b8:	f003 f90c 	bl	80043d4 <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80011c2:	f000 f91f 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20004c84 	.word	0x20004c84
 80011d4:	40001400 	.word	0x40001400

080011d8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_UART5_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_UART5_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_UART5_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_UART5_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_UART5_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_UART5_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_UART5_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_UART5_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_UART5_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_UART5_Init+0x4c>)
 8001210:	f003 f970 	bl	80044f4 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 f8f3 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20004b54 	.word	0x20004b54
 8001228:	40005000 	.word	0x40005000

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_USART2_UART_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001264:	f003 f946 	bl	80044f4 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f8c9 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20004be0 	.word	0x20004be0
 800127c:	40004400 	.word	0x40004400

08001280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_DMA_Init+0x3c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <MX_DMA_Init+0x3c>)
 8001290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_DMA_Init+0x3c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2105      	movs	r1, #5
 80012a6:	203a      	movs	r0, #58	; 0x3a
 80012a8:	f001 f82c 	bl	8002304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012ac:	203a      	movs	r0, #58	; 0x3a
 80012ae:	f001 f845 	bl	800233c <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <MX_GPIO_Init+0x114>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a3d      	ldr	r2, [pc, #244]	; (80013d4 <MX_GPIO_Init+0x114>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <MX_GPIO_Init+0x114>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <MX_GPIO_Init+0x114>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a36      	ldr	r2, [pc, #216]	; (80013d4 <MX_GPIO_Init+0x114>)
 80012fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <MX_GPIO_Init+0x114>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <MX_GPIO_Init+0x114>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <MX_GPIO_Init+0x114>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_GPIO_Init+0x114>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_GPIO_Init+0x114>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <MX_GPIO_Init+0x114>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_GPIO_Init+0x114>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_GPIO_Init+0x114>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <MX_GPIO_Init+0x114>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_GPIO_Init+0x114>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2160      	movs	r1, #96	; 0x60
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <MX_GPIO_Init+0x118>)
 8001368:	f001 fd14 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS1_GPIO_Port, SPI2_CS1_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001372:	481a      	ldr	r0, [pc, #104]	; (80013dc <MX_GPIO_Init+0x11c>)
 8001374:	f001 fd0e 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8001378:	2360      	movs	r3, #96	; 0x60
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <MX_GPIO_Init+0x118>)
 8001390:	f001 fb6c 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS1_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin;
 8001394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS1_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <MX_GPIO_Init+0x11c>)
 80013ae:	f001 fb5d 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : INTR1_Pin */
  GPIO_InitStruct.Pin = INTR1_Pin;
 80013b2:	2340      	movs	r3, #64	; 0x40
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTR1_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_GPIO_Init+0x120>)
 80013c8:	f001 fb50 	bl	8002a6c <HAL_GPIO_Init>

}
 80013cc:	bf00      	nop
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800

080013e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	vTaskInitAll();
 80013ec:	f003 feea 	bl	80051c4 <vTaskInitAll>
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <StartDefaultTask+0x1c>)
 80013f6:	f001 fccd 	bl	8002d94 <HAL_GPIO_WritePin>
    osThreadExit();
 80013fa:	f004 fe55 	bl	80060a8 <osThreadExit>
 80013fe:	bf00      	nop
 8001400:	40020000 	.word	0x40020000

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	e7fe      	b.n	800140c <Error_Handler+0x8>
	...

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_MspInit+0x54>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_MspInit+0x54>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_MspInit+0x54>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_MspInit+0x54>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_MspInit+0x54>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_MspInit+0x54>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	210f      	movs	r1, #15
 8001452:	f06f 0001 	mvn.w	r0, #1
 8001456:	f000 ff55 	bl	8002304 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <HAL_ADC_MspInit+0xdc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d158      	bne.n	800153c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_ADC_MspInit+0xe0>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <HAL_ADC_MspInit+0xe0>)
 8001494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001498:	6453      	str	r3, [r2, #68]	; 0x44
 800149a:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_ADC_MspInit+0xe0>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_ADC_MspInit+0xe0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <HAL_ADC_MspInit+0xe0>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_ADC_MspInit+0xe0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014c2:	2302      	movs	r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	2303      	movs	r3, #3
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	481d      	ldr	r0, [pc, #116]	; (800154c <HAL_ADC_MspInit+0xe4>)
 80014d6:	f001 fac9 	bl	8002a6c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_ADC_MspInit+0xec>)
 80014de:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 80014e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014e6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 80014f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 80014fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001502:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 8001506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 800150e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001512:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 8001522:	f000 ff27 	bl	8002374 <HAL_DMA_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800152c:	f7ff ff6a 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_ADC_MspInit+0xe8>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40012100 	.word	0x40012100
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	20004c24 	.word	0x20004c24
 8001554:	40026440 	.word	0x40026440

08001558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a28      	ldr	r2, [pc, #160]	; (8001618 <HAL_SPI_MspInit+0xc0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d14a      	bne.n	8001610 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_SPI_MspInit+0xc4>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a26      	ldr	r2, [pc, #152]	; (800161c <HAL_SPI_MspInit+0xc4>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_SPI_MspInit+0xc4>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_SPI_MspInit+0xc4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a1f      	ldr	r2, [pc, #124]	; (800161c <HAL_SPI_MspInit+0xc4>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_SPI_MspInit+0xc4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_SPI_MspInit+0xc4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a18      	ldr	r2, [pc, #96]	; (800161c <HAL_SPI_MspInit+0xc4>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_SPI_MspInit+0xc4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015ce:	2302      	movs	r3, #2
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80015de:	2307      	movs	r3, #7
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <HAL_SPI_MspInit+0xc8>)
 80015ea:	f001 fa3f 	bl	8002a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001600:	2305      	movs	r3, #5
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <HAL_SPI_MspInit+0xcc>)
 800160c:	f001 fa2e 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40003800 	.word	0x40003800
 800161c:	40023800 	.word	0x40023800
 8001620:	40020800 	.word	0x40020800
 8001624:	40020400 	.word	0x40020400

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_TIM_Base_MspInit+0x80>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d116      	bne.n	8001668 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_TIM_Base_MspInit+0x84>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <HAL_TIM_Base_MspInit+0x84>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_TIM_Base_MspInit+0x84>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2105      	movs	r1, #5
 800165a:	2036      	movs	r0, #54	; 0x36
 800165c:	f000 fe52 	bl	8002304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001660:	2036      	movs	r0, #54	; 0x36
 8001662:	f000 fe6b 	bl	800233c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001666:	e01a      	b.n	800169e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_TIM_Base_MspInit+0x88>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d115      	bne.n	800169e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_TIM_Base_MspInit+0x84>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <HAL_TIM_Base_MspInit+0x84>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_TIM_Base_MspInit+0x84>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2105      	movs	r1, #5
 8001692:	2037      	movs	r0, #55	; 0x37
 8001694:	f000 fe36 	bl	8002304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001698:	2037      	movs	r0, #55	; 0x37
 800169a:	f000 fe4f 	bl	800233c <HAL_NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40001000 	.word	0x40001000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40001400 	.word	0x40001400

080016b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a49      	ldr	r2, [pc, #292]	; (80017f8 <HAL_UART_MspInit+0x144>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d153      	bne.n	800177e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	4b48      	ldr	r3, [pc, #288]	; (80017fc <HAL_UART_MspInit+0x148>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a47      	ldr	r2, [pc, #284]	; (80017fc <HAL_UART_MspInit+0x148>)
 80016e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b45      	ldr	r3, [pc, #276]	; (80017fc <HAL_UART_MspInit+0x148>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_UART_MspInit+0x148>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a40      	ldr	r2, [pc, #256]	; (80017fc <HAL_UART_MspInit+0x148>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <HAL_UART_MspInit+0x148>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_UART_MspInit+0x148>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a39      	ldr	r2, [pc, #228]	; (80017fc <HAL_UART_MspInit+0x148>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_UART_MspInit+0x148>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800172a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800172e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001734:	2301      	movs	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800173c:	2308      	movs	r3, #8
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	482e      	ldr	r0, [pc, #184]	; (8001800 <HAL_UART_MspInit+0x14c>)
 8001748:	f001 f990 	bl	8002a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800174c:	2304      	movs	r3, #4
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001754:	2301      	movs	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800175c:	2308      	movs	r3, #8
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4619      	mov	r1, r3
 8001766:	4827      	ldr	r0, [pc, #156]	; (8001804 <HAL_UART_MspInit+0x150>)
 8001768:	f001 f980 	bl	8002a6c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2105      	movs	r1, #5
 8001770:	2035      	movs	r0, #53	; 0x35
 8001772:	f000 fdc7 	bl	8002304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001776:	2035      	movs	r0, #53	; 0x35
 8001778:	f000 fde0 	bl	800233c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE END USART2_MspInit 1 */
  }

}
 800177c:	e038      	b.n	80017f0 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a21      	ldr	r2, [pc, #132]	; (8001808 <HAL_UART_MspInit+0x154>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d133      	bne.n	80017f0 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_UART_MspInit+0x148>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_UART_MspInit+0x148>)
 8001792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_UART_MspInit+0x148>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_UART_MspInit+0x148>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <HAL_UART_MspInit+0x148>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6313      	str	r3, [r2, #48]	; 0x30
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_UART_MspInit+0x148>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017c0:	230c      	movs	r3, #12
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017d0:	2307      	movs	r3, #7
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	480c      	ldr	r0, [pc, #48]	; (800180c <HAL_UART_MspInit+0x158>)
 80017dc:	f001 f946 	bl	8002a6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2105      	movs	r1, #5
 80017e4:	2026      	movs	r0, #38	; 0x26
 80017e6:	f000 fd8d 	bl	8002304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017ea:	2026      	movs	r0, #38	; 0x26
 80017ec:	f000 fda6 	bl	800233c <HAL_NVIC_EnableIRQ>
}
 80017f0:	bf00      	nop
 80017f2:	3730      	adds	r7, #48	; 0x30
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40005000 	.word	0x40005000
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40004400 	.word	0x40004400
 800180c:	40020000 	.word	0x40020000

08001810 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	202c      	movs	r0, #44	; 0x2c
 8001826:	f000 fd6d 	bl	8002304 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800182a:	202c      	movs	r0, #44	; 0x2c
 800182c:	f000 fd86 	bl	800233c <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_InitTick+0xa4>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_InitTick+0xa4>)
 800183a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_InitTick+0xa4>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800184c:	f107 0210 	add.w	r2, r7, #16
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f001 fbea 	bl	8003030 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800185c:	f001 fbc0 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8001860:	4603      	mov	r3, r0
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <HAL_InitTick+0xa8>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9b      	lsrs	r3, r3, #18
 8001870:	3b01      	subs	r3, #1
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_InitTick+0xac>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_InitTick+0xb0>)
 8001878:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_InitTick+0xac>)
 800187c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001880:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_InitTick+0xac>)
 8001884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001886:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_InitTick+0xac>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_InitTick+0xac>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <HAL_InitTick+0xac>)
 8001896:	f002 fadd 	bl	8003e54 <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d104      	bne.n	80018aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 80018a0:	4806      	ldr	r0, [pc, #24]	; (80018bc <HAL_InitTick+0xac>)
 80018a2:	f002 fb27 	bl	8003ef4 <HAL_TIM_Base_Start_IT>
 80018a6:	4603      	mov	r3, r0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3730      	adds	r7, #48	; 0x30
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	20004ccc 	.word	0x20004ccc
 80018c0:	40001c00 	.word	0x40001c00

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80018f6:	f002 fb9c 	bl	8004032 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20004ccc 	.word	0x20004ccc

08001904 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <TIM6_DAC_IRQHandler+0x10>)
 800190a:	f002 fb92 	bl	8004032 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20004b98 	.word	0x20004b98

08001918 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <DMA2_Stream2_IRQHandler+0x10>)
 800191e:	f000 fe69 	bl	80025f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20004c24 	.word	0x20004c24

0800192c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_kill>:

int _kill(int pid, int sig)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001946:	f009 fbcb 	bl	800b0e0 <__errno>
 800194a:	4603      	mov	r3, r0
 800194c:	2216      	movs	r2, #22
 800194e:	601a      	str	r2, [r3, #0]
	return -1;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_exit>:

void _exit (int status)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ffe7 	bl	800193c <_kill>
	while (1) {}		/* Make sure we hang here */
 800196e:	e7fe      	b.n	800196e <_exit+0x12>

08001970 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e00a      	b.n	8001998 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001982:	f3af 8000 	nop.w
 8001986:	4601      	mov	r1, r0
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	60ba      	str	r2, [r7, #8]
 800198e:	b2ca      	uxtb	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbf0      	blt.n	8001982 <_read+0x12>
	}

return len;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e009      	b.n	80019d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	60ba      	str	r2, [r7, #8]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dbf1      	blt.n	80019bc <_write+0x12>
	}
	return len;
 80019d8:	687b      	ldr	r3, [r7, #4]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_close>:

int _close(int file)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
	return -1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <_isatty>:

int _isatty(int file)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
	return 1;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f009 fb30 	bl	800b0e0 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20020000 	.word	0x20020000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	20000118 	.word	0x20000118
 8001ab4:	20004f08 	.word	0x20004f08

08001ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ae2:	490e      	ldr	r1, [pc, #56]	; (8001b1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001af8:	4c0b      	ldr	r4, [pc, #44]	; (8001b28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b06:	f7ff ffd7 	bl	8001ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f009 fb01 	bl	800b110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0e:	f7ff f9d7 	bl	8000ec0 <main>
  bx  lr    
 8001b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001b20:	0800d5b8 	.word	0x0800d5b8
  ldr r2, =_sbss
 8001b24:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001b28:	20004f08 	.word	0x20004f08

08001b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_Init+0x40>)
 8001b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_Init+0x40>)
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_Init+0x40>)
 8001b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 fbc8 	bl	80022ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff fe56 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7ff fc54 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_IncTick+0x24>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_IncTick+0x24>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20004d14 	.word	0x20004d14

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20004d14 	.word	0x20004d14

08001bb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e033      	b.n	8001c32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fc48 	bl	8001468 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bfa:	f023 0302 	bic.w	r3, r3, #2
 8001bfe:	f043 0202 	orr.w	r2, r3, #2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f9a4 	bl	8001f54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
 8001c22:	e001      	b.n	8001c28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_Stop_DMA+0x1a>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e048      	b.n	8001ce6 <HAL_ADC_Stop_DMA+0xac>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d130      	bne.n	8001cdc <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c88:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d10f      	bne.n	8001cb8 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fc17 	bl	80024d0 <HAL_DMA_Abort>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001cc6:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x1c>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e113      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x244>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d925      	bls.n	8001d68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68d9      	ldr	r1, [r3, #12]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b1e      	subs	r3, #30
 8001d32:	2207      	movs	r2, #7
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	400a      	ands	r2, r1
 8001d40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68d9      	ldr	r1, [r3, #12]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4403      	add	r3, r0
 8001d5a:	3b1e      	subs	r3, #30
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	e022      	b.n	8001dae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6919      	ldr	r1, [r3, #16]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	400a      	ands	r2, r1
 8001d8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6919      	ldr	r1, [r3, #16]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4403      	add	r3, r0
 8001da4:	409a      	lsls	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d824      	bhi.n	8001e00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b05      	subs	r3, #5
 8001dc8:	221f      	movs	r2, #31
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b05      	subs	r3, #5
 8001df2:	fa00 f203 	lsl.w	r2, r0, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34
 8001dfe:	e04c      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b0c      	cmp	r3, #12
 8001e06:	d824      	bhi.n	8001e52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	3b23      	subs	r3, #35	; 0x23
 8001e1a:	221f      	movs	r2, #31
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43da      	mvns	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	400a      	ands	r2, r1
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	3b23      	subs	r3, #35	; 0x23
 8001e44:	fa00 f203 	lsl.w	r2, r0, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e50:	e023      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	3b41      	subs	r3, #65	; 0x41
 8001e64:	221f      	movs	r2, #31
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	400a      	ands	r2, r1
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b41      	subs	r3, #65	; 0x41
 8001e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_ADC_ConfigChannel+0x250>)
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <HAL_ADC_ConfigChannel+0x254>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d10f      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x1d8>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b12      	cmp	r3, #18
 8001eae:	d10b      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_ADC_ConfigChannel+0x254>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12b      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x23a>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_ADC_ConfigChannel+0x258>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <HAL_ADC_ConfigChannel+0x1f4>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	d122      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a11      	ldr	r2, [pc, #68]	; (8001f48 <HAL_ADC_ConfigChannel+0x258>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d111      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_ADC_ConfigChannel+0x25c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_ADC_ConfigChannel+0x260>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	0c9a      	lsrs	r2, r3, #18
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f1c:	e002      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f9      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40012300 	.word	0x40012300
 8001f44:	40012000 	.word	0x40012000
 8001f48:	10000012 	.word	0x10000012
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	431bde83 	.word	0x431bde83

08001f54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5c:	4b79      	ldr	r3, [pc, #484]	; (8002144 <ADC_Init+0x1f0>)
 8001f5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	021a      	lsls	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	4a58      	ldr	r2, [pc, #352]	; (8002148 <ADC_Init+0x1f4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d022      	beq.n	8002032 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ffa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6899      	ldr	r1, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800201c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	e00f      	b.n	8002052 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002040:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002050:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0202 	bic.w	r2, r2, #2
 8002060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7e1b      	ldrb	r3, [r3, #24]
 800206c:	005a      	lsls	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800208e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800209e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6859      	ldr	r1, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	3b01      	subs	r3, #1
 80020ac:	035a      	lsls	r2, r3, #13
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	e007      	b.n	80020c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	051a      	lsls	r2, r3, #20
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6899      	ldr	r1, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800210a:	025a      	lsls	r2, r3, #9
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	029a      	lsls	r2, r3, #10
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40012300 	.word	0x40012300
 8002148:	0f000001 	.word	0x0f000001

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db12      	blt.n	8002224 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	490a      	ldr	r1, [pc, #40]	; (8002230 <__NVIC_DisableIRQ+0x44>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	3320      	adds	r3, #32
 8002214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002218:	f3bf 8f4f 	dsb	sy
}
 800221c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800221e:	f3bf 8f6f 	isb	sy
}
 8002222:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ff28 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002316:	f7ff ff3d 	bl	8002194 <__NVIC_GetPriorityGrouping>
 800231a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	f7ff ffb1 	bl	8002288 <NVIC_EncodePriority>
 8002326:	4602      	mov	r2, r0
 8002328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff80 	bl	8002234 <__NVIC_SetPriority>
}
 8002334:	bf00      	nop
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff30 	bl	80021b0 <__NVIC_EnableIRQ>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff40 	bl	80021ec <__NVIC_DisableIRQ>
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff fc0c 	bl	8001b9c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e099      	b.n	80024c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b0:	e00f      	b.n	80023d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023b2:	f7ff fbf3 	bl	8001b9c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d908      	bls.n	80023d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e078      	b.n	80024c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e8      	bne.n	80023b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_DMA_Init+0x158>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2b04      	cmp	r3, #4
 800242a:	d107      	bne.n	800243c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4313      	orrs	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0307 	bic.w	r3, r3, #7
 8002452:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	2b04      	cmp	r3, #4
 8002464:	d117      	bne.n	8002496 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00e      	beq.n	8002496 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fa7b 	bl	8002974 <DMA_CheckFifoParam>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002492:	2301      	movs	r3, #1
 8002494:	e016      	b.n	80024c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa32 	bl	8002908 <DMA_CalcBaseAndBitshift>
 80024a4:	4603      	mov	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	223f      	movs	r2, #63	; 0x3f
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	f010803f 	.word	0xf010803f

080024d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024de:	f7ff fb5d 	bl	8001b9c <HAL_GetTick>
 80024e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d008      	beq.n	8002502 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e052      	b.n	80025a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0216 	bic.w	r2, r2, #22
 8002510:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002520:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <HAL_DMA_Abort+0x62>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0208 	bic.w	r2, r2, #8
 8002540:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0201 	bic.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002552:	e013      	b.n	800257c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002554:	f7ff fb22 	bl	8001b9c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b05      	cmp	r3, #5
 8002560:	d90c      	bls.n	800257c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2203      	movs	r2, #3
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e015      	b.n	80025a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e4      	bne.n	8002554 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	223f      	movs	r2, #63	; 0x3f
 8002590:	409a      	lsls	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d004      	beq.n	80025ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00c      	b.n	80025e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2205      	movs	r2, #5
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002600:	4b92      	ldr	r3, [pc, #584]	; (800284c <HAL_DMA_IRQHandler+0x258>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a92      	ldr	r2, [pc, #584]	; (8002850 <HAL_DMA_IRQHandler+0x25c>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0a9b      	lsrs	r3, r3, #10
 800260c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2208      	movs	r2, #8
 8002620:	409a      	lsls	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01a      	beq.n	8002660 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2208      	movs	r2, #8
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	2201      	movs	r2, #1
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d012      	beq.n	8002696 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	2201      	movs	r2, #1
 8002684:	409a      	lsls	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f043 0202 	orr.w	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	2204      	movs	r2, #4
 800269c:	409a      	lsls	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d012      	beq.n	80026cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	2204      	movs	r2, #4
 80026ba:	409a      	lsls	r2, r3
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f043 0204 	orr.w	r2, r3, #4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	2210      	movs	r2, #16
 80026d2:	409a      	lsls	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d043      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03c      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	2210      	movs	r2, #16
 80026f0:	409a      	lsls	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d018      	beq.n	8002736 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d108      	bne.n	8002724 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d024      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
 8002722:	e01f      	b.n	8002764 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01b      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
 8002734:	e016      	b.n	8002764 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d107      	bne.n	8002754 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0208 	bic.w	r2, r2, #8
 8002752:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2220      	movs	r2, #32
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 808e 	beq.w	8002892 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8086 	beq.w	8002892 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	2220      	movs	r2, #32
 800278c:	409a      	lsls	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b05      	cmp	r3, #5
 800279c:	d136      	bne.n	800280c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0216 	bic.w	r2, r2, #22
 80027ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <HAL_DMA_IRQHandler+0x1da>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0208 	bic.w	r2, r2, #8
 80027dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	223f      	movs	r2, #63	; 0x3f
 80027e4:	409a      	lsls	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d07d      	beq.n	80028fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
        }
        return;
 800280a:	e078      	b.n	80028fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01c      	beq.n	8002854 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d108      	bne.n	800283a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	2b00      	cmp	r3, #0
 800282e:	d030      	beq.n	8002892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
 8002838:	e02b      	b.n	8002892 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d027      	beq.n	8002892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
 800284a:	e022      	b.n	8002892 <HAL_DMA_IRQHandler+0x29e>
 800284c:	20000000 	.word	0x20000000
 8002850:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0210 	bic.w	r2, r2, #16
 8002870:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	2b00      	cmp	r3, #0
 8002898:	d032      	beq.n	8002900 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d022      	beq.n	80028ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2205      	movs	r2, #5
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3301      	adds	r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d307      	bcc.n	80028da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f2      	bne.n	80028be <HAL_DMA_IRQHandler+0x2ca>
 80028d8:	e000      	b.n	80028dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
 80028fc:	e000      	b.n	8002900 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028fe:	bf00      	nop
    }
  }
}
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop

08002908 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3b10      	subs	r3, #16
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <DMA_CalcBaseAndBitshift+0x64>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	091b      	lsrs	r3, r3, #4
 8002920:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <DMA_CalcBaseAndBitshift+0x68>)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d909      	bls.n	800294a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	1d1a      	adds	r2, r3, #4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	659a      	str	r2, [r3, #88]	; 0x58
 8002948:	e007      	b.n	800295a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	aaaaaaab 	.word	0xaaaaaaab
 8002970:	0800d228 	.word	0x0800d228

08002974 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d11f      	bne.n	80029ce <DMA_CheckFifoParam+0x5a>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d856      	bhi.n	8002a42 <DMA_CheckFifoParam+0xce>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <DMA_CheckFifoParam+0x28>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029ad 	.word	0x080029ad
 80029a0:	080029bf 	.word	0x080029bf
 80029a4:	080029ad 	.word	0x080029ad
 80029a8:	08002a43 	.word	0x08002a43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d046      	beq.n	8002a46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029bc:	e043      	b.n	8002a46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029c6:	d140      	bne.n	8002a4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029cc:	e03d      	b.n	8002a4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d6:	d121      	bne.n	8002a1c <DMA_CheckFifoParam+0xa8>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d837      	bhi.n	8002a4e <DMA_CheckFifoParam+0xda>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <DMA_CheckFifoParam+0x70>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	080029fb 	.word	0x080029fb
 80029ec:	080029f5 	.word	0x080029f5
 80029f0:	08002a0d 	.word	0x08002a0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e030      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d025      	beq.n	8002a52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0a:	e022      	b.n	8002a52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a14:	d11f      	bne.n	8002a56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a1a:	e01c      	b.n	8002a56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d903      	bls.n	8002a2a <DMA_CheckFifoParam+0xb6>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d003      	beq.n	8002a30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a28:	e018      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2e:	e015      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00e      	beq.n	8002a5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a40:	e00b      	b.n	8002a5a <DMA_CheckFifoParam+0xe6>
      break;
 8002a42:	bf00      	nop
 8002a44:	e00a      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a46:	bf00      	nop
 8002a48:	e008      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e006      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e004      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e002      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a56:	bf00      	nop
 8002a58:	e000      	b.n	8002a5c <DMA_CheckFifoParam+0xe8>
      break;
 8002a5a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e165      	b.n	8002d54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 8154 	bne.w	8002d4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d005      	beq.n	8002abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d130      	bne.n	8002b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 0201 	and.w	r2, r3, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d017      	beq.n	8002b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d123      	bne.n	8002bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	08da      	lsrs	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3208      	adds	r2, #8
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80ae 	beq.w	8002d4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a5c      	ldr	r2, [pc, #368]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0e:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	3302      	adds	r3, #2
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4f      	ldr	r2, [pc, #316]	; (8002d74 <HAL_GPIO_Init+0x308>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d025      	beq.n	8002c86 <HAL_GPIO_Init+0x21a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4e      	ldr	r2, [pc, #312]	; (8002d78 <HAL_GPIO_Init+0x30c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01f      	beq.n	8002c82 <HAL_GPIO_Init+0x216>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4d      	ldr	r2, [pc, #308]	; (8002d7c <HAL_GPIO_Init+0x310>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d019      	beq.n	8002c7e <HAL_GPIO_Init+0x212>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_GPIO_Init+0x314>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_GPIO_Init+0x20e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_GPIO_Init+0x318>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00d      	beq.n	8002c76 <HAL_GPIO_Init+0x20a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <HAL_GPIO_Init+0x31c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d007      	beq.n	8002c72 <HAL_GPIO_Init+0x206>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <HAL_GPIO_Init+0x320>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <HAL_GPIO_Init+0x202>
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	e00c      	b.n	8002c88 <HAL_GPIO_Init+0x21c>
 8002c6e:	2307      	movs	r3, #7
 8002c70:	e00a      	b.n	8002c88 <HAL_GPIO_Init+0x21c>
 8002c72:	2305      	movs	r3, #5
 8002c74:	e008      	b.n	8002c88 <HAL_GPIO_Init+0x21c>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x21c>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e004      	b.n	8002c88 <HAL_GPIO_Init+0x21c>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_Init+0x21c>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_Init+0x21c>
 8002c86:	2300      	movs	r3, #0
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f002 0203 	and.w	r2, r2, #3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4093      	lsls	r3, r2
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c98:	4935      	ldr	r1, [pc, #212]	; (8002d70 <HAL_GPIO_Init+0x304>)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca6:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cca:	4a31      	ldr	r2, [pc, #196]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cd0:	4b2f      	ldr	r3, [pc, #188]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d48:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	f67f ae96 	bls.w	8002a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40013800 	.word	0x40013800
 8002d74:	40020000 	.word	0x40020000
 8002d78:	40020400 	.word	0x40020400
 8002d7c:	40020800 	.word	0x40020800
 8002d80:	40020c00 	.word	0x40020c00
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40021400 	.word	0x40021400
 8002d8c:	40021800 	.word	0x40021800
 8002d90:	40013c00 	.word	0x40013c00

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dd8:	887a      	ldrh	r2, [r7, #2]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	041a      	lsls	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	400b      	ands	r3, r1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0cc      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d90c      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b65      	ldr	r3, [pc, #404]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0b8      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e50:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e68:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a52      	ldr	r2, [pc, #328]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e74:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	494d      	ldr	r1, [pc, #308]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d044      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d119      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e07f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e06f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e067      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 0203 	bic.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4934      	ldr	r1, [pc, #208]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eec:	f7fe fe56 	bl	8001b9c <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7fe fe52 	bl	8001b9c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e04f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 020c 	and.w	r2, r3, #12
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d1eb      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d20c      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e032      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4916      	ldr	r1, [pc, #88]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	490e      	ldr	r1, [pc, #56]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f82:	f000 f887 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8002f86:	4602      	mov	r2, r0
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	490a      	ldr	r1, [pc, #40]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	5ccb      	ldrb	r3, [r1, r3]
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fc34 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	0800d210 	.word	0x0800d210
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000004 	.word	0x20000004

08002fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	20000000 	.word	0x20000000

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fe4:	f7ff fff0 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0a9b      	lsrs	r3, r3, #10
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	0800d220 	.word	0x0800d220

08003008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800300c:	f7ff ffdc 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	0b5b      	lsrs	r3, r3, #13
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	4903      	ldr	r1, [pc, #12]	; (800302c <HAL_RCC_GetPCLK2Freq+0x24>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	0800d220 	.word	0x0800d220

08003030 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	220f      	movs	r2, #15
 800303e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_RCC_GetClockConfig+0x5c>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0203 	and.w	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_RCC_GetClockConfig+0x5c>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_RCC_GetClockConfig+0x5c>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_RCC_GetClockConfig+0x5c>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_RCC_GetClockConfig+0x60>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 020f 	and.w	r2, r3, #15
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	40023c00 	.word	0x40023c00

08003094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003098:	b088      	sub	sp, #32
 800309a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b0:	4bce      	ldr	r3, [pc, #824]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	f200 818d 	bhi.w	80033d8 <HAL_RCC_GetSysClockFreq+0x344>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_RCC_GetSysClockFreq+0x30>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080033d9 	.word	0x080033d9
 80030cc:	080033d9 	.word	0x080033d9
 80030d0:	080033d9 	.word	0x080033d9
 80030d4:	080030ff 	.word	0x080030ff
 80030d8:	080033d9 	.word	0x080033d9
 80030dc:	080033d9 	.word	0x080033d9
 80030e0:	080033d9 	.word	0x080033d9
 80030e4:	08003105 	.word	0x08003105
 80030e8:	080033d9 	.word	0x080033d9
 80030ec:	080033d9 	.word	0x080033d9
 80030f0:	080033d9 	.word	0x080033d9
 80030f4:	08003279 	.word	0x08003279
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f8:	4bbd      	ldr	r3, [pc, #756]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80030fa:	61bb      	str	r3, [r7, #24]
       break;
 80030fc:	e16f      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030fe:	4bbd      	ldr	r3, [pc, #756]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x360>)
 8003100:	61bb      	str	r3, [r7, #24]
      break;
 8003102:	e16c      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003104:	4bb9      	ldr	r3, [pc, #740]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800310c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800310e:	4bb7      	ldr	r3, [pc, #732]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d053      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311a:	4bb4      	ldr	r3, [pc, #720]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	099b      	lsrs	r3, r3, #6
 8003120:	461a      	mov	r2, r3
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	f240 10ff 	movw	r0, #511	; 0x1ff
 800312a:	f04f 0100 	mov.w	r1, #0
 800312e:	ea02 0400 	and.w	r4, r2, r0
 8003132:	603c      	str	r4, [r7, #0]
 8003134:	400b      	ands	r3, r1
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	e9d7 4500 	ldrd	r4, r5, [r7]
 800313c:	4620      	mov	r0, r4
 800313e:	4629      	mov	r1, r5
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	014b      	lsls	r3, r1, #5
 800314a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800314e:	0142      	lsls	r2, r0, #5
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	4623      	mov	r3, r4
 8003156:	1ac0      	subs	r0, r0, r3
 8003158:	462b      	mov	r3, r5
 800315a:	eb61 0103 	sbc.w	r1, r1, r3
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	018b      	lsls	r3, r1, #6
 8003168:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800316c:	0182      	lsls	r2, r0, #6
 800316e:	1a12      	subs	r2, r2, r0
 8003170:	eb63 0301 	sbc.w	r3, r3, r1
 8003174:	f04f 0000 	mov.w	r0, #0
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	00d9      	lsls	r1, r3, #3
 800317e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003182:	00d0      	lsls	r0, r2, #3
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4621      	mov	r1, r4
 800318a:	1852      	adds	r2, r2, r1
 800318c:	4629      	mov	r1, r5
 800318e:	eb43 0101 	adc.w	r1, r3, r1
 8003192:	460b      	mov	r3, r1
 8003194:	f04f 0000 	mov.w	r0, #0
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	0259      	lsls	r1, r3, #9
 800319e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031a2:	0250      	lsls	r0, r2, #9
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	f7fd fd08 	bl	8000bc8 <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4613      	mov	r3, r2
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	e04c      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c2:	4b8a      	ldr	r3, [pc, #552]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	099b      	lsrs	r3, r3, #6
 80031c8:	461a      	mov	r2, r3
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	ea02 0a00 	and.w	sl, r2, r0
 80031da:	ea03 0b01 	and.w	fp, r3, r1
 80031de:	4650      	mov	r0, sl
 80031e0:	4659      	mov	r1, fp
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	014b      	lsls	r3, r1, #5
 80031ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031f0:	0142      	lsls	r2, r0, #5
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	ebb0 000a 	subs.w	r0, r0, sl
 80031fa:	eb61 010b 	sbc.w	r1, r1, fp
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	018b      	lsls	r3, r1, #6
 8003208:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800320c:	0182      	lsls	r2, r0, #6
 800320e:	1a12      	subs	r2, r2, r0
 8003210:	eb63 0301 	sbc.w	r3, r3, r1
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	00d9      	lsls	r1, r3, #3
 800321e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003222:	00d0      	lsls	r0, r2, #3
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	eb12 020a 	adds.w	r2, r2, sl
 800322c:	eb43 030b 	adc.w	r3, r3, fp
 8003230:	f04f 0000 	mov.w	r0, #0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	0299      	lsls	r1, r3, #10
 800323a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800323e:	0290      	lsls	r0, r2, #10
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	461a      	mov	r2, r3
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	f7fd fcba 	bl	8000bc8 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800325c:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	61bb      	str	r3, [r7, #24]
      break;
 8003276:	e0b2      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003278:	4b5c      	ldr	r3, [pc, #368]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003280:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003282:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d04d      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328e:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	099b      	lsrs	r3, r3, #6
 8003294:	461a      	mov	r2, r3
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800329e:	f04f 0100 	mov.w	r1, #0
 80032a2:	ea02 0800 	and.w	r8, r2, r0
 80032a6:	ea03 0901 	and.w	r9, r3, r1
 80032aa:	4640      	mov	r0, r8
 80032ac:	4649      	mov	r1, r9
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	014b      	lsls	r3, r1, #5
 80032b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032bc:	0142      	lsls	r2, r0, #5
 80032be:	4610      	mov	r0, r2
 80032c0:	4619      	mov	r1, r3
 80032c2:	ebb0 0008 	subs.w	r0, r0, r8
 80032c6:	eb61 0109 	sbc.w	r1, r1, r9
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	018b      	lsls	r3, r1, #6
 80032d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032d8:	0182      	lsls	r2, r0, #6
 80032da:	1a12      	subs	r2, r2, r0
 80032dc:	eb63 0301 	sbc.w	r3, r3, r1
 80032e0:	f04f 0000 	mov.w	r0, #0
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	00d9      	lsls	r1, r3, #3
 80032ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ee:	00d0      	lsls	r0, r2, #3
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	eb12 0208 	adds.w	r2, r2, r8
 80032f8:	eb43 0309 	adc.w	r3, r3, r9
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0259      	lsls	r1, r3, #9
 8003306:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800330a:	0250      	lsls	r0, r2, #9
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	461a      	mov	r2, r3
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	f7fd fc54 	bl	8000bc8 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	e04a      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332a:	4b30      	ldr	r3, [pc, #192]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	461a      	mov	r2, r3
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	f240 10ff 	movw	r0, #511	; 0x1ff
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	ea02 0400 	and.w	r4, r2, r0
 8003342:	ea03 0501 	and.w	r5, r3, r1
 8003346:	4620      	mov	r0, r4
 8003348:	4629      	mov	r1, r5
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	014b      	lsls	r3, r1, #5
 8003354:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003358:	0142      	lsls	r2, r0, #5
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	1b00      	subs	r0, r0, r4
 8003360:	eb61 0105 	sbc.w	r1, r1, r5
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	018b      	lsls	r3, r1, #6
 800336e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003372:	0182      	lsls	r2, r0, #6
 8003374:	1a12      	subs	r2, r2, r0
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	f04f 0000 	mov.w	r0, #0
 800337e:	f04f 0100 	mov.w	r1, #0
 8003382:	00d9      	lsls	r1, r3, #3
 8003384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003388:	00d0      	lsls	r0, r2, #3
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	1912      	adds	r2, r2, r4
 8003390:	eb45 0303 	adc.w	r3, r5, r3
 8003394:	f04f 0000 	mov.w	r0, #0
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	0299      	lsls	r1, r3, #10
 800339e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033a2:	0290      	lsls	r0, r2, #10
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	f7fd fc08 	bl	8000bc8 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_GetSysClockFreq+0x358>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	0f1b      	lsrs	r3, r3, #28
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	61bb      	str	r3, [r7, #24]
      break;
 80033d6:	e002      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033da:	61bb      	str	r3, [r7, #24]
      break;
 80033dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033de:	69bb      	ldr	r3, [r7, #24]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	00f42400 	.word	0x00f42400
 80033f4:	007a1200 	.word	0x007a1200

080033f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e28d      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8083 	beq.w	800351e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003418:	4b94      	ldr	r3, [pc, #592]	; (800366c <HAL_RCC_OscConfig+0x274>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 030c 	and.w	r3, r3, #12
 8003420:	2b04      	cmp	r3, #4
 8003422:	d019      	beq.n	8003458 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003424:	4b91      	ldr	r3, [pc, #580]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800342c:	2b08      	cmp	r3, #8
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003430:	4b8e      	ldr	r3, [pc, #568]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800343c:	d00c      	beq.n	8003458 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343e:	4b8b      	ldr	r3, [pc, #556]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d112      	bne.n	8003470 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344a:	4b88      	ldr	r3, [pc, #544]	; (800366c <HAL_RCC_OscConfig+0x274>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003456:	d10b      	bne.n	8003470 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	4b84      	ldr	r3, [pc, #528]	; (800366c <HAL_RCC_OscConfig+0x274>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d05b      	beq.n	800351c <HAL_RCC_OscConfig+0x124>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d157      	bne.n	800351c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e25a      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003478:	d106      	bne.n	8003488 <HAL_RCC_OscConfig+0x90>
 800347a:	4b7c      	ldr	r3, [pc, #496]	; (800366c <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a7b      	ldr	r2, [pc, #492]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e01d      	b.n	80034c4 <HAL_RCC_OscConfig+0xcc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0xb4>
 8003492:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a75      	ldr	r2, [pc, #468]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b73      	ldr	r3, [pc, #460]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a72      	ldr	r2, [pc, #456]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0xcc>
 80034ac:	4b6f      	ldr	r3, [pc, #444]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a6e      	ldr	r2, [pc, #440]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80034b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b6c      	ldr	r3, [pc, #432]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6b      	ldr	r2, [pc, #428]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80034be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe fb66 	bl	8001b9c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe fb62 	bl	8001b9c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e21f      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0xdc>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe fb52 	bl	8001b9c <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fe fb4e 	bl	8001b9c <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e20b      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	4b57      	ldr	r3, [pc, #348]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x104>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d06f      	beq.n	800360a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800352a:	4b50      	ldr	r3, [pc, #320]	; (800366c <HAL_RCC_OscConfig+0x274>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b00      	cmp	r3, #0
 8003534:	d017      	beq.n	8003566 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003536:	4b4d      	ldr	r3, [pc, #308]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800353e:	2b08      	cmp	r3, #8
 8003540:	d105      	bne.n	800354e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003542:	4b4a      	ldr	r3, [pc, #296]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_RCC_OscConfig+0x274>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x186>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e1d3      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_RCC_OscConfig+0x274>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e03a      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359c:	4b34      	ldr	r3, [pc, #208]	; (8003670 <HAL_RCC_OscConfig+0x278>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fe fafb 	bl	8001b9c <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fe faf7 	bl	8001b9c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1b4      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4925      	ldr	r1, [pc, #148]	; (800366c <HAL_RCC_OscConfig+0x274>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_OscConfig+0x278>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe fada 	bl	8001b9c <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fe fad6 	bl	8001b9c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e193      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d036      	beq.n	8003684 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_RCC_OscConfig+0x27c>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe faba 	bl	8001b9c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800362c:	f7fe fab6 	bl	8001b9c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e173      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x274>)
 8003640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x234>
 800364a:	e01b      	b.n	8003684 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <HAL_RCC_OscConfig+0x27c>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe faa3 	bl	8001b9c <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	e00e      	b.n	8003678 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe fa9f 	bl	8001b9c <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d907      	bls.n	8003678 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e15c      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
 800366c:	40023800 	.word	0x40023800
 8003670:	42470000 	.word	0x42470000
 8003674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003678:	4b8a      	ldr	r3, [pc, #552]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800367a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1ea      	bne.n	800365a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8097 	beq.w	80037c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003696:	4b83      	ldr	r3, [pc, #524]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10f      	bne.n	80036c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a7e      	ldr	r2, [pc, #504]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80036ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b7c      	ldr	r3, [pc, #496]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036be:	2301      	movs	r3, #1
 80036c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c2:	4b79      	ldr	r3, [pc, #484]	; (80038a8 <HAL_RCC_OscConfig+0x4b0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d118      	bne.n	8003700 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ce:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCC_OscConfig+0x4b0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a75      	ldr	r2, [pc, #468]	; (80038a8 <HAL_RCC_OscConfig+0x4b0>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036da:	f7fe fa5f 	bl	8001b9c <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e2:	f7fe fa5b 	bl	8001b9c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e118      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	4b6c      	ldr	r3, [pc, #432]	; (80038a8 <HAL_RCC_OscConfig+0x4b0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x31e>
 8003708:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6713      	str	r3, [r2, #112]	; 0x70
 8003714:	e01c      	b.n	8003750 <HAL_RCC_OscConfig+0x358>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b05      	cmp	r3, #5
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x340>
 800371e:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a60      	ldr	r2, [pc, #384]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003724:	f043 0304 	orr.w	r3, r3, #4
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
 800372a:	4b5e      	ldr	r3, [pc, #376]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a5d      	ldr	r2, [pc, #372]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0x358>
 8003738:	4b5a      	ldr	r3, [pc, #360]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	4a59      	ldr	r2, [pc, #356]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	6713      	str	r3, [r2, #112]	; 0x70
 8003744:	4b57      	ldr	r3, [pc, #348]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	4a56      	ldr	r2, [pc, #344]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	f023 0304 	bic.w	r3, r3, #4
 800374e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d015      	beq.n	8003784 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fe fa20 	bl	8001b9c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fe fa1c 	bl	8001b9c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0d7      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003776:	4b4b      	ldr	r3, [pc, #300]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0ee      	beq.n	8003760 <HAL_RCC_OscConfig+0x368>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fe fa0a 	bl	8001b9c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fe fa06 	bl	8001b9c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e0c1      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a2:	4b40      	ldr	r3, [pc, #256]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ee      	bne.n	800378c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	4a3a      	ldr	r2, [pc, #232]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80037ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80ad 	beq.w	8003924 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ca:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d060      	beq.n	8003898 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d145      	bne.n	800386a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b33      	ldr	r3, [pc, #204]	; (80038ac <HAL_RCC_OscConfig+0x4b4>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe f9da 	bl	8001b9c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe f9d6 	bl	8001b9c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e093      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b29      	ldr	r3, [pc, #164]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	019b      	lsls	r3, r3, #6
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	071b      	lsls	r3, r3, #28
 8003836:	491b      	ldr	r1, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <HAL_RCC_OscConfig+0x4b4>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fe f9ab 	bl	8001b9c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384a:	f7fe f9a7 	bl	8001b9c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e064      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x452>
 8003868:	e05c      	b.n	8003924 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_RCC_OscConfig+0x4b4>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe f994 	bl	8001b9c <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe f990 	bl	8001b9c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04d      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x480>
 8003896:	e045      	b.n	8003924 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e040      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40007000 	.word	0x40007000
 80038ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038b0:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_RCC_OscConfig+0x538>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d030      	beq.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d129      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d122      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d119      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	3b01      	subs	r3, #1
 80038fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10f      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d107      	bne.n	8003920 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40023800 	.word	0x40023800

08003934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07b      	b.n	8003a3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d108      	bne.n	8003960 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003956:	d009      	beq.n	800396c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
 800395e:	e005      	b.n	800396c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fde6 	bl	8001558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	ea42 0103 	orr.w	r1, r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	f003 0104 	and.w	r1, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	f003 0210 	and.w	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b088      	sub	sp, #32
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_SPI_Transmit+0x22>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e126      	b.n	8003cb6 <HAL_SPI_Transmit+0x270>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a70:	f7fe f894 	bl	8001b9c <HAL_GetTick>
 8003a74:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d002      	beq.n	8003a8c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
 8003a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a8a:	e10b      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Transmit+0x52>
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a9c:	e102      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae4:	d10f      	bne.n	8003b06 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d007      	beq.n	8003b24 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2c:	d14b      	bne.n	8003bc6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_Transmit+0xf6>
 8003b36:	8afb      	ldrh	r3, [r7, #22]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d13e      	bne.n	8003bba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b60:	e02b      	b.n	8003bba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d112      	bne.n	8003b96 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b94:	e011      	b.n	8003bba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b96:	f7fe f801 	bl	8001b9c <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d803      	bhi.n	8003bae <HAL_SPI_Transmit+0x168>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d102      	bne.n	8003bb4 <HAL_SPI_Transmit+0x16e>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bb8:	e074      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ce      	bne.n	8003b62 <HAL_SPI_Transmit+0x11c>
 8003bc4:	e04c      	b.n	8003c60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Transmit+0x18e>
 8003bce:	8afb      	ldrh	r3, [r7, #22]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d140      	bne.n	8003c56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bfa:	e02c      	b.n	8003c56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d113      	bne.n	8003c32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c30:	e011      	b.n	8003c56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c32:	f7fd ffb3 	bl	8001b9c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d803      	bhi.n	8003c4a <HAL_SPI_Transmit+0x204>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d102      	bne.n	8003c50 <HAL_SPI_Transmit+0x20a>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c54:	e026      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1cd      	bne.n	8003bfc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	6839      	ldr	r1, [r7, #0]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f8b3 	bl	8003dd0 <SPI_EndRxTxTransaction>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e000      	b.n	8003ca4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ca2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cd0:	f7fd ff64 	bl	8001b9c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ce0:	f7fd ff5c 	bl	8001b9c <HAL_GetTick>
 8003ce4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	015b      	lsls	r3, r3, #5
 8003cec:	0d1b      	lsrs	r3, r3, #20
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf6:	e054      	b.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d050      	beq.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d00:	f7fd ff4c 	bl	8001b9c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d902      	bls.n	8003d16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d13d      	bne.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2e:	d111      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d38:	d004      	beq.n	8003d44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d42:	d107      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5c:	d10f      	bne.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e017      	b.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4013      	ands	r3, r2
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d19b      	bne.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000000 	.word	0x20000000

08003dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <SPI_EndRxTxTransaction+0x7c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1b      	ldr	r2, [pc, #108]	; (8003e50 <SPI_EndRxTxTransaction+0x80>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0d5b      	lsrs	r3, r3, #21
 8003de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dec:	fb02 f303 	mul.w	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dfa:	d112      	bne.n	8003e22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2200      	movs	r2, #0
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7ff ff5a 	bl	8003cc0 <SPI_WaitFlagStateUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e00f      	b.n	8003e42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b80      	cmp	r3, #128	; 0x80
 8003e3a:	d0f2      	beq.n	8003e22 <SPI_EndRxTxTransaction+0x52>
 8003e3c:	e000      	b.n	8003e40 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e3e:	bf00      	nop
  }

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	165e9f81 	.word	0x165e9f81

08003e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e041      	b.n	8003eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fd fbd4 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f000 f9fe 	bl	8004294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d001      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e04e      	b.n	8003faa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d022      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x80>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d01d      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x80>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <HAL_TIM_Base_Start_IT+0xc8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x80>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d013      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x80>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x80>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x80>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_TIM_Base_Start_IT+0xd8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_TIM_Base_Start_IT+0x80>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d010      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f96:	e007      	b.n	8003fa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40010400 	.word	0x40010400
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40001800 	.word	0x40001800

08003fd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10f      	bne.n	800401c <HAL_TIM_Base_Stop_IT+0x48>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6a1a      	ldr	r2, [r3, #32]
 8004002:	f240 4344 	movw	r3, #1092	; 0x444
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <HAL_TIM_Base_Stop_IT+0x48>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d122      	bne.n	800408e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d11b      	bne.n	800408e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f06f 0202 	mvn.w	r2, #2
 800405e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f8ee 	bl	8004256 <HAL_TIM_IC_CaptureCallback>
 800407a:	e005      	b.n	8004088 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f8e0 	bl	8004242 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8f1 	bl	800426a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d122      	bne.n	80040e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d11b      	bne.n	80040e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f06f 0204 	mvn.w	r2, #4
 80040b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f8c4 	bl	8004256 <HAL_TIM_IC_CaptureCallback>
 80040ce:	e005      	b.n	80040dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8b6 	bl	8004242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8c7 	bl	800426a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d122      	bne.n	8004136 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d11b      	bne.n	8004136 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f06f 0208 	mvn.w	r2, #8
 8004106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2204      	movs	r2, #4
 800410c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f89a 	bl	8004256 <HAL_TIM_IC_CaptureCallback>
 8004122:	e005      	b.n	8004130 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f88c 	bl	8004242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f89d 	bl	800426a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b10      	cmp	r3, #16
 8004142:	d122      	bne.n	800418a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d11b      	bne.n	800418a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0210 	mvn.w	r2, #16
 800415a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2208      	movs	r2, #8
 8004160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f870 	bl	8004256 <HAL_TIM_IC_CaptureCallback>
 8004176:	e005      	b.n	8004184 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f862 	bl	8004242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f873 	bl	800426a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10e      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f06f 0201 	mvn.w	r2, #1
 80041ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f001 fc7d 	bl	8005ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b80      	cmp	r3, #128	; 0x80
 80041c2:	d10e      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d107      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f97f 	bl	80044e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d10e      	bne.n	800420e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d107      	bne.n	800420e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f838 	bl	800427e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b20      	cmp	r3, #32
 800421a:	d10e      	bne.n	800423a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b20      	cmp	r3, #32
 8004228:	d107      	bne.n	800423a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f06f 0220 	mvn.w	r2, #32
 8004232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f949 	bl	80044cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a40      	ldr	r2, [pc, #256]	; (80043a8 <TIM_Base_SetConfig+0x114>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d013      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d00f      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3d      	ldr	r2, [pc, #244]	; (80043ac <TIM_Base_SetConfig+0x118>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3c      	ldr	r2, [pc, #240]	; (80043b0 <TIM_Base_SetConfig+0x11c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3b      	ldr	r2, [pc, #236]	; (80043b4 <TIM_Base_SetConfig+0x120>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a3a      	ldr	r2, [pc, #232]	; (80043b8 <TIM_Base_SetConfig+0x124>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d108      	bne.n	80042e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a2f      	ldr	r2, [pc, #188]	; (80043a8 <TIM_Base_SetConfig+0x114>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d02b      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f4:	d027      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2c      	ldr	r2, [pc, #176]	; (80043ac <TIM_Base_SetConfig+0x118>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d023      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2b      	ldr	r2, [pc, #172]	; (80043b0 <TIM_Base_SetConfig+0x11c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01f      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a2a      	ldr	r2, [pc, #168]	; (80043b4 <TIM_Base_SetConfig+0x120>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01b      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <TIM_Base_SetConfig+0x124>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d017      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <TIM_Base_SetConfig+0x128>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <TIM_Base_SetConfig+0x12c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00f      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a26      	ldr	r2, [pc, #152]	; (80043c4 <TIM_Base_SetConfig+0x130>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00b      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <TIM_Base_SetConfig+0x134>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d007      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a24      	ldr	r2, [pc, #144]	; (80043cc <TIM_Base_SetConfig+0x138>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <TIM_Base_SetConfig+0x13c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d108      	bne.n	8004358 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <TIM_Base_SetConfig+0x114>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_Base_SetConfig+0xf8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a0c      	ldr	r2, [pc, #48]	; (80043b8 <TIM_Base_SetConfig+0x124>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d103      	bne.n	8004394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	615a      	str	r2, [r3, #20]
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40000c00 	.word	0x40000c00
 80043b8:	40010400 	.word	0x40010400
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400
 80043c4:	40014800 	.word	0x40014800
 80043c8:	40001800 	.word	0x40001800
 80043cc:	40001c00 	.word	0x40001c00
 80043d0:	40002000 	.word	0x40002000

080043d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e05a      	b.n	80044a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a21      	ldr	r2, [pc, #132]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004438:	d01d      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1b      	ldr	r2, [pc, #108]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10c      	bne.n	8004490 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4313      	orrs	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40010400 	.word	0x40010400
 80044c4:	40014000 	.word	0x40014000
 80044c8:	40001800 	.word	0x40001800

080044cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e03f      	b.n	8004586 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd f8ca 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fc7b 	bl	8004e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800454c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800455c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800456c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b0ba      	sub	sp, #232	; 0xe8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_UART_IRQHandler+0x66>
 80045e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fb65 	bl	8004cbe <UART_Receive_IT>
      return;
 80045f4:	e256      	b.n	8004aa4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80de 	beq.w	80047bc <HAL_UART_IRQHandler+0x22c>
 8004600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800460c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004610:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80d1 	beq.w	80047bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800461a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_UART_IRQHandler+0xae>
 8004626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f043 0201 	orr.w	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_UART_IRQHandler+0xd2>
 800464a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f043 0202 	orr.w	r2, r3, #2
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <HAL_UART_IRQHandler+0xf6>
 800466e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f043 0204 	orr.w	r2, r3, #4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d011      	beq.n	80046b6 <HAL_UART_IRQHandler+0x126>
 8004692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800469e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f043 0208 	orr.w	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 81ed 	beq.w	8004a9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_UART_IRQHandler+0x14e>
 80046cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 faf0 	bl	8004cbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_UART_IRQHandler+0x17a>
 8004702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d04f      	beq.n	80047aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f9f8 	bl	8004b00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	2b40      	cmp	r3, #64	; 0x40
 800471c:	d141      	bne.n	80047a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3314      	adds	r3, #20
 8004724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3314      	adds	r3, #20
 8004746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800474a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800474e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1d9      	bne.n	800471e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d013      	beq.n	800479a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	4a7d      	ldr	r2, [pc, #500]	; (800496c <HAL_UART_IRQHandler+0x3dc>)
 8004778:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd ff16 	bl	80025b0 <HAL_DMA_Abort_IT>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004794:	4610      	mov	r0, r2
 8004796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	e00e      	b.n	80047b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f99a 	bl	8004ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e00a      	b.n	80047b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f996 	bl	8004ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e006      	b.n	80047b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f992 	bl	8004ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047b6:	e170      	b.n	8004a9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	bf00      	nop
    return;
 80047ba:	e16e      	b.n	8004a9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	f040 814a 	bne.w	8004a5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8143 	beq.w	8004a5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 813c 	beq.w	8004a5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	f040 80b4 	bne.w	8004970 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004814:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8140 	beq.w	8004a9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004826:	429a      	cmp	r2, r3
 8004828:	f080 8139 	bcs.w	8004a9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004832:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483e:	f000 8088 	beq.w	8004952 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800485c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800486e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800487a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1d9      	bne.n	8004842 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800489e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e1      	bne.n	800488e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e3      	bne.n	80048ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004934:	65ba      	str	r2, [r7, #88]	; 0x58
 8004936:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800493a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e3      	bne.n	8004910 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	4618      	mov	r0, r3
 800494e:	f7fd fdbf 	bl	80024d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800495a:	b29b      	uxth	r3, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	b29b      	uxth	r3, r3
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8c0 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004968:	e099      	b.n	8004a9e <HAL_UART_IRQHandler+0x50e>
 800496a:	bf00      	nop
 800496c:	08004bc7 	.word	0x08004bc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004978:	b29b      	uxth	r3, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 808b 	beq.w	8004aa2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800498c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8086 	beq.w	8004aa2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049ba:	647a      	str	r2, [r7, #68]	; 0x44
 80049bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c2:	e841 2300 	strex	r3, r2, [r1]
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e3      	bne.n	8004996 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3314      	adds	r3, #20
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	623b      	str	r3, [r7, #32]
   return(result);
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3314      	adds	r3, #20
 80049ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049f2:	633a      	str	r2, [r7, #48]	; 0x30
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e3      	bne.n	80049ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a38:	61fa      	str	r2, [r7, #28]
 8004a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	69b9      	ldr	r1, [r7, #24]
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	617b      	str	r3, [r7, #20]
   return(result);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e3      	bne.n	8004a14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f848 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a58:	e023      	b.n	8004aa2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_UART_IRQHandler+0x4ea>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8bb 	bl	8004bee <UART_Transmit_IT>
    return;
 8004a78:	e014      	b.n	8004aa4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00e      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x514>
 8004a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8fb 	bl	8004c8e <UART_EndTransmit_IT>
    return;
 8004a98:	e004      	b.n	8004aa4 <HAL_UART_IRQHandler+0x514>
    return;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8004aa2:	bf00      	nop
  }
}
 8004aa4:	37e8      	adds	r7, #232	; 0xe8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop

08004aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b095      	sub	sp, #84	; 0x54
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b28:	643a      	str	r2, [r7, #64]	; 0x40
 8004b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e5      	bne.n	8004b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3314      	adds	r3, #20
 8004b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e5      	bne.n	8004b3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d119      	bne.n	8004bac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	330c      	adds	r3, #12
 8004b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f023 0310 	bic.w	r3, r3, #16
 8004b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b98:	61ba      	str	r2, [r7, #24]
 8004b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6979      	ldr	r1, [r7, #20]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bba:	bf00      	nop
 8004bbc:	3754      	adds	r7, #84	; 0x54
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f7ff ff77 	bl	8004ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b21      	cmp	r3, #33	; 0x21
 8004c00:	d13e      	bne.n	8004c80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0a:	d114      	bne.n	8004c36 <UART_Transmit_IT+0x48>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d110      	bne.n	8004c36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	1c9a      	adds	r2, r3, #2
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	621a      	str	r2, [r3, #32]
 8004c34:	e008      	b.n	8004c48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	1c59      	adds	r1, r3, #1
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6211      	str	r1, [r2, #32]
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4619      	mov	r1, r3
 8004c56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10f      	bne.n	8004c7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c80:	2302      	movs	r3, #2
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fefc 	bl	8004aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b08c      	sub	sp, #48	; 0x30
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b22      	cmp	r3, #34	; 0x22
 8004cd0:	f040 80ab 	bne.w	8004e2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cdc:	d117      	bne.n	8004d0e <UART_Receive_IT+0x50>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d113      	bne.n	8004d0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	1c9a      	adds	r2, r3, #2
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d0c:	e026      	b.n	8004d5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d20:	d007      	beq.n	8004d32 <UART_Receive_IT+0x74>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <UART_Receive_IT+0x82>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	e008      	b.n	8004d52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d15a      	bne.n	8004e26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0220 	bic.w	r2, r2, #32
 8004d7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695a      	ldr	r2, [r3, #20]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d135      	bne.n	8004e1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f023 0310 	bic.w	r3, r3, #16
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd6:	623a      	str	r2, [r7, #32]
 8004dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	69f9      	ldr	r1, [r7, #28]
 8004ddc:	6a3a      	ldr	r2, [r7, #32]
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e5      	bne.n	8004db6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d10a      	bne.n	8004e0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fe67 	bl	8004ae8 <HAL_UARTEx_RxEventCallback>
 8004e1a:	e002      	b.n	8004e22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7ff fe4f 	bl	8004ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e002      	b.n	8004e2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
  }
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3730      	adds	r7, #48	; 0x30
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e38:	b09f      	sub	sp, #124	; 0x7c
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4a:	68d9      	ldr	r1, [r3, #12]
 8004e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	ea40 0301 	orr.w	r3, r0, r1
 8004e54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e78:	f021 010c 	bic.w	r1, r1, #12
 8004e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e82:	430b      	orrs	r3, r1
 8004e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e92:	6999      	ldr	r1, [r3, #24]
 8004e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	ea40 0301 	orr.w	r3, r0, r1
 8004e9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4bc5      	ldr	r3, [pc, #788]	; (80051b8 <UART_SetConfig+0x384>)
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d004      	beq.n	8004eb2 <UART_SetConfig+0x7e>
 8004ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4bc3      	ldr	r3, [pc, #780]	; (80051bc <UART_SetConfig+0x388>)
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d103      	bne.n	8004eba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eb2:	f7fe f8a9 	bl	8003008 <HAL_RCC_GetPCLK2Freq>
 8004eb6:	6778      	str	r0, [r7, #116]	; 0x74
 8004eb8:	e002      	b.n	8004ec0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eba:	f7fe f891 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8004ebe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec8:	f040 80b6 	bne.w	8005038 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ece:	461c      	mov	r4, r3
 8004ed0:	f04f 0500 	mov.w	r5, #0
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	462b      	mov	r3, r5
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	6439      	str	r1, [r7, #64]	; 0x40
 8004edc:	415b      	adcs	r3, r3
 8004ede:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ee4:	1912      	adds	r2, r2, r4
 8004ee6:	eb45 0303 	adc.w	r3, r5, r3
 8004eea:	f04f 0000 	mov.w	r0, #0
 8004eee:	f04f 0100 	mov.w	r1, #0
 8004ef2:	00d9      	lsls	r1, r3, #3
 8004ef4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ef8:	00d0      	lsls	r0, r2, #3
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	1911      	adds	r1, r2, r4
 8004f00:	6639      	str	r1, [r7, #96]	; 0x60
 8004f02:	416b      	adcs	r3, r5
 8004f04:	667b      	str	r3, [r7, #100]	; 0x64
 8004f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	1891      	adds	r1, r2, r2
 8004f12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f14:	415b      	adcs	r3, r3
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004f20:	f7fb fe52 	bl	8000bc8 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4ba5      	ldr	r3, [pc, #660]	; (80051c0 <UART_SetConfig+0x38c>)
 8004f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	011e      	lsls	r6, r3, #4
 8004f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f34:	461c      	mov	r4, r3
 8004f36:	f04f 0500 	mov.w	r5, #0
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	1891      	adds	r1, r2, r2
 8004f40:	6339      	str	r1, [r7, #48]	; 0x30
 8004f42:	415b      	adcs	r3, r3
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
 8004f46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f4a:	1912      	adds	r2, r2, r4
 8004f4c:	eb45 0303 	adc.w	r3, r5, r3
 8004f50:	f04f 0000 	mov.w	r0, #0
 8004f54:	f04f 0100 	mov.w	r1, #0
 8004f58:	00d9      	lsls	r1, r3, #3
 8004f5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f5e:	00d0      	lsls	r0, r2, #3
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	1911      	adds	r1, r2, r4
 8004f66:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f68:	416b      	adcs	r3, r5
 8004f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	461a      	mov	r2, r3
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	1891      	adds	r1, r2, r2
 8004f78:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f7a:	415b      	adcs	r3, r3
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004f86:	f7fb fe1f 	bl	8000bc8 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4b8c      	ldr	r3, [pc, #560]	; (80051c0 <UART_SetConfig+0x38c>)
 8004f90:	fba3 1302 	umull	r1, r3, r3, r2
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	2164      	movs	r1, #100	; 0x64
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	3332      	adds	r3, #50	; 0x32
 8004fa2:	4a87      	ldr	r2, [pc, #540]	; (80051c0 <UART_SetConfig+0x38c>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fb0:	441e      	add	r6, r3
 8004fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	1894      	adds	r4, r2, r2
 8004fc0:	623c      	str	r4, [r7, #32]
 8004fc2:	415b      	adcs	r3, r3
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fca:	1812      	adds	r2, r2, r0
 8004fcc:	eb41 0303 	adc.w	r3, r1, r3
 8004fd0:	f04f 0400 	mov.w	r4, #0
 8004fd4:	f04f 0500 	mov.w	r5, #0
 8004fd8:	00dd      	lsls	r5, r3, #3
 8004fda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fde:	00d4      	lsls	r4, r2, #3
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	462b      	mov	r3, r5
 8004fe4:	1814      	adds	r4, r2, r0
 8004fe6:	653c      	str	r4, [r7, #80]	; 0x50
 8004fe8:	414b      	adcs	r3, r1
 8004fea:	657b      	str	r3, [r7, #84]	; 0x54
 8004fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	1891      	adds	r1, r2, r2
 8004ff8:	61b9      	str	r1, [r7, #24]
 8004ffa:	415b      	adcs	r3, r3
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005002:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005006:	f7fb fddf 	bl	8000bc8 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4b6c      	ldr	r3, [pc, #432]	; (80051c0 <UART_SetConfig+0x38c>)
 8005010:	fba3 1302 	umull	r1, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2164      	movs	r1, #100	; 0x64
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	3332      	adds	r3, #50	; 0x32
 8005022:	4a67      	ldr	r2, [pc, #412]	; (80051c0 <UART_SetConfig+0x38c>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	f003 0207 	and.w	r2, r3, #7
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4432      	add	r2, r6
 8005034:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005036:	e0b9      	b.n	80051ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503a:	461c      	mov	r4, r3
 800503c:	f04f 0500 	mov.w	r5, #0
 8005040:	4622      	mov	r2, r4
 8005042:	462b      	mov	r3, r5
 8005044:	1891      	adds	r1, r2, r2
 8005046:	6139      	str	r1, [r7, #16]
 8005048:	415b      	adcs	r3, r3
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005050:	1912      	adds	r2, r2, r4
 8005052:	eb45 0303 	adc.w	r3, r5, r3
 8005056:	f04f 0000 	mov.w	r0, #0
 800505a:	f04f 0100 	mov.w	r1, #0
 800505e:	00d9      	lsls	r1, r3, #3
 8005060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005064:	00d0      	lsls	r0, r2, #3
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	eb12 0804 	adds.w	r8, r2, r4
 800506e:	eb43 0905 	adc.w	r9, r3, r5
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	008b      	lsls	r3, r1, #2
 8005086:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800508a:	0082      	lsls	r2, r0, #2
 800508c:	4640      	mov	r0, r8
 800508e:	4649      	mov	r1, r9
 8005090:	f7fb fd9a 	bl	8000bc8 <__aeabi_uldivmod>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4b49      	ldr	r3, [pc, #292]	; (80051c0 <UART_SetConfig+0x38c>)
 800509a:	fba3 2302 	umull	r2, r3, r3, r2
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	011e      	lsls	r6, r3, #4
 80050a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050a4:	4618      	mov	r0, r3
 80050a6:	f04f 0100 	mov.w	r1, #0
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	1894      	adds	r4, r2, r2
 80050b0:	60bc      	str	r4, [r7, #8]
 80050b2:	415b      	adcs	r3, r3
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ba:	1812      	adds	r2, r2, r0
 80050bc:	eb41 0303 	adc.w	r3, r1, r3
 80050c0:	f04f 0400 	mov.w	r4, #0
 80050c4:	f04f 0500 	mov.w	r5, #0
 80050c8:	00dd      	lsls	r5, r3, #3
 80050ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050ce:	00d4      	lsls	r4, r2, #3
 80050d0:	4622      	mov	r2, r4
 80050d2:	462b      	mov	r3, r5
 80050d4:	1814      	adds	r4, r2, r0
 80050d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80050d8:	414b      	adcs	r3, r1
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f04f 0100 	mov.w	r1, #0
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	008b      	lsls	r3, r1, #2
 80050f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050f4:	0082      	lsls	r2, r0, #2
 80050f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80050fa:	f7fb fd65 	bl	8000bc8 <__aeabi_uldivmod>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4b2f      	ldr	r3, [pc, #188]	; (80051c0 <UART_SetConfig+0x38c>)
 8005104:	fba3 1302 	umull	r1, r3, r3, r2
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	2164      	movs	r1, #100	; 0x64
 800510c:	fb01 f303 	mul.w	r3, r1, r3
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	3332      	adds	r3, #50	; 0x32
 8005116:	4a2a      	ldr	r2, [pc, #168]	; (80051c0 <UART_SetConfig+0x38c>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005122:	441e      	add	r6, r3
 8005124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005126:	4618      	mov	r0, r3
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	1894      	adds	r4, r2, r2
 8005132:	603c      	str	r4, [r7, #0]
 8005134:	415b      	adcs	r3, r3
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800513c:	1812      	adds	r2, r2, r0
 800513e:	eb41 0303 	adc.w	r3, r1, r3
 8005142:	f04f 0400 	mov.w	r4, #0
 8005146:	f04f 0500 	mov.w	r5, #0
 800514a:	00dd      	lsls	r5, r3, #3
 800514c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005150:	00d4      	lsls	r4, r2, #3
 8005152:	4622      	mov	r2, r4
 8005154:	462b      	mov	r3, r5
 8005156:	eb12 0a00 	adds.w	sl, r2, r0
 800515a:	eb43 0b01 	adc.w	fp, r3, r1
 800515e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4618      	mov	r0, r3
 8005164:	f04f 0100 	mov.w	r1, #0
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	008b      	lsls	r3, r1, #2
 8005172:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005176:	0082      	lsls	r2, r0, #2
 8005178:	4650      	mov	r0, sl
 800517a:	4659      	mov	r1, fp
 800517c:	f7fb fd24 	bl	8000bc8 <__aeabi_uldivmod>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <UART_SetConfig+0x38c>)
 8005186:	fba3 1302 	umull	r1, r3, r3, r2
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	2164      	movs	r1, #100	; 0x64
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	3332      	adds	r3, #50	; 0x32
 8005198:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <UART_SetConfig+0x38c>)
 800519a:	fba2 2303 	umull	r2, r3, r2, r3
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	f003 020f 	and.w	r2, r3, #15
 80051a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4432      	add	r2, r6
 80051aa:	609a      	str	r2, [r3, #8]
}
 80051ac:	bf00      	nop
 80051ae:	377c      	adds	r7, #124	; 0x7c
 80051b0:	46bd      	mov	sp, r7
 80051b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b6:	bf00      	nop
 80051b8:	40011000 	.word	0x40011000
 80051bc:	40011400 	.word	0x40011400
 80051c0:	51eb851f 	.word	0x51eb851f

080051c4 <vTaskInitAll>:
static void mcp41_task(void *p);




void vTaskInitAll(void){
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af02      	add	r7, sp, #8

	BaseType_t status;
	status = xTaskCreate(mcp41_task, "mcp41 task", 600, NULL, osPriorityAboveNormal, &mcp41_handler );
 80051ca:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <vTaskInitAll+0x7c>)
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	2320      	movs	r3, #32
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	2300      	movs	r3, #0
 80051d4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80051d8:	491a      	ldr	r1, [pc, #104]	; (8005244 <vTaskInitAll+0x80>)
 80051da:	481b      	ldr	r0, [pc, #108]	; (8005248 <vTaskInitAll+0x84>)
 80051dc:	f002 f93b 	bl	8007456 <xTaskCreate>
 80051e0:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d00a      	beq.n	80051fe <vTaskInitAll+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <vTaskInitAll+0x38>

	status = xTaskCreate(cmd_handle, "cmd task", 600, NULL, osPriorityNormal, &cmd_handler );
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <vTaskInitAll+0x88>)
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	2318      	movs	r3, #24
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	2300      	movs	r3, #0
 8005208:	f44f 7216 	mov.w	r2, #600	; 0x258
 800520c:	4910      	ldr	r1, [pc, #64]	; (8005250 <vTaskInitAll+0x8c>)
 800520e:	4811      	ldr	r0, [pc, #68]	; (8005254 <vTaskInitAll+0x90>)
 8005210:	f002 f921 	bl	8007456 <xTaskCreate>
 8005214:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d00a      	beq.n	8005232 <vTaskInitAll+0x6e>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	607b      	str	r3, [r7, #4]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <vTaskInitAll+0x6c>

	//init modbus RS485
	initMBSlaveTask();
 8005232:	f005 f88f 	bl	800a354 <initMBSlaveTask>

}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	2000011c 	.word	0x2000011c
 8005244:	0800d094 	.word	0x0800d094
 8005248:	08005259 	.word	0x08005259
 800524c:	20000120 	.word	0x20000120
 8005250:	0800d0a0 	.word	0x0800d0a0
 8005254:	0800526b 	.word	0x0800526b

08005258 <mcp41_task>:

static void mcp41_task(void *p){
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

	vMCPStart();
 8005260:	f000 fa14 	bl	800568c <vMCPStart>

	while(1)
	{

		vMCP41010Poll();
 8005264:	f000 faa0 	bl	80057a8 <vMCP41010Poll>
 8005268:	e7fc      	b.n	8005264 <mcp41_task+0xc>

0800526a <cmd_handle>:

	}

}

static void cmd_handle(void *p){
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]


	while(1)
	{
		if( xMCPTakeCmd() == TRUE )
 8005272:	f000 fa6f 	bl	8005754 <xMCPTakeCmd>
 8005276:	4603      	mov	r3, r0
 8005278:	2b01      	cmp	r3, #1
 800527a:	d1fa      	bne.n	8005272 <cmd_handle+0x8>
		{
			//wait notify from modbus
			ulTaskNotifyTake(pdFALSE, portMAX_DELAY);
 800527c:	f04f 31ff 	mov.w	r1, #4294967295
 8005280:	2000      	movs	r0, #0
 8005282:	f003 f95b 	bl	800853c <ulTaskNotifyTake>

			vCMDPoll();
 8005286:	f000 f8c7 	bl	8005418 <vCMDPoll>
		if( xMCPTakeCmd() == TRUE )
 800528a:	e7f2      	b.n	8005272 <cmd_handle+0x8>

0800528c <vADCInit>:

adchandler_t adchandle;



void vADCInit(void){
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
	adchandle.status = ADC_DISABLE;
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <vADCInit+0x24>)
 8005292:	2202      	movs	r2, #2
 8005294:	701a      	strb	r2, [r3, #0]
	adchandle.timerFag = DISABLE;		//consider to remove
 8005296:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <vADCInit+0x24>)
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	adchandle.countNSample = 0;
 800529e:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <vADCInit+0x24>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	865a      	strh	r2, [r3, #50]	; 0x32
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20004d18 	.word	0x20004d18

080052b4 <vADCEnable>:

void vADCEnable (void){
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0

	adchandle.status = ADC_ENABLE;
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <vADCEnable+0x1c>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
	adchandle.countNSample = 0;
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <vADCEnable+0x1c>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	865a      	strh	r2, [r3, #50]	; 0x32

}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20004d18 	.word	0x20004d18

080052d4 <vADCDisable>:

void vADCDisable(void){
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
	vADCInit();
 80052d8:	f7ff ffd8 	bl	800528c <vADCInit>
}
 80052dc:	bf00      	nop
 80052de:	bd80      	pop	{r7, pc}

080052e0 <vADCStopConversion>:
//
//	//for test, I use systick ISR as timer sample
//	adchandle.timerFag = ENABLE;
//}

void vADCStopConversion(void){
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0

	//stop conversion
	HAL_ADC_Stop_DMA(&hadc2);
 80052e4:	4805      	ldr	r0, [pc, #20]	; (80052fc <vADCStopConversion+0x1c>)
 80052e6:	f7fc fca8 	bl	8001c3a <HAL_ADC_Stop_DMA>
	adchandle.status = ADC_DISABLE;
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <vADCStopConversion+0x20>)
 80052ec:	2202      	movs	r2, #2
 80052ee:	701a      	strb	r2, [r3, #0]
	//stop timer
	adchandle.timerFag = DISABLE;
 80052f0:	4b03      	ldr	r3, [pc, #12]	; (8005300 <vADCStopConversion+0x20>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

}
 80052f8:	bf00      	nop
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20004b0c 	.word	0x20004b0c
 8005300:	20004d18 	.word	0x20004d18
 8005304:	00000000 	.word	0x00000000

08005308 <vADCSetAvegareValue>:

void vADCSetAvegareValue(void){
 8005308:	b5b0      	push	{r4, r5, r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
	int i = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	607b      	str	r3, [r7, #4]
	uint32_t temp1 = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	603b      	str	r3, [r7, #0]
	for(i = 0; i < N_SAMPLE; i++)
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	e025      	b.n	8005368 <vADCSetAvegareValue+0x60>
	{
		temp1 += pow(adchandle.samplelist[i], 2);
 800531c:	4a28      	ldr	r2, [pc, #160]	; (80053c0 <vADCSetAvegareValue+0xb8>)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	4413      	add	r3, r2
 8005324:	885b      	ldrh	r3, [r3, #2]
 8005326:	4618      	mov	r0, r3
 8005328:	f7fb f904 	bl	8000534 <__aeabi_ui2d>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80053b8 <vADCSetAvegareValue+0xb0>
 8005334:	ec43 2b10 	vmov	d0, r2, r3
 8005338:	f006 feae 	bl	800c098 <pow>
 800533c:	ec55 4b10 	vmov	r4, r5, d0
 8005340:	6838      	ldr	r0, [r7, #0]
 8005342:	f7fb f8f7 	bl	8000534 <__aeabi_ui2d>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4620      	mov	r0, r4
 800534c:	4629      	mov	r1, r5
 800534e:	f7fa ffb5 	bl	80002bc <__adddf3>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4610      	mov	r0, r2
 8005358:	4619      	mov	r1, r3
 800535a:	f7fb fc15 	bl	8000b88 <__aeabi_d2uiz>
 800535e:	4603      	mov	r3, r0
 8005360:	603b      	str	r3, [r7, #0]
	for(i = 0; i < N_SAMPLE; i++)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3301      	adds	r3, #1
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b13      	cmp	r3, #19
 800536c:	ddd6      	ble.n	800531c <vADCSetAvegareValue+0x14>
	}
	adchandle.average = (uint16_t)sqrt((double)temp1/(double)N_SAMPLE);
 800536e:	6838      	ldr	r0, [r7, #0]
 8005370:	f7fb f8e0 	bl	8000534 <__aeabi_ui2d>
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <vADCSetAvegareValue+0xbc>)
 800537a:	f7fb fa7f 	bl	800087c <__aeabi_ddiv>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	ec43 2b17 	vmov	d7, r2, r3
 8005386:	eeb0 0a47 	vmov.f32	s0, s14
 800538a:	eef0 0a67 	vmov.f32	s1, s15
 800538e:	f006 ff31 	bl	800c1f4 <sqrt>
 8005392:	ec53 2b10 	vmov	r2, r3, d0
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f7fb fbf5 	bl	8000b88 <__aeabi_d2uiz>
 800539e:	4603      	mov	r3, r0
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <vADCSetAvegareValue+0xb8>)
 80053a4:	861a      	strh	r2, [r3, #48]	; 0x30
	//itoa(adchandle.average, adchandle.stringValue, 10 );
	vCMDMasterReadADC(adchandle.average);
 80053a6:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <vADCSetAvegareValue+0xb8>)
 80053a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f95e 	bl	800566c <vCMDMasterReadADC>
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bdb0      	pop	{r4, r5, r7, pc}
 80053b8:	00000000 	.word	0x00000000
 80053bc:	40000000 	.word	0x40000000
 80053c0:	20004d18 	.word	0x20004d18
 80053c4:	40340000 	.word	0x40340000

080053c8 <vADCSaveSampleValue>:



void vADCSaveSampleValue(void){		//example in Systick_hander __  stm32f4xx_it.c
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
	//
	 if(adchandle.status == ADC_CONVERTING){
 80053cc:	4b10      	ldr	r3, [pc, #64]	; (8005410 <vADCSaveSampleValue+0x48>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d11a      	bne.n	800540a <vADCSaveSampleValue+0x42>
		  //save sample vaule to Array
		  adchandle.samplelist[adchandle.countNSample] = adchandle.sampeValue;
 80053d4:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <vADCSaveSampleValue+0x48>)
 80053d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d8:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <vADCSaveSampleValue+0x48>)
 80053da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053dc:	b291      	uxth	r1, r2
 80053de:	4a0c      	ldr	r2, [pc, #48]	; (8005410 <vADCSaveSampleValue+0x48>)
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	460a      	mov	r2, r1
 80053e6:	805a      	strh	r2, [r3, #2]
		  adchandle.countNSample++;
 80053e8:	4b09      	ldr	r3, [pc, #36]	; (8005410 <vADCSaveSampleValue+0x48>)
 80053ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053ec:	3301      	adds	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	4b07      	ldr	r3, [pc, #28]	; (8005410 <vADCSaveSampleValue+0x48>)
 80053f2:	865a      	strh	r2, [r3, #50]	; 0x32

		  //
		  if(adchandle.countNSample == N_SAMPLE){
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <vADCSaveSampleValue+0x48>)
 80053f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053f8:	2b14      	cmp	r3, #20
 80053fa:	d106      	bne.n	800540a <vADCSaveSampleValue+0x42>

			  vADCStopConversion();
 80053fc:	f7ff ff70 	bl	80052e0 <vADCStopConversion>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005400:	2200      	movs	r2, #0
 8005402:	2120      	movs	r1, #32
 8005404:	4803      	ldr	r0, [pc, #12]	; (8005414 <vADCSaveSampleValue+0x4c>)
 8005406:	f7fd fcc5 	bl	8002d94 <HAL_GPIO_WritePin>
		  }

	  }

}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20004d18 	.word	0x20004d18
 8005414:	40020000 	.word	0x40020000

08005418 <vCMDPoll>:





void vCMDPoll(void){
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0

	uint8_t cmdcur = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	71fb      	strb	r3, [r7, #7]
	float getSinf;

	//read register to check cmd and post event to MCP task
	cmdcur = (uint8_t)xCMDReadCmd();
 8005422:	f000 f8d7 	bl	80055d4 <xCMDReadCmd>
 8005426:	4603      	mov	r3, r0
 8005428:	71fb      	strb	r3, [r7, #7]
	vADCEnable();			//enable again the conversion
 800542a:	f7ff ff43 	bl	80052b4 <vADCEnable>
	getSinf = fGetSinFrequency();
 800542e:	f000 fc35 	bl	8005c9c <fGetSinFrequency>
 8005432:	ed87 0a00 	vstr	s0, [r7]
	switch(cmdcur){
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	2b14      	cmp	r3, #20
 800543a:	f200 80ba 	bhi.w	80055b2 <vCMDPoll+0x19a>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <vCMDPoll+0x2c>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	080055a9 	.word	0x080055a9
 8005448:	080055b3 	.word	0x080055b3
 800544c:	080055b3 	.word	0x080055b3
 8005450:	080055b3 	.word	0x080055b3
 8005454:	080055b3 	.word	0x080055b3
 8005458:	080055b3 	.word	0x080055b3
 800545c:	080055b3 	.word	0x080055b3
 8005460:	080055b3 	.word	0x080055b3
 8005464:	080055b3 	.word	0x080055b3
 8005468:	080055b3 	.word	0x080055b3
 800546c:	080054a1 	.word	0x080054a1
 8005470:	080054b7 	.word	0x080054b7
 8005474:	080054cd 	.word	0x080054cd
 8005478:	080054e3 	.word	0x080054e3
 800547c:	080054f9 	.word	0x080054f9
 8005480:	0800550f 	.word	0x0800550f
 8005484:	08005525 	.word	0x08005525
 8005488:	08005541 	.word	0x08005541
 800548c:	080055b3 	.word	0x080055b3
 8005490:	0800559b 	.word	0x0800559b
 8005494:	08005499 	.word	0x08005499

		case CMD_BALANCE:
			vMCPEventPost(MCP_BALANCE);
 8005498:	2002      	movs	r0, #2
 800549a:	f000 fa3b 	bl	8005914 <vMCPEventPost>
		break;
 800549e:	e08f      	b.n	80055c0 <vCMDPoll+0x1a8>

		case CMD_STEP5:
			vSetAllParameter(5, POSITIVE, getSinf);
 80054a0:	edd7 0a00 	vldr	s1, [r7]
 80054a4:	2001      	movs	r0, #1
 80054a6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80054aa:	f000 fbc5 	bl	8005c38 <vSetAllParameter>
			vMCPEventPost(MCP_STEPFUNCTION);
 80054ae:	2004      	movs	r0, #4
 80054b0:	f000 fa30 	bl	8005914 <vMCPEventPost>
			break;
 80054b4:	e084      	b.n	80055c0 <vCMDPoll+0x1a8>

		case CMD_STEP_5:
			vSetAllParameter(5, NEGATIVE, getSinf);
 80054b6:	edd7 0a00 	vldr	s1, [r7]
 80054ba:	2000      	movs	r0, #0
 80054bc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80054c0:	f000 fbba 	bl	8005c38 <vSetAllParameter>
			vMCPEventPost(MCP_STEPFUNCTION);
 80054c4:	2004      	movs	r0, #4
 80054c6:	f000 fa25 	bl	8005914 <vMCPEventPost>
			break;
 80054ca:	e079      	b.n	80055c0 <vCMDPoll+0x1a8>

		case CMD_STEP10:
			vSetAllParameter(10, POSITIVE, getSinf);
 80054cc:	edd7 0a00 	vldr	s1, [r7]
 80054d0:	2001      	movs	r0, #1
 80054d2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80054d6:	f000 fbaf 	bl	8005c38 <vSetAllParameter>
			vMCPEventPost(MCP_STEPFUNCTION);
 80054da:	2004      	movs	r0, #4
 80054dc:	f000 fa1a 	bl	8005914 <vMCPEventPost>
			break;
 80054e0:	e06e      	b.n	80055c0 <vCMDPoll+0x1a8>

		case CMD_STEP_10:
			vSetAllParameter(10, NEGATIVE, getSinf);
 80054e2:	edd7 0a00 	vldr	s1, [r7]
 80054e6:	2000      	movs	r0, #0
 80054e8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80054ec:	f000 fba4 	bl	8005c38 <vSetAllParameter>
			vMCPEventPost(MCP_STEPFUNCTION);
 80054f0:	2004      	movs	r0, #4
 80054f2:	f000 fa0f 	bl	8005914 <vMCPEventPost>
			break;
 80054f6:	e063      	b.n	80055c0 <vCMDPoll+0x1a8>

		case CMD_DIRAC100:
			vSetAllParameter(10, POSITIVE, getSinf);
 80054f8:	edd7 0a00 	vldr	s1, [r7]
 80054fc:	2001      	movs	r0, #1
 80054fe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005502:	f000 fb99 	bl	8005c38 <vSetAllParameter>
			vMCPEventPost(MCP_DIRACFUNCTION100);
 8005506:	2008      	movs	r0, #8
 8005508:	f000 fa04 	bl	8005914 <vMCPEventPost>
			break;
 800550c:	e058      	b.n	80055c0 <vCMDPoll+0x1a8>

		case CMD_DIRAC200:
			vSetAllParameter(10, POSITIVE, getSinf);
 800550e:	edd7 0a00 	vldr	s1, [r7]
 8005512:	2001      	movs	r0, #1
 8005514:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005518:	f000 fb8e 	bl	8005c38 <vSetAllParameter>
			vMCPEventPost(MCP_DIRACFUNCTION200);
 800551c:	2010      	movs	r0, #16
 800551e:	f000 f9f9 	bl	8005914 <vMCPEventPost>
			break;
 8005522:	e04d      	b.n	80055c0 <vCMDPoll+0x1a8>

		case CMD_FREQUENAUTO:
			countSinCycle = 0;
 8005524:	4b28      	ldr	r3, [pc, #160]	; (80055c8 <vCMDPoll+0x1b0>)
 8005526:	2200      	movs	r2, #0
 8005528:	801a      	strh	r2, [r3, #0]
			vSetAllParameter(0, POSITIVE, MIN_FREQUENCY);
 800552a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800552e:	2001      	movs	r0, #1
 8005530:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80055cc <vCMDPoll+0x1b4>
 8005534:	f000 fb80 	bl	8005c38 <vSetAllParameter>
			vMCPEventPost(MCP_FREQFUNCTION_AUTO);
 8005538:	2020      	movs	r0, #32
 800553a:	f000 f9eb 	bl	8005914 <vMCPEventPost>
			break;
 800553e:	e03f      	b.n	80055c0 <vCMDPoll+0x1a8>

		case CMD_FREQUENMAN:

			getSinf = fSetSinFrequency( fGetSinFrequency() + STEP_FREQUENCY );
 8005540:	f000 fbac 	bl	8005c9c <fGetSinFrequency>
 8005544:	eef0 7a40 	vmov.f32	s15, s0
 8005548:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80055d0 <vCMDPoll+0x1b8>
 800554c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005550:	eeb0 0a67 	vmov.f32	s0, s15
 8005554:	f000 fb8e 	bl	8005c74 <fSetSinFrequency>
 8005558:	ed87 0a00 	vstr	s0, [r7]

			if(getSinf > MAX_FREQUENCY)
 800555c:	edd7 7a00 	vldr	s15, [r7]
 8005560:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800556c:	dd07      	ble.n	800557e <vCMDPoll+0x166>
			{
				vADCDisable();
 800556e:	f7ff feb1 	bl	80052d4 <vADCDisable>
				vMCPStopExternISR();
 8005572:	f000 f903 	bl	800577c <vMCPStopExternISR>
				vMCPEventPost(MCP_BALANCE);
 8005576:	2002      	movs	r0, #2
 8005578:	f000 f9cc 	bl	8005914 <vMCPEventPost>
 800557c:	e009      	b.n	8005592 <vCMDPoll+0x17a>
			}
			else
			{
				vSetAllParameter(0, POSITIVE, getSinf);
 800557e:	edd7 0a00 	vldr	s1, [r7]
 8005582:	2001      	movs	r0, #1
 8005584:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80055cc <vCMDPoll+0x1b4>
 8005588:	f000 fb56 	bl	8005c38 <vSetAllParameter>
				vMCPEventPost(MCP_FREQFUNCTION_MANUAL);
 800558c:	2040      	movs	r0, #64	; 0x40
 800558e:	f000 f9c1 	bl	8005914 <vMCPEventPost>

			}
			countSinCycle = RESET;
 8005592:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <vCMDPoll+0x1b0>)
 8005594:	2200      	movs	r2, #0
 8005596:	801a      	strh	r2, [r3, #0]

			break;
 8005598:	e012      	b.n	80055c0 <vCMDPoll+0x1a8>

		case CMD_READ_ADC:

			vADCSetAvegareValue();
 800559a:	f7ff feb5 	bl	8005308 <vADCSetAvegareValue>
			vCMDCompleted();
 800559e:	f000 f839 	bl	8005614 <vCMDCompleted>
			xMCPReleaseCmd();
 80055a2:	f000 f8c9 	bl	8005738 <xMCPReleaseCmd>
			break;
 80055a6:	e00b      	b.n	80055c0 <vCMDPoll+0x1a8>

		case 0:
			vADCDisable();
 80055a8:	f7ff fe94 	bl	80052d4 <vADCDisable>
			xMCPReleaseCmd();
 80055ac:	f000 f8c4 	bl	8005738 <xMCPReleaseCmd>
			break;
 80055b0:	e006      	b.n	80055c0 <vCMDPoll+0x1a8>
		default:
			vADCDisable();
 80055b2:	f7ff fe8f 	bl	80052d4 <vADCDisable>
			//set error bit
			vCMDError();
 80055b6:	f000 f843 	bl	8005640 <vCMDError>
			xMCPReleaseCmd();
 80055ba:	f000 f8bd 	bl	8005738 <xMCPReleaseCmd>

			break;
 80055be:	bf00      	nop
	}

}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	2000012c 	.word	0x2000012c
 80055cc:	00000000 	.word	0x00000000
 80055d0:	3e4ccccd 	.word	0x3e4ccccd

080055d4 <xCMDReadCmd>:

static uint16_t xCMDReadCmd(void){
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
	/*
	 * when receive the new command, we clear completed BIT and error BIT
	 */
	ucSDiscInBuf[0] &= ~0x03;
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <xCMDReadCmd+0x20>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f023 0303 	bic.w	r3, r3, #3
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	4b04      	ldr	r3, [pc, #16]	; (80055f4 <xCMDReadCmd+0x20>)
 80055e4:	701a      	strb	r2, [r3, #0]
	return usSRegHoldBuf[0];
 80055e6:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <xCMDReadCmd+0x24>)
 80055e8:	881b      	ldrh	r3, [r3, #0]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	20004db4 	.word	0x20004db4
 80055f8:	20004db8 	.word	0x20004db8

080055fc <vCMDClearCmd>:

static void vCMDClearCmd(void){
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
	 usSRegHoldBuf[0] = 0;
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <vCMDClearCmd+0x14>)
 8005602:	2200      	movs	r2, #0
 8005604:	801a      	strh	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	20004db8 	.word	0x20004db8

08005614 <vCMDCompleted>:

void vCMDCompleted(void){
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
	ucSDiscInBuf[0] &= ~0x01;	//clear bit error
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <vCMDCompleted+0x28>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	f023 0301 	bic.w	r3, r3, #1
 8005620:	b2da      	uxtb	r2, r3
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <vCMDCompleted+0x28>)
 8005624:	701a      	strb	r2, [r3, #0]
	ucSDiscInBuf[0] |= 0x02; 	//set bit mcp worked completely
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <vCMDCompleted+0x28>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	f043 0302 	orr.w	r3, r3, #2
 800562e:	b2da      	uxtb	r2, r3
 8005630:	4b02      	ldr	r3, [pc, #8]	; (800563c <vCMDCompleted+0x28>)
 8005632:	701a      	strb	r2, [r3, #0]
	vCMDClearCmd();
 8005634:	f7ff ffe2 	bl	80055fc <vCMDClearCmd>
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20004db4 	.word	0x20004db4

08005640 <vCMDError>:

void vCMDError(void){
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
	ucSDiscInBuf[0] &= ~0x02;
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <vCMDError+0x28>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f023 0302 	bic.w	r3, r3, #2
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <vCMDError+0x28>)
 8005650:	701a      	strb	r2, [r3, #0]
	ucSDiscInBuf[0] |= 0x01;
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <vCMDError+0x28>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	b2da      	uxtb	r2, r3
 800565c:	4b02      	ldr	r3, [pc, #8]	; (8005668 <vCMDError+0x28>)
 800565e:	701a      	strb	r2, [r3, #0]
	vCMDClearCmd();
 8005660:	f7ff ffcc 	bl	80055fc <vCMDClearCmd>
}
 8005664:	bf00      	nop
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20004db4 	.word	0x20004db4

0800566c <vCMDMasterReadADC>:

void vCMDMasterReadADC(uint16_t value){
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	80fb      	strh	r3, [r7, #6]
	usSRegInBuf[0] = value;
 8005676:	4a04      	ldr	r2, [pc, #16]	; (8005688 <vCMDMasterReadADC+0x1c>)
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	8013      	strh	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20004dd8 	.word	0x20004dd8

0800568c <vMCPStart>:


/*************************	IMPLEMENT FUNCTION	****************************************/

//initialize some variable and Start to communicate
void vMCPStart (void){
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
//	if(intr1handle == NULL){
//		while(1);
//	}

	//create semaphore resource
	xMCPresourceCmd = xSemaphoreCreateBinary();
 8005692:	2203      	movs	r2, #3
 8005694:	2100      	movs	r1, #0
 8005696:	2001      	movs	r0, #1
 8005698:	f001 f88a 	bl	80067b0 <xQueueGenericCreate>
 800569c:	4603      	mov	r3, r0
 800569e:	4a1b      	ldr	r2, [pc, #108]	; (800570c <vMCPStart+0x80>)
 80056a0:	6013      	str	r3, [r2, #0]
	configASSERT(xMCPresourceCmd != NULL);
 80056a2:	4b1a      	ldr	r3, [pc, #104]	; (800570c <vMCPStart+0x80>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <vMCPStart+0x34>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	607b      	str	r3, [r7, #4]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <vMCPStart+0x32>
	xSemaphoreGive(xMCPresourceCmd);
 80056c0:	4b12      	ldr	r3, [pc, #72]	; (800570c <vMCPStart+0x80>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	2200      	movs	r2, #0
 80056c8:	2100      	movs	r1, #0
 80056ca:	f001 f8cf 	bl	800686c <xQueueGenericSend>
	xMCPTakeCmd();
 80056ce:	f000 f841 	bl	8005754 <xMCPTakeCmd>

	//Event for mcp software
	vMCPEventInit();
 80056d2:	f000 f8ff 	bl	80058d4 <vMCPEventInit>

	vADCInit();
 80056d6:	f7ff fdd9 	bl	800528c <vADCInit>

	eFuncRun = INITFUNCTION;
 80056da:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <vMCPStart+0x84>)
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
	vSetAllParameter(0, POSITIVE, MIN_FREQUENCY);
 80056e0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80056e4:	2001      	movs	r0, #1
 80056e6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8005714 <vMCPStart+0x88>
 80056ea:	f000 faa5 	bl	8005c38 <vSetAllParameter>

	vMCPStopExternISR();
 80056ee:	f000 f845 	bl	800577c <vMCPStopExternISR>

	HAL_GPIO_WritePin(GPIOB, SPI2_CS1_Pin /*|SPI2_CS2_Pin|SPI2_CS3_Pin*/ , GPIO_PIN_SET);
 80056f2:	2201      	movs	r2, #1
 80056f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056f8:	4807      	ldr	r0, [pc, #28]	; (8005718 <vMCPStart+0x8c>)
 80056fa:	f7fd fb4b 	bl	8002d94 <HAL_GPIO_WritePin>

	vStartUpTimer();	//the first time for timer startup
 80056fe:	f000 f9b1 	bl	8005a64 <vStartUpTimer>
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000124 	.word	0x20000124
 8005710:	20004d58 	.word	0x20004d58
 8005714:	00000000 	.word	0x00000000
 8005718:	40020400 	.word	0x40020400

0800571c <xMCPReleaseCmdFromISR>:


uint8_t xMCPReleaseCmdFromISR(void){
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0

	//from ISR
	xSemaphoreGiveFromISR(xMCPresourceCmd, NULL);
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <xMCPReleaseCmdFromISR+0x18>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f001 fa39 	bl	8006b9e <xQueueGiveFromISR>
	return TRUE;
 800572c:	2301      	movs	r3, #1

}
 800572e:	4618      	mov	r0, r3
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000124 	.word	0x20000124

08005738 <xMCPReleaseCmd>:

uint8_t xMCPReleaseCmd(void){
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
	xSemaphoreGive(xMCPresourceCmd);
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <xMCPReleaseCmd+0x18>)
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	2300      	movs	r3, #0
 8005742:	2200      	movs	r2, #0
 8005744:	2100      	movs	r1, #0
 8005746:	f001 f891 	bl	800686c <xQueueGenericSend>
	return TRUE;
 800574a:	2301      	movs	r3, #1
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20000124 	.word	0x20000124

08005754 <xMCPTakeCmd>:

uint8_t xMCPTakeCmd(void){
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
	if (xSemaphoreTake(xMCPresourceCmd, portMAX_DELAY) == pdTRUE)
 8005758:	4b07      	ldr	r3, [pc, #28]	; (8005778 <xMCPTakeCmd+0x24>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f04f 31ff 	mov.w	r1, #4294967295
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fb89 	bl	8006e78 <xQueueSemaphoreTake>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <xMCPTakeCmd+0x1c>
		return TRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <xMCPTakeCmd+0x1e>
	else
		return FALSE;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000124 	.word	0x20000124

0800577c <vMCPStopExternISR>:

void vMCPStopExternISR(void){
 800577c:	b580      	push	{r7, lr}
 800577e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(INTR_MCP);
 8005780:	2017      	movs	r0, #23
 8005782:	f7fc fde9 	bl	8002358 <HAL_NVIC_DisableIRQ>
//	xTimerStop(intr1handle, portMAX_DELAY);
}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}

0800578a <vMCPStopExternISRFromISR>:

void vMCPStopExternISRFromISR(void){
 800578a:	b580      	push	{r7, lr}
 800578c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(INTR_MCP);
 800578e:	2017      	movs	r0, #23
 8005790:	f7fc fde2 	bl	8002358 <HAL_NVIC_DisableIRQ>
	//xTimerStopFromISR(intr1handle, NULL);
}
 8005794:	bf00      	nop
 8005796:	bd80      	pop	{r7, pc}

08005798 <vMCPStartExternISR>:

void vMCPStartExternISR(void){
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
	//enable EXTI interrupt
	HAL_NVIC_EnableIRQ(INTR_MCP);
 800579c:	2017      	movs	r0, #23
 800579e:	f7fc fdcd 	bl	800233c <HAL_NVIC_EnableIRQ>

//	xTimerStart(intr1handle, portMAX_DELAY);
}
 80057a2:	bf00      	nop
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <vMCP41010Poll>:


void vMCP41010Poll(void){
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
	ewriteMCP eEvent;

	if(xMCPEventGet(&eEvent) == TRUE)
 80057ae:	1dfb      	adds	r3, r7, #7
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f8db 	bl	800596c <xMCPEventGet>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d17f      	bne.n	80058bc <vMCP41010Poll+0x114>
	{
		switch(eEvent)
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	2b20      	cmp	r3, #32
 80057c0:	dc46      	bgt.n	8005850 <vMCP41010Poll+0xa8>
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	db7c      	blt.n	80058c0 <vMCP41010Poll+0x118>
 80057c6:	3b02      	subs	r3, #2
 80057c8:	2b1e      	cmp	r3, #30
 80057ca:	d879      	bhi.n	80058c0 <vMCP41010Poll+0x118>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <vMCP41010Poll+0x2c>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	08005857 	.word	0x08005857
 80057d8:	080058c1 	.word	0x080058c1
 80057dc:	08005879 	.word	0x08005879
 80057e0:	080058c1 	.word	0x080058c1
 80057e4:	080058c1 	.word	0x080058c1
 80057e8:	080058c1 	.word	0x080058c1
 80057ec:	08005885 	.word	0x08005885
 80057f0:	080058c1 	.word	0x080058c1
 80057f4:	080058c1 	.word	0x080058c1
 80057f8:	080058c1 	.word	0x080058c1
 80057fc:	080058c1 	.word	0x080058c1
 8005800:	080058c1 	.word	0x080058c1
 8005804:	080058c1 	.word	0x080058c1
 8005808:	080058c1 	.word	0x080058c1
 800580c:	08005891 	.word	0x08005891
 8005810:	080058c1 	.word	0x080058c1
 8005814:	080058c1 	.word	0x080058c1
 8005818:	080058c1 	.word	0x080058c1
 800581c:	080058c1 	.word	0x080058c1
 8005820:	080058c1 	.word	0x080058c1
 8005824:	080058c1 	.word	0x080058c1
 8005828:	080058c1 	.word	0x080058c1
 800582c:	080058c1 	.word	0x080058c1
 8005830:	080058c1 	.word	0x080058c1
 8005834:	080058c1 	.word	0x080058c1
 8005838:	080058c1 	.word	0x080058c1
 800583c:	080058c1 	.word	0x080058c1
 8005840:	080058c1 	.word	0x080058c1
 8005844:	080058c1 	.word	0x080058c1
 8005848:	080058c1 	.word	0x080058c1
 800584c:	0800589d 	.word	0x0800589d
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d02b      	beq.n	80058ac <vMCP41010Poll+0x104>
				vStartTimerFreq();
				vMCPStartExternISR();
				break;

			default:
				break;
 8005854:	e034      	b.n	80058c0 <vMCP41010Poll+0x118>
				vSetAllParameter(PERCENT_BALANCE, POSITIVE, MIN_FREQUENCY);
 8005856:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800585a:	2001      	movs	r0, #1
 800585c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80058cc <vMCP41010Poll+0x124>
 8005860:	f000 f9ea 	bl	8005c38 <vSetAllParameter>
				vMCPSendToAllMCP();
 8005864:	f000 fa28 	bl	8005cb8 <vMCPSendToAllMCP>
				eFuncRun = NONEFUNCTION;
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <vMCP41010Poll+0x128>)
 800586a:	2206      	movs	r2, #6
 800586c:	701a      	strb	r2, [r3, #0]
				vCMDCompleted();
 800586e:	f7ff fed1 	bl	8005614 <vCMDCompleted>
				xMCPReleaseCmd();		//continue to receive data from command register
 8005872:	f7ff ff61 	bl	8005738 <xMCPReleaseCmd>
				break;
 8005876:	e024      	b.n	80058c2 <vMCP41010Poll+0x11a>
				eFuncRun = STEPFUNCTION;
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <vMCP41010Poll+0x128>)
 800587a:	2201      	movs	r2, #1
 800587c:	701a      	strb	r2, [r3, #0]
				vMCPStartExternISR();
 800587e:	f7ff ff8b 	bl	8005798 <vMCPStartExternISR>
				break;
 8005882:	e01e      	b.n	80058c2 <vMCP41010Poll+0x11a>
				eFuncRun = DIRACFUNCTION100;
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <vMCP41010Poll+0x128>)
 8005886:	2202      	movs	r2, #2
 8005888:	701a      	strb	r2, [r3, #0]
				vMCPStartExternISR();
 800588a:	f7ff ff85 	bl	8005798 <vMCPStartExternISR>
				break;
 800588e:	e018      	b.n	80058c2 <vMCP41010Poll+0x11a>
				eFuncRun = DIRACFUNCTION200;
 8005890:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <vMCP41010Poll+0x128>)
 8005892:	2203      	movs	r2, #3
 8005894:	701a      	strb	r2, [r3, #0]
				vMCPStartExternISR();
 8005896:	f7ff ff7f 	bl	8005798 <vMCPStartExternISR>
				break;
 800589a:	e012      	b.n	80058c2 <vMCP41010Poll+0x11a>
				eFuncRun = FREQFUNCTIONAUTO;
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <vMCP41010Poll+0x128>)
 800589e:	2204      	movs	r2, #4
 80058a0:	701a      	strb	r2, [r3, #0]
				vStartTimerFreq();
 80058a2:	f000 f8f7 	bl	8005a94 <vStartTimerFreq>
				vMCPStartExternISR();
 80058a6:	f7ff ff77 	bl	8005798 <vMCPStartExternISR>
				break;
 80058aa:	e00a      	b.n	80058c2 <vMCP41010Poll+0x11a>
				eFuncRun = 	FREQFUNCTIONMAN;
 80058ac:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <vMCP41010Poll+0x128>)
 80058ae:	2205      	movs	r2, #5
 80058b0:	701a      	strb	r2, [r3, #0]
				vStartTimerFreq();
 80058b2:	f000 f8ef 	bl	8005a94 <vStartTimerFreq>
				vMCPStartExternISR();
 80058b6:	f7ff ff6f 	bl	8005798 <vMCPStartExternISR>
				break;
 80058ba:	e002      	b.n	80058c2 <vMCP41010Poll+0x11a>
		}
	}
 80058bc:	bf00      	nop
 80058be:	e000      	b.n	80058c2 <vMCP41010Poll+0x11a>
				break;
 80058c0:	bf00      	nop
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	00000000 	.word	0x00000000
 80058d0:	20004d58 	.word	0x20004d58

080058d4 <vMCPEventInit>:
static uint16_t downcounter;

EventGroupHandle_t xMcpOsEvent;
/*****************EVENT FUNCTION**********************/

void vMCPEventInit(void){
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
	xMcpOsEvent = NULL;
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <vMCPEventInit+0x3c>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
	xMcpOsEvent = xEventGroupCreate();
 80058e0:	f000 fc1c 	bl	800611c <xEventGroupCreate>
 80058e4:	4603      	mov	r3, r0
 80058e6:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <vMCPEventInit+0x3c>)
 80058e8:	6013      	str	r3, [r2, #0]
	configASSERT(xMcpOsEvent != NULL);
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <vMCPEventInit+0x3c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <vMCPEventInit+0x34>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	607b      	str	r3, [r7, #4]
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <vMCPEventInit+0x32>
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20004d54 	.word	0x20004d54

08005914 <vMCPEventPost>:


//these event function to use for RTOS program
void vMCPEventPost(ewriteMCP event){
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
	xEventGroupSetBits(xMcpOsEvent, event);
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <vMCPEventPost+0x20>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	79fa      	ldrb	r2, [r7, #7]
 8005924:	4611      	mov	r1, r2
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fce0 	bl	80062ec <xEventGroupSetBits>
//  return TRUE;
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20004d54 	.word	0x20004d54

08005938 <vMCPEventPostFromISR>:

uint8_t vMCPEventPostFromISR(ewriteMCP event){
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	71fb      	strb	r3, [r7, #7]
	BaseType_t xresult = pdFAIL;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xMcpOsEvent, event, NULL);
 8005946:	4b08      	ldr	r3, [pc, #32]	; (8005968 <vMCPEventPostFromISR+0x30>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	79f9      	ldrb	r1, [r7, #7]
 800594c:	2200      	movs	r2, #0
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fd86 	bl	8006460 <xEventGroupSetBitsFromISR>
 8005954:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d100      	bne.n	800595e <vMCPEventPostFromISR+0x26>
		while(1);
 800595c:	e7fe      	b.n	800595c <vMCPEventPostFromISR+0x24>
	}
	return TRUE;
 800595e:	2301      	movs	r3, #1
}
 8005960:	4618      	mov	r0, r3
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20004d54 	.word	0x20004d54

0800596c <xMCPEventGet>:

uint8_t xMCPEventGet(ewriteMCP *pevent){
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af02      	add	r7, sp, #8
 8005972:	6078      	str	r0, [r7, #4]
	ewriteMCP eMCPEvent;
//	*pevent = eMCPEvent;
	eMCPEvent = xEventGroupWaitBits(	xMcpOsEvent,
 8005974:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <xMCPEventGet+0xf4>)
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	f04f 33ff 	mov.w	r3, #4294967295
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	2300      	movs	r3, #0
 8005980:	2201      	movs	r2, #1
 8005982:	217e      	movs	r1, #126	; 0x7e
 8005984:	f000 fbe4 	bl	8006150 <xEventGroupWaitBits>
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]
										MCP_FREQFUNCTION_AUTO	|
										MCP_FREQFUNCTION_MANUAL	),
										pdTRUE, 				//clear on exit
										pdFALSE,				//wait for any bits
										portMAX_DELAY			);
    switch (eMCPEvent)
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	2b20      	cmp	r3, #32
 8005990:	dc46      	bgt.n	8005a20 <xMCPEventGet+0xb4>
 8005992:	2b02      	cmp	r3, #2
 8005994:	db5f      	blt.n	8005a56 <xMCPEventGet+0xea>
 8005996:	3b02      	subs	r3, #2
 8005998:	2b1e      	cmp	r3, #30
 800599a:	d85c      	bhi.n	8005a56 <xMCPEventGet+0xea>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <xMCPEventGet+0x38>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	08005a27 	.word	0x08005a27
 80059a8:	08005a57 	.word	0x08005a57
 80059ac:	08005a2f 	.word	0x08005a2f
 80059b0:	08005a57 	.word	0x08005a57
 80059b4:	08005a57 	.word	0x08005a57
 80059b8:	08005a57 	.word	0x08005a57
 80059bc:	08005a37 	.word	0x08005a37
 80059c0:	08005a57 	.word	0x08005a57
 80059c4:	08005a57 	.word	0x08005a57
 80059c8:	08005a57 	.word	0x08005a57
 80059cc:	08005a57 	.word	0x08005a57
 80059d0:	08005a57 	.word	0x08005a57
 80059d4:	08005a57 	.word	0x08005a57
 80059d8:	08005a57 	.word	0x08005a57
 80059dc:	08005a3f 	.word	0x08005a3f
 80059e0:	08005a57 	.word	0x08005a57
 80059e4:	08005a57 	.word	0x08005a57
 80059e8:	08005a57 	.word	0x08005a57
 80059ec:	08005a57 	.word	0x08005a57
 80059f0:	08005a57 	.word	0x08005a57
 80059f4:	08005a57 	.word	0x08005a57
 80059f8:	08005a57 	.word	0x08005a57
 80059fc:	08005a57 	.word	0x08005a57
 8005a00:	08005a57 	.word	0x08005a57
 8005a04:	08005a57 	.word	0x08005a57
 8005a08:	08005a57 	.word	0x08005a57
 8005a0c:	08005a57 	.word	0x08005a57
 8005a10:	08005a57 	.word	0x08005a57
 8005a14:	08005a57 	.word	0x08005a57
 8005a18:	08005a57 	.word	0x08005a57
 8005a1c:	08005a47 	.word	0x08005a47
 8005a20:	2b40      	cmp	r3, #64	; 0x40
 8005a22:	d014      	beq.n	8005a4e <xMCPEventGet+0xe2>
 8005a24:	e017      	b.n	8005a56 <xMCPEventGet+0xea>
    {
		case MCP_BALANCE:
			*pevent = MCP_BALANCE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2202      	movs	r2, #2
 8005a2a:	701a      	strb	r2, [r3, #0]
			break;
 8005a2c:	e013      	b.n	8005a56 <xMCPEventGet+0xea>
		case MCP_STEPFUNCTION:
			*pevent = MCP_STEPFUNCTION;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2204      	movs	r2, #4
 8005a32:	701a      	strb	r2, [r3, #0]
			break;
 8005a34:	e00f      	b.n	8005a56 <xMCPEventGet+0xea>
		case MCP_DIRACFUNCTION100:
			*pevent = MCP_DIRACFUNCTION100;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	701a      	strb	r2, [r3, #0]
			break;
 8005a3c:	e00b      	b.n	8005a56 <xMCPEventGet+0xea>
		case MCP_DIRACFUNCTION200:
			*pevent = MCP_DIRACFUNCTION200;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2210      	movs	r2, #16
 8005a42:	701a      	strb	r2, [r3, #0]
			break;
 8005a44:	e007      	b.n	8005a56 <xMCPEventGet+0xea>
		case MCP_FREQFUNCTION_AUTO:
			*pevent = MCP_FREQFUNCTION_AUTO;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	701a      	strb	r2, [r3, #0]
			break;
 8005a4c:	e003      	b.n	8005a56 <xMCPEventGet+0xea>
		case MCP_FREQFUNCTION_MANUAL:
			*pevent = MCP_FREQFUNCTION_MANUAL;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2240      	movs	r2, #64	; 0x40
 8005a52:	701a      	strb	r2, [r3, #0]
			break;
 8005a54:	bf00      	nop
    }


	return TRUE;
 8005a56:	2301      	movs	r3, #1
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	20004d54 	.word	0x20004d54

08005a64 <vStartUpTimer>:
/******************************************************/


/*******************TIMER FUNCION**********************/
void vStartUpTimer(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
	downcounter = 100;
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <vStartUpTimer+0x14>)
 8005a6a:	2264      	movs	r2, #100	; 0x64
 8005a6c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8005a6e:	4803      	ldr	r0, [pc, #12]	; (8005a7c <vStartUpTimer+0x18>)
 8005a70:	f7fe fa40 	bl	8003ef4 <HAL_TIM_Base_Start_IT>
}
 8005a74:	bf00      	nop
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000128 	.word	0x20000128
 8005a7c:	20004b98 	.word	0x20004b98

08005a80 <vStopAllTimerFunc>:

void vStopAllTimerFunc(void){
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8005a84:	4802      	ldr	r0, [pc, #8]	; (8005a90 <vStopAllTimerFunc+0x10>)
 8005a86:	f7fe faa5 	bl	8003fd4 <HAL_TIM_Base_Stop_IT>
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20004b98 	.word	0x20004b98

08005a94 <vStartTimerFreq>:
 * Start timer for:
 * ->frequency function
 * ->Dirac100 function
 * ->Dirac200 function
 */
void vStartTimerFreq(void){
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
	downcounter = DOWNCOUNT_100MS;
 8005a98:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <vStartTimerFreq+0x14>)
 8005a9a:	2264      	movs	r2, #100	; 0x64
 8005a9c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8005a9e:	4803      	ldr	r0, [pc, #12]	; (8005aac <vStartTimerFreq+0x18>)
 8005aa0:	f7fe fa28 	bl	8003ef4 <HAL_TIM_Base_Start_IT>
}
 8005aa4:	bf00      	nop
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000128 	.word	0x20000128
 8005aac:	20004b98 	.word	0x20004b98

08005ab0 <HAL_TIM_PeriodElapsedCallback>:
/*
 * Timer for function run call back
 * ---------------------ISR interrupt after each 1ms----------------------------------
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	//each callback = 1ms
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	static uint8_t CountTimer100ms = 0;
	float getSinf;

	if (htim->Instance == TIM13){
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a56      	ldr	r2, [pc, #344]	; (8005c18 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d103      	bne.n	8005aca <HAL_TIM_PeriodElapsedCallback+0x1a>
	   HAL_IncTick();
 8005ac2:	f7fc f857 	bl	8001b74 <HAL_IncTick>
	   vADCSaveSampleValue();
 8005ac6:	f7ff fc7f 	bl	80053c8 <vADCSaveSampleValue>
	}

	if(htim->Instance == TIM6 )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a53      	ldr	r2, [pc, #332]	; (8005c1c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	f040 8095 	bne.w	8005c00 <HAL_TIM_PeriodElapsedCallback+0x150>
	{

			if(!downcounter--)
 8005ad6:	4b52      	ldr	r3, [pc, #328]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	1e5a      	subs	r2, r3, #1
 8005adc:	b291      	uxth	r1, r2
 8005ade:	4a50      	ldr	r2, [pc, #320]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005ae0:	8011      	strh	r1, [r2, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f040 808c 	bne.w	8005c00 <HAL_TIM_PeriodElapsedCallback+0x150>
			{
				switch(eFuncRun)
 8005ae8:	4b4e      	ldr	r3, [pc, #312]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b06      	cmp	r3, #6
 8005aee:	f200 8089 	bhi.w	8005c04 <HAL_TIM_PeriodElapsedCallback+0x154>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b15 	.word	0x08005b15
 8005afc:	08005c05 	.word	0x08005c05
 8005b00:	08005b37 	.word	0x08005b37
 8005b04:	08005b43 	.word	0x08005b43
 8005b08:	08005b4f 	.word	0x08005b4f
 8005b0c:	08005bb5 	.word	0x08005bb5
 8005b10:	08005b27 	.word	0x08005b27
				{
				case INITFUNCTION:
					eFuncRun = NONEFUNCTION;
 8005b14:	4b43      	ldr	r3, [pc, #268]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8005b16:	2206      	movs	r2, #6
 8005b18:	701a      	strb	r2, [r3, #0]
					vStopAllTimerFunc();
 8005b1a:	f7ff ffb1 	bl	8005a80 <vStopAllTimerFunc>
					vMCPEventPostFromISR(MCP_BALANCE);
 8005b1e:	2002      	movs	r0, #2
 8005b20:	f7ff ff0a 	bl	8005938 <vMCPEventPostFromISR>
					break;
 8005b24:	e073      	b.n	8005c0e <HAL_TIM_PeriodElapsedCallback+0x15e>

				case NONEFUNCTION:
					vStopAllTimerFunc();
 8005b26:	f7ff ffab 	bl	8005a80 <vStopAllTimerFunc>
					vMCPStopExternISR();
 8005b2a:	f7ff fe27 	bl	800577c <vMCPStopExternISR>
					vMCPEventPostFromISR(MCP_BALANCE);
 8005b2e:	2002      	movs	r0, #2
 8005b30:	f7ff ff02 	bl	8005938 <vMCPEventPostFromISR>
					break;
 8005b34:	e06b      	b.n	8005c0e <HAL_TIM_PeriodElapsedCallback+0x15e>

				case DIRACFUNCTION100:
					vStopAllTimerFunc();					//Stop timer for Dirac function
 8005b36:	f7ff ffa3 	bl	8005a80 <vStopAllTimerFunc>
					vMCPEventPostFromISR(MCP_BALANCE);
 8005b3a:	2002      	movs	r0, #2
 8005b3c:	f7ff fefc 	bl	8005938 <vMCPEventPostFromISR>

					break;
 8005b40:	e065      	b.n	8005c0e <HAL_TIM_PeriodElapsedCallback+0x15e>

				case DIRACFUNCTION200:
					vStopAllTimerFunc();				//Stop timer for Dirac function
 8005b42:	f7ff ff9d 	bl	8005a80 <vStopAllTimerFunc>
					vMCPEventPostFromISR(MCP_BALANCE);
 8005b46:	2002      	movs	r0, #2
 8005b48:	f7ff fef6 	bl	8005938 <vMCPEventPostFromISR>

					break;
 8005b4c:	e05f      	b.n	8005c0e <HAL_TIM_PeriodElapsedCallback+0x15e>

				case FREQFUNCTIONAUTO:
					CountTimer100ms++;
 8005b4e:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	4b34      	ldr	r3, [pc, #208]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005b58:	701a      	strb	r2, [r3, #0]
					downcounter = DOWNCOUNT_100MS;
 8005b5a:	4b31      	ldr	r3, [pc, #196]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005b5c:	2264      	movs	r2, #100	; 0x64
 8005b5e:	801a      	strh	r2, [r3, #0]
					if(CountTimer100ms == MAX_TIME_STEP_FREQ)
 8005b60:	4b31      	ldr	r3, [pc, #196]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b32      	cmp	r3, #50	; 0x32
 8005b66:	d14f      	bne.n	8005c08 <HAL_TIM_PeriodElapsedCallback+0x158>
					{
						CountTimer100ms = 0;
 8005b68:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	701a      	strb	r2, [r3, #0]
						countSinCycle = 0;							//reset count Sin Cycle
 8005b6e:	4b2f      	ldr	r3, [pc, #188]	; (8005c2c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	801a      	strh	r2, [r3, #0]
						getSinf = fSetSinFrequency(STEP_FREQUENCY + fGetSinFrequency() );
 8005b74:	f000 f892 	bl	8005c9c <fGetSinFrequency>
 8005b78:	eef0 7a40 	vmov.f32	s15, s0
 8005b7c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005c30 <HAL_TIM_PeriodElapsedCallback+0x180>
 8005b80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b84:	eeb0 0a67 	vmov.f32	s0, s15
 8005b88:	f000 f874 	bl	8005c74 <fSetSinFrequency>
 8005b8c:	ed87 0a03 	vstr	s0, [r7, #12]
						if(getSinf > MAX_FREQUENCY)
 8005b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b94:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba0:	dc00      	bgt.n	8005ba4 <HAL_TIM_PeriodElapsedCallback+0xf4>

							vMCPEventPostFromISR(MCP_BALANCE);
						}

					}
					break;
 8005ba2:	e031      	b.n	8005c08 <HAL_TIM_PeriodElapsedCallback+0x158>
							vStopAllTimerFunc();
 8005ba4:	f7ff ff6c 	bl	8005a80 <vStopAllTimerFunc>
							vMCPStopExternISRFromISR();
 8005ba8:	f7ff fdef 	bl	800578a <vMCPStopExternISRFromISR>
							vMCPEventPostFromISR(MCP_BALANCE);
 8005bac:	2002      	movs	r0, #2
 8005bae:	f7ff fec3 	bl	8005938 <vMCPEventPostFromISR>
					break;
 8005bb2:	e029      	b.n	8005c08 <HAL_TIM_PeriodElapsedCallback+0x158>

				case FREQFUNCTIONMAN:
					CountTimer100ms++;
 8005bb4:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005bbe:	701a      	strb	r2, [r3, #0]
					downcounter = DOWNCOUNT_100MS;
 8005bc0:	4b17      	ldr	r3, [pc, #92]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005bc2:	2264      	movs	r2, #100	; 0x64
 8005bc4:	801a      	strh	r2, [r3, #0]
					if(CountTimer100ms == MAX_TIME_STEP_FREQ)//freq manual function run out of time
 8005bc6:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b32      	cmp	r3, #50	; 0x32
 8005bcc:	d11e      	bne.n	8005c0c <HAL_TIM_PeriodElapsedCallback+0x15c>
					{
						vMCPStopExternISRFromISR();
 8005bce:	f7ff fddc 	bl	800578a <vMCPStopExternISRFromISR>
						vStopAllTimerFunc();
 8005bd2:	f7ff ff55 	bl	8005a80 <vStopAllTimerFunc>

						vSetAllParameter(PERCENT_BALANCE, POSITIVE, fGetSinFrequency());
 8005bd6:	f000 f861 	bl	8005c9c <fGetSinFrequency>
 8005bda:	eef0 7a40 	vmov.f32	s15, s0
 8005bde:	eef0 0a67 	vmov.f32	s1, s15
 8005be2:	2001      	movs	r0, #1
 8005be4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005c34 <HAL_TIM_PeriodElapsedCallback+0x184>
 8005be8:	f000 f826 	bl	8005c38 <vSetAllParameter>
						vMCPSendToAllMCP();
 8005bec:	f000 f864 	bl	8005cb8 <vMCPSendToAllMCP>

						CountTimer100ms = 0;
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	701a      	strb	r2, [r3, #0]
						vCMDCompleted();
 8005bf6:	f7ff fd0d 	bl	8005614 <vCMDCompleted>
						xMCPReleaseCmdFromISR();
 8005bfa:	f7ff fd8f 	bl	800571c <xMCPReleaseCmdFromISR>
					}
					break;
 8005bfe:	e005      	b.n	8005c0c <HAL_TIM_PeriodElapsedCallback+0x15c>

				default:

					break;
				}
			}
 8005c00:	bf00      	nop
 8005c02:	e004      	b.n	8005c0e <HAL_TIM_PeriodElapsedCallback+0x15e>
					break;
 8005c04:	bf00      	nop
 8005c06:	e002      	b.n	8005c0e <HAL_TIM_PeriodElapsedCallback+0x15e>
					break;
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <HAL_TIM_PeriodElapsedCallback+0x15e>
					break;
 8005c0c:	bf00      	nop

	}

}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40001c00 	.word	0x40001c00
 8005c1c:	40001000 	.word	0x40001000
 8005c20:	20000128 	.word	0x20000128
 8005c24:	20004d58 	.word	0x20004d58
 8005c28:	2000012a 	.word	0x2000012a
 8005c2c:	2000012c 	.word	0x2000012c
 8005c30:	3e4ccccd 	.word	0x3e4ccccd
 8005c34:	00000000 	.word	0x00000000

08005c38 <vSetAllParameter>:
  * @param  percent: percentage increase amplify Vin : 0% < percent <= 10 %
  * @param  ampState: Amplify direction of Vin. Two valid value are: NEGATIVE = 0 and POSITIVE
  * @param  sinFRQ: only used in Frequency function mode
  * @retval None
  */
void vSetAllParameter(float percent, eAmplifyDirect ampState, float sinFRQ){
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005c42:	4603      	mov	r3, r0
 8005c44:	edc7 0a01 	vstr	s1, [r7, #4]
 8005c48:	72fb      	strb	r3, [r7, #11]

	prvucSetDValue(percent, ampState);
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005c52:	f000 f851 	bl	8005cf8 <prvucSetDValue>
	prvvSetSendBuf(Dvalue);
 8005c56:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <vSetAllParameter+0x38>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f8b8 	bl	8005dd0 <prvvSetSendBuf>
	(void)fSetSinFrequency(sinFRQ);
 8005c60:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c64:	f000 f806 	bl	8005c74 <fSetSinFrequency>
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000134 	.word	0x20000134

08005c74 <fSetSinFrequency>:

float fSetSinFrequency(float sinFrq){
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	ed87 0a01 	vstr	s0, [r7, #4]
	sinFreqCreate = sinFrq;
 8005c7e:	4a06      	ldr	r2, [pc, #24]	; (8005c98 <fSetSinFrequency+0x24>)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6013      	str	r3, [r2, #0]
	return sinFrq;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	ee07 3a90 	vmov	s15, r3
}
 8005c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	20000130 	.word	0x20000130

08005c9c <fGetSinFrequency>:

float fGetSinFrequency(void){
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
	return sinFreqCreate;
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <fGetSinFrequency+0x18>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	ee07 3a90 	vmov	s15, r3
}
 8005ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000130 	.word	0x20000130

08005cb8 <vMCPSendToAllMCP>:
//void vSetSendBufMCP3(uint16_t NumCycle){
////	float temp = SIN_AMPLITUDE * sin( 0.02 * NumCycle * 2.0* PI * sinFreqCreate + 4.0*PI/3.0);
////	prvvSetSendBuf( prviRoundingNumber( (110.0 * temp + 10.0)*256.0 / (10.0*temp + 20.0) ) );
//}

void vMCPSendToAllMCP(void){
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
		
		HAL_GPIO_WritePin(GPIOB, SPI2_CS1_Pin/*|SPI2_CS2_Pin|SPI2_CS3_Pin*/, GPIO_PIN_RESET);
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cc2:	4809      	ldr	r0, [pc, #36]	; (8005ce8 <vMCPSendToAllMCP+0x30>)
 8005cc4:	f7fd f866 	bl	8002d94 <HAL_GPIO_WritePin>
	
		//polling SPI
		HAL_SPI_Transmit(&hspi2, (uint8_t*)&sendbuf, 1, HAL_MAX_DELAY);
 8005cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ccc:	2201      	movs	r2, #1
 8005cce:	4907      	ldr	r1, [pc, #28]	; (8005cec <vMCPSendToAllMCP+0x34>)
 8005cd0:	4807      	ldr	r0, [pc, #28]	; (8005cf0 <vMCPSendToAllMCP+0x38>)
 8005cd2:	f7fd feb8 	bl	8003a46 <HAL_SPI_Transmit>
		
		HAL_GPIO_WritePin(GPIOB, SPI2_CS1_Pin/*|SPI2_CS2_Pin|SPI2_CS3_Pin*/, GPIO_PIN_SET);
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cdc:	4802      	ldr	r0, [pc, #8]	; (8005ce8 <vMCPSendToAllMCP+0x30>)
 8005cde:	f7fd f859 	bl	8002d94 <HAL_GPIO_WritePin>
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40020400 	.word	0x40020400
 8005cec:	20000136 	.word	0x20000136
 8005cf0:	20004ab4 	.word	0x20004ab4
 8005cf4:	00000000 	.word	0x00000000

08005cf8 <prvucSetDValue>:
////
////	HAL_GPIO_WritePin(GPIOB, SPI2_CS3_Pin, GPIO_PIN_SET);
//
//}

static uint8_t prvucSetDValue (float percent, eAmplifyDirect ampState){
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d02:	4603      	mov	r3, r0
 8005d04:	70fb      	strb	r3, [r7, #3]
    float temp;
    if(ampState == NEGATIVE)
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10c      	bne.n	8005d26 <prvucSetDValue+0x2e>
        temp = 1 - (percent / 100);
 8005d0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d10:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8005dc0 <prvucSetDValue+0xc8>
 8005d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d20:	edc7 7a03 	vstr	s15, [r7, #12]
 8005d24:	e00e      	b.n	8005d44 <prvucSetDValue+0x4c>
    else if(ampState == POSITIVE)
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d10b      	bne.n	8005d44 <prvucSetDValue+0x4c>
        temp = 1 + (percent / 100);
 8005d2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d30:	eddf 6a23 	vldr	s13, [pc, #140]	; 8005dc0 <prvucSetDValue+0xc8>
 8005d34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d40:	edc7 7a03 	vstr	s15, [r7, #12]

    Dvalue = (uint16_t) prviRoundingNumber( 256 * (110 * temp - 100) / (10 *temp + 10) );
 8005d44:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d48:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005dc4 <prvucSetDValue+0xcc>
 8005d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d50:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005dc0 <prvucSetDValue+0xc8>
 8005d54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d58:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005dc8 <prvucSetDValue+0xd0>
 8005d5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d64:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005d68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005d6c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d78:	eeb0 0a66 	vmov.f32	s0, s13
 8005d7c:	f000 f83e 	bl	8005dfc <prviRoundingNumber>
 8005d80:	4603      	mov	r3, r0
 8005d82:	461a      	mov	r2, r3
 8005d84:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <prvucSetDValue+0xd4>)
 8005d86:	701a      	strb	r2, [r3, #0]

    if((percent > 9.09) && (ampState == NEGATIVE) )
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fa fbf5 	bl	8000578 <__aeabi_f2d>
 8005d8e:	a30a      	add	r3, pc, #40	; (adr r3, 8005db8 <prvucSetDValue+0xc0>)
 8005d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d94:	f7fa fed8 	bl	8000b48 <__aeabi_dcmpgt>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <prvucSetDValue+0xb2>
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <prvucSetDValue+0xb2>
        Dvalue = 0;
 8005da4:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <prvucSetDValue+0xd4>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
		//do something here if want to return state
		return 0;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	f3af 8000 	nop.w
 8005db8:	7ae147ae 	.word	0x7ae147ae
 8005dbc:	40222e14 	.word	0x40222e14
 8005dc0:	42c80000 	.word	0x42c80000
 8005dc4:	42dc0000 	.word	0x42dc0000
 8005dc8:	43800000 	.word	0x43800000
 8005dcc:	20000134 	.word	0x20000134

08005dd0 <prvvSetSendBuf>:

static void prvvSetSendBuf(uint8_t dvalue){
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	71fb      	strb	r3, [r7, #7]


	sendbuf = (uint16_t)( ((uint16_t)dvalue & 0x00FF) | MCP_COMMAND_WRITE );
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	b21b      	sxth	r3, r3
 8005dde:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8005de2:	b21b      	sxth	r3, r3
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <prvvSetSendBuf+0x28>)
 8005de8:	801a      	strh	r2, [r3, #0]
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	20000136 	.word	0x20000136

08005dfc <prviRoundingNumber>:

static uint8_t prviRoundingNumber(float floatnum){
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t temp1, tempResult;
    tempResult = (uint16_t) floatnum;
 8005e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0e:	ee17 3a90 	vmov	r3, s15
 8005e12:	81fb      	strh	r3, [r7, #14]
    temp1 = (uint16_t) (floatnum *10);
 8005e14:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e24:	ee17 3a90 	vmov	r3, s15
 8005e28:	81bb      	strh	r3, [r7, #12]
    if(temp1 % 10 >= 5)
 8005e2a:	89ba      	ldrh	r2, [r7, #12]
 8005e2c:	4b0d      	ldr	r3, [pc, #52]	; (8005e64 <prviRoundingNumber+0x68>)
 8005e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e32:	08d9      	lsrs	r1, r3, #3
 8005e34:	460b      	mov	r3, r1
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d902      	bls.n	8005e4a <prviRoundingNumber+0x4e>
    {
        tempResult += 1;
 8005e44:	89fb      	ldrh	r3, [r7, #14]
 8005e46:	3301      	adds	r3, #1
 8005e48:	81fb      	strh	r3, [r7, #14]
    }
	if(tempResult >= 256)
 8005e4a:	89fb      	ldrh	r3, [r7, #14]
 8005e4c:	2bff      	cmp	r3, #255	; 0xff
 8005e4e:	d901      	bls.n	8005e54 <prviRoundingNumber+0x58>
	{
		tempResult = 255;
 8005e50:	23ff      	movs	r3, #255	; 0xff
 8005e52:	81fb      	strh	r3, [r7, #14]
	}
    return (uint8_t)tempResult;
 8005e54:	89fb      	ldrh	r3, [r7, #14]
 8005e56:	b2db      	uxtb	r3, r3
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	cccccccd 	.word	0xcccccccd

08005e68 <__NVIC_SetPriority>:
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	db0a      	blt.n	8005e92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	490c      	ldr	r1, [pc, #48]	; (8005eb4 <__NVIC_SetPriority+0x4c>)
 8005e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e86:	0112      	lsls	r2, r2, #4
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e90:	e00a      	b.n	8005ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	4908      	ldr	r1, [pc, #32]	; (8005eb8 <__NVIC_SetPriority+0x50>)
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	3b04      	subs	r3, #4
 8005ea0:	0112      	lsls	r2, r2, #4
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	761a      	strb	r2, [r3, #24]
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	e000e100 	.word	0xe000e100
 8005eb8:	e000ed00 	.word	0xe000ed00

08005ebc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ec0:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <SysTick_Handler+0x1c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ec4:	f002 f998 	bl	80081f8 <xTaskGetSchedulerState>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d001      	beq.n	8005ed2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ece:	f003 f9b3 	bl	8009238 <xPortSysTickHandler>
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	e000e010 	.word	0xe000e010

08005edc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f06f 0004 	mvn.w	r0, #4
 8005ee6:	f7ff ffbf 	bl	8005e68 <__NVIC_SetPriority>
#endif
}
 8005eea:	bf00      	nop
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ef6:	f3ef 8305 	mrs	r3, IPSR
 8005efa:	603b      	str	r3, [r7, #0]
  return(result);
 8005efc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f02:	f06f 0305 	mvn.w	r3, #5
 8005f06:	607b      	str	r3, [r7, #4]
 8005f08:	e00c      	b.n	8005f24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <osKernelInitialize+0x44>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f12:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <osKernelInitialize+0x44>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	e002      	b.n	8005f24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f24:	687b      	ldr	r3, [r7, #4]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000138 	.word	0x20000138

08005f38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f3e:	f3ef 8305 	mrs	r3, IPSR
 8005f42:	603b      	str	r3, [r7, #0]
  return(result);
 8005f44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f4a:	f06f 0305 	mvn.w	r3, #5
 8005f4e:	607b      	str	r3, [r7, #4]
 8005f50:	e010      	b.n	8005f74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f52:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <osKernelStart+0x48>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d109      	bne.n	8005f6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f5a:	f7ff ffbf 	bl	8005edc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f5e:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <osKernelStart+0x48>)
 8005f60:	2202      	movs	r2, #2
 8005f62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f64:	f001 fc62 	bl	800782c <vTaskStartScheduler>
      stat = osOK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	607b      	str	r3, [r7, #4]
 8005f6c:	e002      	b.n	8005f74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f74:	687b      	ldr	r3, [r7, #4]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000138 	.word	0x20000138

08005f84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08e      	sub	sp, #56	; 0x38
 8005f88:	af04      	add	r7, sp, #16
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f94:	f3ef 8305 	mrs	r3, IPSR
 8005f98:	617b      	str	r3, [r7, #20]
  return(result);
 8005f9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d17e      	bne.n	800609e <osThreadNew+0x11a>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d07b      	beq.n	800609e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005fa6:	2380      	movs	r3, #128	; 0x80
 8005fa8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005faa:	2318      	movs	r3, #24
 8005fac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d045      	beq.n	800604a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <osThreadNew+0x48>
        name = attr->name;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <osThreadNew+0x6e>
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	2b38      	cmp	r3, #56	; 0x38
 8005fe4:	d805      	bhi.n	8005ff2 <osThreadNew+0x6e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <osThreadNew+0x72>
        return (NULL);
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e054      	b.n	80060a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	089b      	lsrs	r3, r3, #2
 8006004:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00e      	beq.n	800602c <osThreadNew+0xa8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	2b5b      	cmp	r3, #91	; 0x5b
 8006014:	d90a      	bls.n	800602c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800601a:	2b00      	cmp	r3, #0
 800601c:	d006      	beq.n	800602c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <osThreadNew+0xa8>
        mem = 1;
 8006026:	2301      	movs	r3, #1
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	e010      	b.n	800604e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10c      	bne.n	800604e <osThreadNew+0xca>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <osThreadNew+0xca>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <osThreadNew+0xca>
          mem = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	e001      	b.n	800604e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d110      	bne.n	8006076 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800605c:	9202      	str	r2, [sp, #8]
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f001 f996 	bl	800739c <xTaskCreateStatic>
 8006070:	4603      	mov	r3, r0
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	e013      	b.n	800609e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d110      	bne.n	800609e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	b29a      	uxth	r2, r3
 8006080:	f107 0310 	add.w	r3, r7, #16
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f001 f9e1 	bl	8007456 <xTaskCreate>
 8006094:	4603      	mov	r3, r0
 8006096:	2b01      	cmp	r3, #1
 8006098:	d001      	beq.n	800609e <osThreadNew+0x11a>
            hTask = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800609e:	693b      	ldr	r3, [r7, #16]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3728      	adds	r7, #40	; 0x28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80060ac:	2000      	movs	r0, #0
 80060ae:	f001 fb17 	bl	80076e0 <vTaskDelete>
#endif
  for (;;);
 80060b2:	e7fe      	b.n	80060b2 <osThreadExit+0xa>

080060b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a07      	ldr	r2, [pc, #28]	; (80060e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80060c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4a06      	ldr	r2, [pc, #24]	; (80060e4 <vApplicationGetIdleTaskMemory+0x30>)
 80060ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2280      	movs	r2, #128	; 0x80
 80060d0:	601a      	str	r2, [r3, #0]
}
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	2000013c 	.word	0x2000013c
 80060e4:	20000198 	.word	0x20000198

080060e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4a07      	ldr	r2, [pc, #28]	; (8006114 <vApplicationGetTimerTaskMemory+0x2c>)
 80060f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4a06      	ldr	r2, [pc, #24]	; (8006118 <vApplicationGetTimerTaskMemory+0x30>)
 80060fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006106:	601a      	str	r2, [r3, #0]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20000398 	.word	0x20000398
 8006118:	200003f4 	.word	0x200003f4

0800611c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006122:	2020      	movs	r0, #32
 8006124:	f003 f918 	bl	8009358 <pvPortMalloc>
 8006128:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3304      	adds	r3, #4
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f9a4 	bl	8006488 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006146:	687b      	ldr	r3, [r7, #4]
	}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b090      	sub	sp, #64	; 0x40
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006166:	2300      	movs	r3, #0
 8006168:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <xEventGroupWaitBits+0x36>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	623b      	str	r3, [r7, #32]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	61fb      	str	r3, [r7, #28]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	61bb      	str	r3, [r7, #24]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061c2:	f002 f819 	bl	80081f8 <xTaskGetSchedulerState>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <xEventGroupWaitBits+0x82>
 80061cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <xEventGroupWaitBits+0x86>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <xEventGroupWaitBits+0x88>
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	617b      	str	r3, [r7, #20]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80061f2:	f001 fb81 	bl	80078f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006202:	f000 f90b 	bl	800641c <prvTestWaitCondition>
 8006206:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00e      	beq.n	800622c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006212:	2300      	movs	r3, #0
 8006214:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d028      	beq.n	800626e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800621c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	43db      	mvns	r3, r3
 8006224:	401a      	ands	r2, r3
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	e020      	b.n	800626e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800622c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006236:	2301      	movs	r3, #1
 8006238:	633b      	str	r3, [r7, #48]	; 0x30
 800623a:	e018      	b.n	800626e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006248:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006256:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625a:	1d18      	adds	r0, r3, #4
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	4313      	orrs	r3, r2
 8006262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006264:	4619      	mov	r1, r3
 8006266:	f001 fd3f 	bl	8007ce8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800626e:	f001 fb51 	bl	8007914 <xTaskResumeAll>
 8006272:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006276:	2b00      	cmp	r3, #0
 8006278:	d031      	beq.n	80062de <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d107      	bne.n	8006290 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006280:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <xEventGroupWaitBits+0x198>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006290:	f002 f928 	bl	80084e4 <uxTaskResetEventItemValue>
 8006294:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d11a      	bne.n	80062d6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80062a0:	f002 ff38 	bl	8009114 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80062a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80062b0:	f000 f8b4 	bl	800641c <prvTestWaitCondition>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d006      	beq.n	80062ce <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80062c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	43db      	mvns	r3, r3
 80062c8:	401a      	ands	r2, r3
 80062ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062cc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80062ce:	2301      	movs	r3, #1
 80062d0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80062d2:	f002 ff4f 	bl	8009174 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80062de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3740      	adds	r7, #64	; 0x40
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08e      	sub	sp, #56	; 0x38
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80062f6:	2300      	movs	r3, #0
 80062f8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80062fe:	2300      	movs	r3, #0
 8006300:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <xEventGroupSetBits+0x32>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	613b      	str	r3, [r7, #16]
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <xEventGroupSetBits+0x52>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	60fb      	str	r3, [r7, #12]
}
 800633a:	bf00      	nop
 800633c:	e7fe      	b.n	800633c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	3304      	adds	r3, #4
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	3308      	adds	r3, #8
 8006348:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800634a:	f001 fad5 	bl	80078f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	431a      	orrs	r2, r3
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006360:	e03c      	b.n	80063dc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800636e:	2300      	movs	r3, #0
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006378:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006380:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d108      	bne.n	800639e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639c:	e008      	b.n	80063b0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	4013      	ands	r3, r2
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d101      	bne.n	80063b0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80063ac:	2301      	movs	r3, #1
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d010      	beq.n	80063d8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80063c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063d0:	4619      	mov	r1, r3
 80063d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063d4:	f001 fd54 	bl	8007e80 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80063dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d1be      	bne.n	8006362 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	43db      	mvns	r3, r3
 80063ec:	401a      	ands	r2, r3
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80063f2:	f001 fa8f 	bl	8007914 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	681b      	ldr	r3, [r3, #0]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3738      	adds	r7, #56	; 0x38
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff ff6c 	bl	80062ec <xEventGroupSetBits>
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d107      	bne.n	8006442 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e007      	b.n	8006452 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4013      	ands	r3, r2
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d101      	bne.n	8006452 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006452:	697b      	ldr	r3, [r7, #20]
}
 8006454:	4618      	mov	r0, r3
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	68f9      	ldr	r1, [r7, #12]
 8006472:	4804      	ldr	r0, [pc, #16]	; (8006484 <xEventGroupSetBitsFromISR+0x24>)
 8006474:	f002 fd04 	bl	8008e80 <xTimerPendFunctionCallFromISR>
 8006478:	6178      	str	r0, [r7, #20]

		return xReturn;
 800647a:	697b      	ldr	r3, [r7, #20]
	}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	08006403 	.word	0x08006403

08006488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f103 0208 	add.w	r2, r3, #8
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f04f 32ff 	mov.w	r2, #4294967295
 80064a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f103 0208 	add.w	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f103 0208 	add.w	r2, r3, #8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	601a      	str	r2, [r3, #0]
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d103      	bne.n	800654a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e00c      	b.n	8006564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3308      	adds	r3, #8
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e002      	b.n	8006558 <vListInsert+0x2e>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d2f6      	bcs.n	8006552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6892      	ldr	r2, [r2, #8]
 80065b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6852      	ldr	r2, [r2, #4]
 80065bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d103      	bne.n	80065d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <xQueueGenericReset+0x2a>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	60bb      	str	r3, [r7, #8]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800661a:	f002 fd7b 	bl	8009114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800662a:	fb01 f303 	mul.w	r3, r1, r3
 800662e:	441a      	add	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	3b01      	subs	r3, #1
 800664c:	68f9      	ldr	r1, [r7, #12]
 800664e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006650:	fb01 f303 	mul.w	r3, r1, r3
 8006654:	441a      	add	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	22ff      	movs	r2, #255	; 0xff
 800665e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	22ff      	movs	r2, #255	; 0xff
 8006666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d114      	bne.n	800669a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01a      	beq.n	80066ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3310      	adds	r3, #16
 800667c:	4618      	mov	r0, r3
 800667e:	f001 fb9b 	bl	8007db8 <xTaskRemoveFromEventList>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d012      	beq.n	80066ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006688:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <xQueueGenericReset+0xcc>)
 800668a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	e009      	b.n	80066ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3310      	adds	r3, #16
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fef2 	bl	8006488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3324      	adds	r3, #36	; 0x24
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff feed 	bl	8006488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066ae:	f002 fd61 	bl	8009174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066b2:	2301      	movs	r3, #1
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08e      	sub	sp, #56	; 0x38
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80066d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066e6:	bf00      	nop
 80066e8:	e7fe      	b.n	80066e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <xQueueGenericCreateStatic+0x52>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <xQueueGenericCreateStatic+0x56>
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <xQueueGenericCreateStatic+0x58>
 8006716:	2300      	movs	r3, #0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	623b      	str	r3, [r7, #32]
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <xQueueGenericCreateStatic+0x7e>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <xQueueGenericCreateStatic+0x82>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <xQueueGenericCreateStatic+0x84>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	61fb      	str	r3, [r7, #28]
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800675e:	2350      	movs	r3, #80	; 0x50
 8006760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b50      	cmp	r3, #80	; 0x50
 8006766:	d00a      	beq.n	800677e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	61bb      	str	r3, [r7, #24]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800677e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00d      	beq.n	80067a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006792:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f83f 	bl	8006824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3730      	adds	r7, #48	; 0x30
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	4613      	mov	r3, r2
 80067bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <xQueueGenericCreate+0x2a>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	613b      	str	r3, [r7, #16]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3350      	adds	r3, #80	; 0x50
 80067e8:	4618      	mov	r0, r3
 80067ea:	f002 fdb5 	bl	8009358 <pvPortMalloc>
 80067ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d011      	beq.n	800681a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	3350      	adds	r3, #80	; 0x50
 80067fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006808:	79fa      	ldrb	r2, [r7, #7]
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	4613      	mov	r3, r2
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f805 	bl	8006824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800681a:	69bb      	ldr	r3, [r7, #24]
	}
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e002      	b.n	8006846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006852:	2101      	movs	r1, #1
 8006854:	69b8      	ldr	r0, [r7, #24]
 8006856:	f7ff fecb 	bl	80065f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08e      	sub	sp, #56	; 0x38
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800687a:	2300      	movs	r3, #0
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <xQueueGenericSend+0x32>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d103      	bne.n	80068ac <xQueueGenericSend+0x40>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <xQueueGenericSend+0x44>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <xQueueGenericSend+0x46>
 80068b0:	2300      	movs	r3, #0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <xQueueGenericSend+0x60>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d103      	bne.n	80068da <xQueueGenericSend+0x6e>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <xQueueGenericSend+0x72>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <xQueueGenericSend+0x74>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <xQueueGenericSend+0x8e>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	623b      	str	r3, [r7, #32]
}
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068fa:	f001 fc7d 	bl	80081f8 <xTaskGetSchedulerState>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <xQueueGenericSend+0x9e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <xQueueGenericSend+0xa2>
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <xQueueGenericSend+0xa4>
 800690e:	2300      	movs	r3, #0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <xQueueGenericSend+0xbe>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	61fb      	str	r3, [r7, #28]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800692a:	f002 fbf3 	bl	8009114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <xQueueGenericSend+0xd4>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d129      	bne.n	8006994 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006946:	f000 fbbb 	bl	80070c0 <prvCopyDataToQueue>
 800694a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	d010      	beq.n	8006976 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	3324      	adds	r3, #36	; 0x24
 8006958:	4618      	mov	r0, r3
 800695a:	f001 fa2d 	bl	8007db8 <xTaskRemoveFromEventList>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d013      	beq.n	800698c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006964:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <xQueueGenericSend+0x1f8>)
 8006966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	e00a      	b.n	800698c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800697c:	4b39      	ldr	r3, [pc, #228]	; (8006a64 <xQueueGenericSend+0x1f8>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800698c:	f002 fbf2 	bl	8009174 <vPortExitCritical>
				return pdPASS;
 8006990:	2301      	movs	r3, #1
 8006992:	e063      	b.n	8006a5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800699a:	f002 fbeb 	bl	8009174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	e05c      	b.n	8006a5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d106      	bne.n	80069b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069a8:	f107 0314 	add.w	r3, r7, #20
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fac9 	bl	8007f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069b2:	2301      	movs	r3, #1
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069b6:	f002 fbdd 	bl	8009174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069ba:	f000 ff9d 	bl	80078f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069be:	f002 fba9 	bl	8009114 <vPortEnterCritical>
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ce:	d103      	bne.n	80069d8 <xQueueGenericSend+0x16c>
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069de:	b25b      	sxtb	r3, r3
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d103      	bne.n	80069ee <xQueueGenericSend+0x182>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ee:	f002 fbc1 	bl	8009174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069f2:	1d3a      	adds	r2, r7, #4
 80069f4:	f107 0314 	add.w	r3, r7, #20
 80069f8:	4611      	mov	r1, r2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f001 fab8 	bl	8007f70 <xTaskCheckForTimeOut>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d124      	bne.n	8006a50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a08:	f000 fc52 	bl	80072b0 <prvIsQueueFull>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d018      	beq.n	8006a44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	3310      	adds	r3, #16
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	4611      	mov	r1, r2
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 f940 	bl	8007ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a22:	f000 fbdd 	bl	80071e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a26:	f000 ff75 	bl	8007914 <xTaskResumeAll>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f47f af7c 	bne.w	800692a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a32:	4b0c      	ldr	r3, [pc, #48]	; (8006a64 <xQueueGenericSend+0x1f8>)
 8006a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	e772      	b.n	800692a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a46:	f000 fbcb 	bl	80071e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a4a:	f000 ff63 	bl	8007914 <xTaskResumeAll>
 8006a4e:	e76c      	b.n	800692a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a52:	f000 fbc5 	bl	80071e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a56:	f000 ff5d 	bl	8007914 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3738      	adds	r7, #56	; 0x38
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b090      	sub	sp, #64	; 0x40
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d103      	bne.n	8006aa4 <xQueueGenericSendFromISR+0x3c>
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <xQueueGenericSendFromISR+0x40>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e000      	b.n	8006aaa <xQueueGenericSendFromISR+0x42>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d103      	bne.n	8006ad2 <xQueueGenericSendFromISR+0x6a>
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d101      	bne.n	8006ad6 <xQueueGenericSendFromISR+0x6e>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueGenericSendFromISR+0x70>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	623b      	str	r3, [r7, #32]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006af2:	f002 fbf1 	bl	80092d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006af6:	f3ef 8211 	mrs	r2, BASEPRI
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	61fa      	str	r2, [r7, #28]
 8006b0c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <xQueueGenericSendFromISR+0xbc>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d12f      	bne.n	8006b84 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b3a:	f000 fac1 	bl	80070c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b3e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d112      	bne.n	8006b6e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d016      	beq.n	8006b7e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	3324      	adds	r3, #36	; 0x24
 8006b54:	4618      	mov	r0, r3
 8006b56:	f001 f92f 	bl	8007db8 <xTaskRemoveFromEventList>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00b      	beq.n	8006b7e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	e007      	b.n	8006b7e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b6e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b72:	3301      	adds	r3, #1
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	b25a      	sxtb	r2, r3
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006b82:	e001      	b.n	8006b88 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3740      	adds	r7, #64	; 0x40
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b08e      	sub	sp, #56	; 0x38
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	623b      	str	r3, [r7, #32]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	61fb      	str	r3, [r7, #28]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <xQueueGiveFromISR+0x58>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <xQueueGiveFromISR+0x5c>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <xQueueGiveFromISR+0x5e>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	61bb      	str	r3, [r7, #24]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c16:	f002 fb5f 	bl	80092d8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c1a:	f3ef 8211 	mrs	r2, BASEPRI
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	617a      	str	r2, [r7, #20]
 8006c30:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c32:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d22b      	bcs.n	8006c9e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d112      	bne.n	8006c88 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	3324      	adds	r3, #36	; 0x24
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f001 f8a2 	bl	8007db8 <xTaskRemoveFromEventList>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e007      	b.n	8006c98 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	b25a      	sxtb	r2, r3
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9c:	e001      	b.n	8006ca2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f383 8811 	msr	BASEPRI, r3
}
 8006cac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3738      	adds	r7, #56	; 0x38
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08c      	sub	sp, #48	; 0x30
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10a      	bne.n	8006ce8 <xQueueReceive+0x30>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	623b      	str	r3, [r7, #32]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <xQueueReceive+0x3e>
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <xQueueReceive+0x42>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <xQueueReceive+0x44>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <xQueueReceive+0x5e>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	61fb      	str	r3, [r7, #28]
}
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d16:	f001 fa6f 	bl	80081f8 <xTaskGetSchedulerState>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <xQueueReceive+0x6e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <xQueueReceive+0x72>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e000      	b.n	8006d2c <xQueueReceive+0x74>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <xQueueReceive+0x8e>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	61bb      	str	r3, [r7, #24]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d46:	f002 f9e5 	bl	8009114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01f      	beq.n	8006d96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d5a:	f000 fa1b 	bl	8007194 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	1e5a      	subs	r2, r3, #1
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00f      	beq.n	8006d8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	3310      	adds	r3, #16
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 f820 	bl	8007db8 <xTaskRemoveFromEventList>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d7e:	4b3d      	ldr	r3, [pc, #244]	; (8006e74 <xQueueReceive+0x1bc>)
 8006d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d8e:	f002 f9f1 	bl	8009174 <vPortExitCritical>
				return pdPASS;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e069      	b.n	8006e6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d103      	bne.n	8006da4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d9c:	f002 f9ea 	bl	8009174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e062      	b.n	8006e6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006daa:	f107 0310 	add.w	r3, r7, #16
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 f8c8 	bl	8007f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006db4:	2301      	movs	r3, #1
 8006db6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db8:	f002 f9dc 	bl	8009174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dbc:	f000 fd9c 	bl	80078f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dc0:	f002 f9a8 	bl	8009114 <vPortEnterCritical>
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dca:	b25b      	sxtb	r3, r3
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d103      	bne.n	8006dda <xQueueReceive+0x122>
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006de0:	b25b      	sxtb	r3, r3
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d103      	bne.n	8006df0 <xQueueReceive+0x138>
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df0:	f002 f9c0 	bl	8009174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006df4:	1d3a      	adds	r2, r7, #4
 8006df6:	f107 0310 	add.w	r3, r7, #16
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 f8b7 	bl	8007f70 <xTaskCheckForTimeOut>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d123      	bne.n	8006e50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e0a:	f000 fa3b 	bl	8007284 <prvIsQueueEmpty>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d017      	beq.n	8006e44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	3324      	adds	r3, #36	; 0x24
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 ff3f 	bl	8007ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e24:	f000 f9dc 	bl	80071e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e28:	f000 fd74 	bl	8007914 <xTaskResumeAll>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d189      	bne.n	8006d46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <xQueueReceive+0x1bc>)
 8006e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	e780      	b.n	8006d46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e46:	f000 f9cb 	bl	80071e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e4a:	f000 fd63 	bl	8007914 <xTaskResumeAll>
 8006e4e:	e77a      	b.n	8006d46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e52:	f000 f9c5 	bl	80071e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e56:	f000 fd5d 	bl	8007914 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e5c:	f000 fa12 	bl	8007284 <prvIsQueueEmpty>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f43f af6f 	beq.w	8006d46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3730      	adds	r7, #48	; 0x30
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	e000ed04 	.word	0xe000ed04

08006e78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08e      	sub	sp, #56	; 0x38
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	623b      	str	r3, [r7, #32]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	61fb      	str	r3, [r7, #28]
}
 8006ec4:	bf00      	nop
 8006ec6:	e7fe      	b.n	8006ec6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ec8:	f001 f996 	bl	80081f8 <xTaskGetSchedulerState>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <xQueueSemaphoreTake+0x60>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <xQueueSemaphoreTake+0x64>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e000      	b.n	8006ede <xQueueSemaphoreTake+0x66>
 8006edc:	2300      	movs	r3, #0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	61bb      	str	r3, [r7, #24]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ef8:	f002 f90c 	bl	8009114 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d024      	beq.n	8006f52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f18:	f001 fafc 	bl	8008514 <pvTaskIncrementMutexHeldCount>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00f      	beq.n	8006f4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	3310      	adds	r3, #16
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 ff42 	bl	8007db8 <xTaskRemoveFromEventList>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d007      	beq.n	8006f4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f3a:	4b54      	ldr	r3, [pc, #336]	; (800708c <xQueueSemaphoreTake+0x214>)
 8006f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f4a:	f002 f913 	bl	8009174 <vPortExitCritical>
				return pdPASS;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e097      	b.n	8007082 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d111      	bne.n	8006f7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	617b      	str	r3, [r7, #20]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006f74:	f002 f8fe 	bl	8009174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e082      	b.n	8007082 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f82:	f107 030c 	add.w	r3, r7, #12
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 ffdc 	bl	8007f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f90:	f002 f8f0 	bl	8009174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f94:	f000 fcb0 	bl	80078f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f98:	f002 f8bc 	bl	8009114 <vPortEnterCritical>
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fa2:	b25b      	sxtb	r3, r3
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d103      	bne.n	8006fb2 <xQueueSemaphoreTake+0x13a>
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d103      	bne.n	8006fc8 <xQueueSemaphoreTake+0x150>
 8006fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fc8:	f002 f8d4 	bl	8009174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fcc:	463a      	mov	r2, r7
 8006fce:	f107 030c 	add.w	r3, r7, #12
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 ffcb 	bl	8007f70 <xTaskCheckForTimeOut>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d132      	bne.n	8007046 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fe2:	f000 f94f 	bl	8007284 <prvIsQueueEmpty>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d026      	beq.n	800703a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006ff4:	f002 f88e 	bl	8009114 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 f919 	bl	8008234 <xTaskPriorityInherit>
 8007002:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007004:	f002 f8b6 	bl	8009174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	3324      	adds	r3, #36	; 0x24
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	4611      	mov	r1, r2
 8007010:	4618      	mov	r0, r3
 8007012:	f000 fe45 	bl	8007ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007018:	f000 f8e2 	bl	80071e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800701c:	f000 fc7a 	bl	8007914 <xTaskResumeAll>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	f47f af68 	bne.w	8006ef8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007028:	4b18      	ldr	r3, [pc, #96]	; (800708c <xQueueSemaphoreTake+0x214>)
 800702a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	e75e      	b.n	8006ef8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800703a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800703c:	f000 f8d0 	bl	80071e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007040:	f000 fc68 	bl	8007914 <xTaskResumeAll>
 8007044:	e758      	b.n	8006ef8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007046:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007048:	f000 f8ca 	bl	80071e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800704c:	f000 fc62 	bl	8007914 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007052:	f000 f917 	bl	8007284 <prvIsQueueEmpty>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	f43f af4d 	beq.w	8006ef8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00d      	beq.n	8007080 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007064:	f002 f856 	bl	8009114 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800706a:	f000 f811 	bl	8007090 <prvGetDisinheritPriorityAfterTimeout>
 800706e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007076:	4618      	mov	r0, r3
 8007078:	f001 f9b2 	bl	80083e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800707c:	f002 f87a 	bl	8009174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007080:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007082:	4618      	mov	r0, r3
 8007084:	3738      	adds	r7, #56	; 0x38
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	e000ed04 	.word	0xe000ed04

08007090 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	d006      	beq.n	80070ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e001      	b.n	80070b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070b2:	68fb      	ldr	r3, [r7, #12]
	}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10d      	bne.n	80070fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d14d      	bne.n	8007182 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 f90a 	bl	8008304 <xTaskPriorityDisinherit>
 80070f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	609a      	str	r2, [r3, #8]
 80070f8:	e043      	b.n	8007182 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d119      	bne.n	8007134 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6858      	ldr	r0, [r3, #4]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	461a      	mov	r2, r3
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	f004 f824 	bl	800b158 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	441a      	add	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	429a      	cmp	r2, r3
 8007128:	d32b      	bcc.n	8007182 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	e026      	b.n	8007182 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68d8      	ldr	r0, [r3, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713c:	461a      	mov	r2, r3
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	f004 f80a 	bl	800b158 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	425b      	negs	r3, r3
 800714e:	441a      	add	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d207      	bcs.n	8007170 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	425b      	negs	r3, r3
 800716a:	441a      	add	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d105      	bne.n	8007182 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	3b01      	subs	r3, #1
 8007180:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800718a:	697b      	ldr	r3, [r7, #20]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d018      	beq.n	80071d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	441a      	add	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d303      	bcc.n	80071c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68d9      	ldr	r1, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	461a      	mov	r2, r3
 80071d2:	6838      	ldr	r0, [r7, #0]
 80071d4:	f003 ffc0 	bl	800b158 <memcpy>
	}
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071e8:	f001 ff94 	bl	8009114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071f4:	e011      	b.n	800721a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d012      	beq.n	8007224 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3324      	adds	r3, #36	; 0x24
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fdd8 	bl	8007db8 <xTaskRemoveFromEventList>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800720e:	f000 ff11 	bl	8008034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	3b01      	subs	r3, #1
 8007216:	b2db      	uxtb	r3, r3
 8007218:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800721a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800721e:	2b00      	cmp	r3, #0
 8007220:	dce9      	bgt.n	80071f6 <prvUnlockQueue+0x16>
 8007222:	e000      	b.n	8007226 <prvUnlockQueue+0x46>
					break;
 8007224:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	22ff      	movs	r2, #255	; 0xff
 800722a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800722e:	f001 ffa1 	bl	8009174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007232:	f001 ff6f 	bl	8009114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800723c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800723e:	e011      	b.n	8007264 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d012      	beq.n	800726e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3310      	adds	r3, #16
 800724c:	4618      	mov	r0, r3
 800724e:	f000 fdb3 	bl	8007db8 <xTaskRemoveFromEventList>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007258:	f000 feec 	bl	8008034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	3b01      	subs	r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007268:	2b00      	cmp	r3, #0
 800726a:	dce9      	bgt.n	8007240 <prvUnlockQueue+0x60>
 800726c:	e000      	b.n	8007270 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800726e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	22ff      	movs	r2, #255	; 0xff
 8007274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007278:	f001 ff7c 	bl	8009174 <vPortExitCritical>
}
 800727c:	bf00      	nop
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800728c:	f001 ff42 	bl	8009114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007298:	2301      	movs	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	e001      	b.n	80072a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072a2:	f001 ff67 	bl	8009174 <vPortExitCritical>

	return xReturn;
 80072a6:	68fb      	ldr	r3, [r7, #12]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072b8:	f001 ff2c 	bl	8009114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d102      	bne.n	80072ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	e001      	b.n	80072d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072d2:	f001 ff4f 	bl	8009174 <vPortExitCritical>

	return xReturn;
 80072d6:	68fb      	ldr	r3, [r7, #12]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e014      	b.n	800731a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072f0:	4a0f      	ldr	r2, [pc, #60]	; (8007330 <vQueueAddToRegistry+0x50>)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10b      	bne.n	8007314 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072fc:	490c      	ldr	r1, [pc, #48]	; (8007330 <vQueueAddToRegistry+0x50>)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007306:	4a0a      	ldr	r2, [pc, #40]	; (8007330 <vQueueAddToRegistry+0x50>)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	4413      	add	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007312:	e006      	b.n	8007322 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3301      	adds	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b07      	cmp	r3, #7
 800731e:	d9e7      	bls.n	80072f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20004d5c 	.word	0x20004d5c

08007334 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007344:	f001 fee6 	bl	8009114 <vPortEnterCritical>
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800734e:	b25b      	sxtb	r3, r3
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d103      	bne.n	800735e <vQueueWaitForMessageRestricted+0x2a>
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007364:	b25b      	sxtb	r3, r3
 8007366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736a:	d103      	bne.n	8007374 <vQueueWaitForMessageRestricted+0x40>
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007374:	f001 fefe 	bl	8009174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	3324      	adds	r3, #36	; 0x24
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fce9 	bl	8007d60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800738e:	6978      	ldr	r0, [r7, #20]
 8007390:	f7ff ff26 	bl	80071e0 <prvUnlockQueue>
	}
 8007394:	bf00      	nop
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08e      	sub	sp, #56	; 0x38
 80073a0:	af04      	add	r7, sp, #16
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10a      	bne.n	80073c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	623b      	str	r3, [r7, #32]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	61fb      	str	r3, [r7, #28]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073e2:	235c      	movs	r3, #92	; 0x5c
 80073e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b5c      	cmp	r3, #92	; 0x5c
 80073ea:	d00a      	beq.n	8007402 <xTaskCreateStatic+0x66>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	61bb      	str	r3, [r7, #24]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007402:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	2b00      	cmp	r3, #0
 8007408:	d01e      	beq.n	8007448 <xTaskCreateStatic+0xac>
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01b      	beq.n	8007448 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007418:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	2202      	movs	r2, #2
 800741e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007422:	2300      	movs	r3, #0
 8007424:	9303      	str	r3, [sp, #12]
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	9302      	str	r3, [sp, #8]
 800742a:	f107 0314 	add.w	r3, r7, #20
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f850 	bl	80074e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007442:	f000 f8dd 	bl	8007600 <prvAddNewTaskToReadyList>
 8007446:	e001      	b.n	800744c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800744c:	697b      	ldr	r3, [r7, #20]
	}
 800744e:	4618      	mov	r0, r3
 8007450:	3728      	adds	r7, #40	; 0x28
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007456:	b580      	push	{r7, lr}
 8007458:	b08c      	sub	sp, #48	; 0x30
 800745a:	af04      	add	r7, sp, #16
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	603b      	str	r3, [r7, #0]
 8007462:	4613      	mov	r3, r2
 8007464:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4618      	mov	r0, r3
 800746c:	f001 ff74 	bl	8009358 <pvPortMalloc>
 8007470:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00e      	beq.n	8007496 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007478:	205c      	movs	r0, #92	; 0x5c
 800747a:	f001 ff6d 	bl	8009358 <pvPortMalloc>
 800747e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	631a      	str	r2, [r3, #48]	; 0x30
 800748c:	e005      	b.n	800749a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800748e:	6978      	ldr	r0, [r7, #20]
 8007490:	f002 f82e 	bl	80094f0 <vPortFree>
 8007494:	e001      	b.n	800749a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d017      	beq.n	80074d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074a8:	88fa      	ldrh	r2, [r7, #6]
 80074aa:	2300      	movs	r3, #0
 80074ac:	9303      	str	r3, [sp, #12]
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	9302      	str	r3, [sp, #8]
 80074b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68b9      	ldr	r1, [r7, #8]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f80e 	bl	80074e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074c4:	69f8      	ldr	r0, [r7, #28]
 80074c6:	f000 f89b 	bl	8007600 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074ca:	2301      	movs	r3, #1
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	e002      	b.n	80074d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074d0:	f04f 33ff 	mov.w	r3, #4294967295
 80074d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074d6:	69bb      	ldr	r3, [r7, #24]
	}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	461a      	mov	r2, r3
 80074f8:	21a5      	movs	r1, #165	; 0xa5
 80074fa:	f003 fe3b 	bl	800b174 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007508:	3b01      	subs	r3, #1
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f023 0307 	bic.w	r3, r3, #7
 8007516:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	617b      	str	r3, [r7, #20]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01f      	beq.n	800757e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800753e:	2300      	movs	r3, #0
 8007540:	61fb      	str	r3, [r7, #28]
 8007542:	e012      	b.n	800756a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	4413      	add	r3, r2
 800754a:	7819      	ldrb	r1, [r3, #0]
 800754c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	3334      	adds	r3, #52	; 0x34
 8007554:	460a      	mov	r2, r1
 8007556:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d006      	beq.n	8007572 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	3301      	adds	r3, #1
 8007568:	61fb      	str	r3, [r7, #28]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	2b0f      	cmp	r3, #15
 800756e:	d9e9      	bls.n	8007544 <prvInitialiseNewTask+0x64>
 8007570:	e000      	b.n	8007574 <prvInitialiseNewTask+0x94>
			{
				break;
 8007572:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800757c:	e003      	b.n	8007586 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	2b37      	cmp	r3, #55	; 0x37
 800758a:	d901      	bls.n	8007590 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800758c:	2337      	movs	r3, #55	; 0x37
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007594:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800759a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	2200      	movs	r2, #0
 80075a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	3304      	adds	r3, #4
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe ff8e 	bl	80064c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	3318      	adds	r3, #24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe ff89 	bl	80064c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	2200      	movs	r2, #0
 80075d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	68f9      	ldr	r1, [r7, #12]
 80075de:	69b8      	ldr	r0, [r7, #24]
 80075e0:	f001 fc6e 	bl	8008ec0 <pxPortInitialiseStack>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f6:	bf00      	nop
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007608:	f001 fd84 	bl	8009114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800760c:	4b2d      	ldr	r3, [pc, #180]	; (80076c4 <prvAddNewTaskToReadyList+0xc4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	4a2c      	ldr	r2, [pc, #176]	; (80076c4 <prvAddNewTaskToReadyList+0xc4>)
 8007614:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007616:	4b2c      	ldr	r3, [pc, #176]	; (80076c8 <prvAddNewTaskToReadyList+0xc8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d109      	bne.n	8007632 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800761e:	4a2a      	ldr	r2, [pc, #168]	; (80076c8 <prvAddNewTaskToReadyList+0xc8>)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007624:	4b27      	ldr	r3, [pc, #156]	; (80076c4 <prvAddNewTaskToReadyList+0xc4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d110      	bne.n	800764e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800762c:	f000 fd26 	bl	800807c <prvInitialiseTaskLists>
 8007630:	e00d      	b.n	800764e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007632:	4b26      	ldr	r3, [pc, #152]	; (80076cc <prvAddNewTaskToReadyList+0xcc>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800763a:	4b23      	ldr	r3, [pc, #140]	; (80076c8 <prvAddNewTaskToReadyList+0xc8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	429a      	cmp	r2, r3
 8007646:	d802      	bhi.n	800764e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007648:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <prvAddNewTaskToReadyList+0xc8>)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800764e:	4b20      	ldr	r3, [pc, #128]	; (80076d0 <prvAddNewTaskToReadyList+0xd0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3301      	adds	r3, #1
 8007654:	4a1e      	ldr	r2, [pc, #120]	; (80076d0 <prvAddNewTaskToReadyList+0xd0>)
 8007656:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007658:	4b1d      	ldr	r3, [pc, #116]	; (80076d0 <prvAddNewTaskToReadyList+0xd0>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <prvAddNewTaskToReadyList+0xd4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	429a      	cmp	r2, r3
 800766a:	d903      	bls.n	8007674 <prvAddNewTaskToReadyList+0x74>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	4a18      	ldr	r2, [pc, #96]	; (80076d4 <prvAddNewTaskToReadyList+0xd4>)
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <prvAddNewTaskToReadyList+0xd8>)
 8007682:	441a      	add	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fe ff29 	bl	80064e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007690:	f001 fd70 	bl	8009174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007694:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <prvAddNewTaskToReadyList+0xcc>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00e      	beq.n	80076ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800769c:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <prvAddNewTaskToReadyList+0xc8>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d207      	bcs.n	80076ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076aa:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <prvAddNewTaskToReadyList+0xdc>)
 80076ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	20000cc8 	.word	0x20000cc8
 80076c8:	200007f4 	.word	0x200007f4
 80076cc:	20000cd4 	.word	0x20000cd4
 80076d0:	20000ce4 	.word	0x20000ce4
 80076d4:	20000cd0 	.word	0x20000cd0
 80076d8:	200007f8 	.word	0x200007f8
 80076dc:	e000ed04 	.word	0xe000ed04

080076e0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80076e8:	f001 fd14 	bl	8009114 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <vTaskDelete+0x18>
 80076f2:	4b2c      	ldr	r3, [pc, #176]	; (80077a4 <vTaskDelete+0xc4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	e000      	b.n	80076fa <vTaskDelete+0x1a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3304      	adds	r3, #4
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe ff4b 	bl	800659c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3318      	adds	r3, #24
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe ff42 	bl	800659c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007718:	4b23      	ldr	r3, [pc, #140]	; (80077a8 <vTaskDelete+0xc8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3301      	adds	r3, #1
 800771e:	4a22      	ldr	r2, [pc, #136]	; (80077a8 <vTaskDelete+0xc8>)
 8007720:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007722:	4b20      	ldr	r3, [pc, #128]	; (80077a4 <vTaskDelete+0xc4>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	429a      	cmp	r2, r3
 800772a:	d10b      	bne.n	8007744 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	481e      	ldr	r0, [pc, #120]	; (80077ac <vTaskDelete+0xcc>)
 8007734:	f7fe fed5 	bl	80064e2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007738:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <vTaskDelete+0xd0>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3301      	adds	r3, #1
 800773e:	4a1c      	ldr	r2, [pc, #112]	; (80077b0 <vTaskDelete+0xd0>)
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	e009      	b.n	8007758 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007744:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <vTaskDelete+0xd4>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3b01      	subs	r3, #1
 800774a:	4a1a      	ldr	r2, [pc, #104]	; (80077b4 <vTaskDelete+0xd4>)
 800774c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fd02 	bl	8008158 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007754:	f000 fd30 	bl	80081b8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007758:	f001 fd0c 	bl	8009174 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800775c:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <vTaskDelete+0xd8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01b      	beq.n	800779c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <vTaskDelete+0xc4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	429a      	cmp	r2, r3
 800776c:	d116      	bne.n	800779c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800776e:	4b13      	ldr	r3, [pc, #76]	; (80077bc <vTaskDelete+0xdc>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <vTaskDelete+0xac>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60bb      	str	r3, [r7, #8]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800778c:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <vTaskDelete+0xe0>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	200007f4 	.word	0x200007f4
 80077a8:	20000ce4 	.word	0x20000ce4
 80077ac:	20000c9c 	.word	0x20000c9c
 80077b0:	20000cb0 	.word	0x20000cb0
 80077b4:	20000cc8 	.word	0x20000cc8
 80077b8:	20000cd4 	.word	0x20000cd4
 80077bc:	20000cf0 	.word	0x20000cf0
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d017      	beq.n	8007806 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <vTaskDelay+0x60>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <vTaskDelay+0x30>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	60bb      	str	r3, [r7, #8]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077f4:	f000 f880 	bl	80078f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077f8:	2100      	movs	r1, #0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 ff9e 	bl	800873c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007800:	f000 f888 	bl	8007914 <xTaskResumeAll>
 8007804:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d107      	bne.n	800781c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <vTaskDelay+0x64>)
 800780e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800781c:	bf00      	nop
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000cf0 	.word	0x20000cf0
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	; 0x28
 8007830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800783a:	463a      	mov	r2, r7
 800783c:	1d39      	adds	r1, r7, #4
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe fc36 	bl	80060b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	9202      	str	r2, [sp, #8]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	2300      	movs	r3, #0
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	2300      	movs	r3, #0
 8007858:	460a      	mov	r2, r1
 800785a:	4921      	ldr	r1, [pc, #132]	; (80078e0 <vTaskStartScheduler+0xb4>)
 800785c:	4821      	ldr	r0, [pc, #132]	; (80078e4 <vTaskStartScheduler+0xb8>)
 800785e:	f7ff fd9d 	bl	800739c <xTaskCreateStatic>
 8007862:	4603      	mov	r3, r0
 8007864:	4a20      	ldr	r2, [pc, #128]	; (80078e8 <vTaskStartScheduler+0xbc>)
 8007866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007868:	4b1f      	ldr	r3, [pc, #124]	; (80078e8 <vTaskStartScheduler+0xbc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007870:	2301      	movs	r3, #1
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	e001      	b.n	800787a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d102      	bne.n	8007886 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007880:	f000 ffb0 	bl	80087e4 <xTimerCreateTimerTask>
 8007884:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d116      	bne.n	80078ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	613b      	str	r3, [r7, #16]
}
 800789e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078a0:	4b12      	ldr	r3, [pc, #72]	; (80078ec <vTaskStartScheduler+0xc0>)
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295
 80078a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078a8:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <vTaskStartScheduler+0xc4>)
 80078aa:	2201      	movs	r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <vTaskStartScheduler+0xc8>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078b4:	f001 fb8c 	bl	8008fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078b8:	e00e      	b.n	80078d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c0:	d10a      	bne.n	80078d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60fb      	str	r3, [r7, #12]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <vTaskStartScheduler+0xaa>
}
 80078d8:	bf00      	nop
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	0800d0ac 	.word	0x0800d0ac
 80078e4:	0800804d 	.word	0x0800804d
 80078e8:	20000cec 	.word	0x20000cec
 80078ec:	20000ce8 	.word	0x20000ce8
 80078f0:	20000cd4 	.word	0x20000cd4
 80078f4:	20000ccc 	.word	0x20000ccc

080078f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <vTaskSuspendAll+0x18>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	4a03      	ldr	r2, [pc, #12]	; (8007910 <vTaskSuspendAll+0x18>)
 8007904:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007906:	bf00      	nop
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	20000cf0 	.word	0x20000cf0

08007914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800791e:	2300      	movs	r3, #0
 8007920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007922:	4b42      	ldr	r3, [pc, #264]	; (8007a2c <xTaskResumeAll+0x118>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <xTaskResumeAll+0x2c>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	603b      	str	r3, [r7, #0]
}
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007940:	f001 fbe8 	bl	8009114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007944:	4b39      	ldr	r3, [pc, #228]	; (8007a2c <xTaskResumeAll+0x118>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3b01      	subs	r3, #1
 800794a:	4a38      	ldr	r2, [pc, #224]	; (8007a2c <xTaskResumeAll+0x118>)
 800794c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800794e:	4b37      	ldr	r3, [pc, #220]	; (8007a2c <xTaskResumeAll+0x118>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d162      	bne.n	8007a1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007956:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <xTaskResumeAll+0x11c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d05e      	beq.n	8007a1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800795e:	e02f      	b.n	80079c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007960:	4b34      	ldr	r3, [pc, #208]	; (8007a34 <xTaskResumeAll+0x120>)
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3318      	adds	r3, #24
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe fe15 	bl	800659c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3304      	adds	r3, #4
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fe10 	bl	800659c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007980:	4b2d      	ldr	r3, [pc, #180]	; (8007a38 <xTaskResumeAll+0x124>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d903      	bls.n	8007990 <xTaskResumeAll+0x7c>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	4a2a      	ldr	r2, [pc, #168]	; (8007a38 <xTaskResumeAll+0x124>)
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	4613      	mov	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4a27      	ldr	r2, [pc, #156]	; (8007a3c <xTaskResumeAll+0x128>)
 800799e:	441a      	add	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3304      	adds	r3, #4
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f7fe fd9b 	bl	80064e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b0:	4b23      	ldr	r3, [pc, #140]	; (8007a40 <xTaskResumeAll+0x12c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d302      	bcc.n	80079c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079ba:	4b22      	ldr	r3, [pc, #136]	; (8007a44 <xTaskResumeAll+0x130>)
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079c0:	4b1c      	ldr	r3, [pc, #112]	; (8007a34 <xTaskResumeAll+0x120>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1cb      	bne.n	8007960 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079ce:	f000 fbf3 	bl	80081b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079d2:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <xTaskResumeAll+0x134>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d010      	beq.n	8007a00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079de:	f000 f847 	bl	8007a70 <xTaskIncrementTick>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079e8:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <xTaskResumeAll+0x130>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1f1      	bne.n	80079de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80079fa:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <xTaskResumeAll+0x134>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a00:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <xTaskResumeAll+0x130>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d009      	beq.n	8007a1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a0c:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <xTaskResumeAll+0x138>)
 8007a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a1c:	f001 fbaa 	bl	8009174 <vPortExitCritical>

	return xAlreadyYielded;
 8007a20:	68bb      	ldr	r3, [r7, #8]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20000cf0 	.word	0x20000cf0
 8007a30:	20000cc8 	.word	0x20000cc8
 8007a34:	20000c88 	.word	0x20000c88
 8007a38:	20000cd0 	.word	0x20000cd0
 8007a3c:	200007f8 	.word	0x200007f8
 8007a40:	200007f4 	.word	0x200007f4
 8007a44:	20000cdc 	.word	0x20000cdc
 8007a48:	20000cd8 	.word	0x20000cd8
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a56:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <xTaskGetTickCount+0x1c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a5c:	687b      	ldr	r3, [r7, #4]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	20000ccc 	.word	0x20000ccc

08007a70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a7a:	4b4f      	ldr	r3, [pc, #316]	; (8007bb8 <xTaskIncrementTick+0x148>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f040 808f 	bne.w	8007ba2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a84:	4b4d      	ldr	r3, [pc, #308]	; (8007bbc <xTaskIncrementTick+0x14c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a8c:	4a4b      	ldr	r2, [pc, #300]	; (8007bbc <xTaskIncrementTick+0x14c>)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d120      	bne.n	8007ada <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a98:	4b49      	ldr	r3, [pc, #292]	; (8007bc0 <xTaskIncrementTick+0x150>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <xTaskIncrementTick+0x48>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	603b      	str	r3, [r7, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <xTaskIncrementTick+0x46>
 8007ab8:	4b41      	ldr	r3, [pc, #260]	; (8007bc0 <xTaskIncrementTick+0x150>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	4b41      	ldr	r3, [pc, #260]	; (8007bc4 <xTaskIncrementTick+0x154>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a3f      	ldr	r2, [pc, #252]	; (8007bc0 <xTaskIncrementTick+0x150>)
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	4a3f      	ldr	r2, [pc, #252]	; (8007bc4 <xTaskIncrementTick+0x154>)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	4b3e      	ldr	r3, [pc, #248]	; (8007bc8 <xTaskIncrementTick+0x158>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	4a3d      	ldr	r2, [pc, #244]	; (8007bc8 <xTaskIncrementTick+0x158>)
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	f000 fb6f 	bl	80081b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ada:	4b3c      	ldr	r3, [pc, #240]	; (8007bcc <xTaskIncrementTick+0x15c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d349      	bcc.n	8007b78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae4:	4b36      	ldr	r3, [pc, #216]	; (8007bc0 <xTaskIncrementTick+0x150>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aee:	4b37      	ldr	r3, [pc, #220]	; (8007bcc <xTaskIncrementTick+0x15c>)
 8007af0:	f04f 32ff 	mov.w	r2, #4294967295
 8007af4:	601a      	str	r2, [r3, #0]
					break;
 8007af6:	e03f      	b.n	8007b78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af8:	4b31      	ldr	r3, [pc, #196]	; (8007bc0 <xTaskIncrementTick+0x150>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d203      	bcs.n	8007b18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b10:	4a2e      	ldr	r2, [pc, #184]	; (8007bcc <xTaskIncrementTick+0x15c>)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b16:	e02f      	b.n	8007b78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fd3d 	bl	800659c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe fd34 	bl	800659c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	4b25      	ldr	r3, [pc, #148]	; (8007bd0 <xTaskIncrementTick+0x160>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d903      	bls.n	8007b48 <xTaskIncrementTick+0xd8>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	4a22      	ldr	r2, [pc, #136]	; (8007bd0 <xTaskIncrementTick+0x160>)
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <xTaskIncrementTick+0x164>)
 8007b56:	441a      	add	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f7fe fcbf 	bl	80064e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b68:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <xTaskIncrementTick+0x168>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d3b8      	bcc.n	8007ae4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b72:	2301      	movs	r3, #1
 8007b74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b76:	e7b5      	b.n	8007ae4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b78:	4b17      	ldr	r3, [pc, #92]	; (8007bd8 <xTaskIncrementTick+0x168>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7e:	4915      	ldr	r1, [pc, #84]	; (8007bd4 <xTaskIncrementTick+0x164>)
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	440b      	add	r3, r1
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d901      	bls.n	8007b94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b94:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <xTaskIncrementTick+0x16c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e004      	b.n	8007bac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ba2:	4b0f      	ldr	r3, [pc, #60]	; (8007be0 <xTaskIncrementTick+0x170>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	4a0d      	ldr	r2, [pc, #52]	; (8007be0 <xTaskIncrementTick+0x170>)
 8007baa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bac:	697b      	ldr	r3, [r7, #20]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000cf0 	.word	0x20000cf0
 8007bbc:	20000ccc 	.word	0x20000ccc
 8007bc0:	20000c80 	.word	0x20000c80
 8007bc4:	20000c84 	.word	0x20000c84
 8007bc8:	20000ce0 	.word	0x20000ce0
 8007bcc:	20000ce8 	.word	0x20000ce8
 8007bd0:	20000cd0 	.word	0x20000cd0
 8007bd4:	200007f8 	.word	0x200007f8
 8007bd8:	200007f4 	.word	0x200007f4
 8007bdc:	20000cdc 	.word	0x20000cdc
 8007be0:	20000cd8 	.word	0x20000cd8

08007be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bea:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <vTaskSwitchContext+0xa8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bf2:	4b27      	ldr	r3, [pc, #156]	; (8007c90 <vTaskSwitchContext+0xac>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bf8:	e041      	b.n	8007c7e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007bfa:	4b25      	ldr	r3, [pc, #148]	; (8007c90 <vTaskSwitchContext+0xac>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c00:	4b24      	ldr	r3, [pc, #144]	; (8007c94 <vTaskSwitchContext+0xb0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	e010      	b.n	8007c2a <vTaskSwitchContext+0x46>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <vTaskSwitchContext+0x3e>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
 8007c2a:	491b      	ldr	r1, [pc, #108]	; (8007c98 <vTaskSwitchContext+0xb4>)
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	440b      	add	r3, r1
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0e4      	beq.n	8007c08 <vTaskSwitchContext+0x24>
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4a13      	ldr	r2, [pc, #76]	; (8007c98 <vTaskSwitchContext+0xb4>)
 8007c4a:	4413      	add	r3, r2
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	605a      	str	r2, [r3, #4]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	3308      	adds	r3, #8
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d104      	bne.n	8007c6e <vTaskSwitchContext+0x8a>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	4a09      	ldr	r2, [pc, #36]	; (8007c9c <vTaskSwitchContext+0xb8>)
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	4a06      	ldr	r2, [pc, #24]	; (8007c94 <vTaskSwitchContext+0xb0>)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6013      	str	r3, [r2, #0]
}
 8007c7e:	bf00      	nop
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000cf0 	.word	0x20000cf0
 8007c90:	20000cdc 	.word	0x20000cdc
 8007c94:	20000cd0 	.word	0x20000cd0
 8007c98:	200007f8 	.word	0x200007f8
 8007c9c:	200007f4 	.word	0x200007f4

08007ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <vTaskPlaceOnEventList+0x44>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3318      	adds	r3, #24
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7fe fc2b 	bl	800652a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	6838      	ldr	r0, [r7, #0]
 8007cd8:	f000 fd30 	bl	800873c <prvAddCurrentTaskToDelayedList>
}
 8007cdc:	bf00      	nop
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	200007f4 	.word	0x200007f4

08007ce8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10a      	bne.n	8007d10 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	f383 8811 	msr	BASEPRI, r3
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	617b      	str	r3, [r7, #20]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007d10:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	613b      	str	r3, [r7, #16]
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007d2e:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <vTaskPlaceOnUnorderedEventList+0x74>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007d38:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d3a:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <vTaskPlaceOnUnorderedEventList+0x74>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3318      	adds	r3, #24
 8007d40:	4619      	mov	r1, r3
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f7fe fbcd 	bl	80064e2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d48:	2101      	movs	r1, #1
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fcf6 	bl	800873c <prvAddCurrentTaskToDelayedList>
}
 8007d50:	bf00      	nop
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20000cf0 	.word	0x20000cf0
 8007d5c:	200007f4 	.word	0x200007f4

08007d60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	617b      	str	r3, [r7, #20]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3318      	adds	r3, #24
 8007d8e:	4619      	mov	r1, r3
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7fe fba6 	bl	80064e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007da0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	68b8      	ldr	r0, [r7, #8]
 8007da6:	f000 fcc9 	bl	800873c <prvAddCurrentTaskToDelayedList>
	}
 8007daa:	bf00      	nop
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	200007f4 	.word	0x200007f4

08007db8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10a      	bne.n	8007de4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	60fb      	str	r3, [r7, #12]
}
 8007de0:	bf00      	nop
 8007de2:	e7fe      	b.n	8007de2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	3318      	adds	r3, #24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fbd7 	bl	800659c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dee:	4b1e      	ldr	r3, [pc, #120]	; (8007e68 <xTaskRemoveFromEventList+0xb0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d11d      	bne.n	8007e32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fbce 	bl	800659c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e04:	4b19      	ldr	r3, [pc, #100]	; (8007e6c <xTaskRemoveFromEventList+0xb4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d903      	bls.n	8007e14 <xTaskRemoveFromEventList+0x5c>
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	4a16      	ldr	r2, [pc, #88]	; (8007e6c <xTaskRemoveFromEventList+0xb4>)
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e18:	4613      	mov	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <xTaskRemoveFromEventList+0xb8>)
 8007e22:	441a      	add	r2, r3
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	f7fe fb59 	bl	80064e2 <vListInsertEnd>
 8007e30:	e005      	b.n	8007e3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3318      	adds	r3, #24
 8007e36:	4619      	mov	r1, r3
 8007e38:	480e      	ldr	r0, [pc, #56]	; (8007e74 <xTaskRemoveFromEventList+0xbc>)
 8007e3a:	f7fe fb52 	bl	80064e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e42:	4b0d      	ldr	r3, [pc, #52]	; (8007e78 <xTaskRemoveFromEventList+0xc0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d905      	bls.n	8007e58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e50:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <xTaskRemoveFromEventList+0xc4>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	e001      	b.n	8007e5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e5c:	697b      	ldr	r3, [r7, #20]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000cf0 	.word	0x20000cf0
 8007e6c:	20000cd0 	.word	0x20000cd0
 8007e70:	200007f8 	.word	0x200007f8
 8007e74:	20000c88 	.word	0x20000c88
 8007e78:	200007f4 	.word	0x200007f4
 8007e7c:	20000cdc 	.word	0x20000cdc

08007e80 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007e8a:	4b29      	ldr	r3, [pc, #164]	; (8007f30 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	613b      	str	r3, [r7, #16]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10a      	bne.n	8007ed4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	60fb      	str	r3, [r7, #12]
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7fe fb61 	bl	800659c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	3304      	adds	r3, #4
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fe fb5c 	bl	800659c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee8:	4b12      	ldr	r3, [pc, #72]	; (8007f34 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d903      	bls.n	8007ef8 <vTaskRemoveFromUnorderedEventList+0x78>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef4:	4a0f      	ldr	r2, [pc, #60]	; (8007f34 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4a0c      	ldr	r2, [pc, #48]	; (8007f38 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007f06:	441a      	add	r2, r3
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f7fe fae7 	bl	80064e2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f18:	4b08      	ldr	r3, [pc, #32]	; (8007f3c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d902      	bls.n	8007f28 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007f22:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
	}
}
 8007f28:	bf00      	nop
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20000cf0 	.word	0x20000cf0
 8007f34:	20000cd0 	.word	0x20000cd0
 8007f38:	200007f8 	.word	0x200007f8
 8007f3c:	200007f4 	.word	0x200007f4
 8007f40:	20000cdc 	.word	0x20000cdc

08007f44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f4c:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <vTaskInternalSetTimeOutState+0x24>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <vTaskInternalSetTimeOutState+0x28>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	605a      	str	r2, [r3, #4]
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	20000ce0 	.word	0x20000ce0
 8007f6c:	20000ccc 	.word	0x20000ccc

08007f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	613b      	str	r3, [r7, #16]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	60fb      	str	r3, [r7, #12]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007fb2:	f001 f8af 	bl	8009114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007fb6:	4b1d      	ldr	r3, [pc, #116]	; (800802c <xTaskCheckForTimeOut+0xbc>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fce:	d102      	bne.n	8007fd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61fb      	str	r3, [r7, #28]
 8007fd4:	e023      	b.n	800801e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4b15      	ldr	r3, [pc, #84]	; (8008030 <xTaskCheckForTimeOut+0xc0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d007      	beq.n	8007ff2 <xTaskCheckForTimeOut+0x82>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d302      	bcc.n	8007ff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fec:	2301      	movs	r3, #1
 8007fee:	61fb      	str	r3, [r7, #28]
 8007ff0:	e015      	b.n	800801e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d20b      	bcs.n	8008014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	1ad2      	subs	r2, r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff ff9b 	bl	8007f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800800e:	2300      	movs	r3, #0
 8008010:	61fb      	str	r3, [r7, #28]
 8008012:	e004      	b.n	800801e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2200      	movs	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800801a:	2301      	movs	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800801e:	f001 f8a9 	bl	8009174 <vPortExitCritical>

	return xReturn;
 8008022:	69fb      	ldr	r3, [r7, #28]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20000ccc 	.word	0x20000ccc
 8008030:	20000ce0 	.word	0x20000ce0

08008034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008038:	4b03      	ldr	r3, [pc, #12]	; (8008048 <vTaskMissedYield+0x14>)
 800803a:	2201      	movs	r2, #1
 800803c:	601a      	str	r2, [r3, #0]
}
 800803e:	bf00      	nop
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20000cdc 	.word	0x20000cdc

0800804c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008054:	f000 f852 	bl	80080fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <prvIdleTask+0x28>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d9f9      	bls.n	8008054 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <prvIdleTask+0x2c>)
 8008062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008070:	e7f0      	b.n	8008054 <prvIdleTask+0x8>
 8008072:	bf00      	nop
 8008074:	200007f8 	.word	0x200007f8
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008082:	2300      	movs	r3, #0
 8008084:	607b      	str	r3, [r7, #4]
 8008086:	e00c      	b.n	80080a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	4613      	mov	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4a12      	ldr	r2, [pc, #72]	; (80080dc <prvInitialiseTaskLists+0x60>)
 8008094:	4413      	add	r3, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe f9f6 	bl	8006488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3301      	adds	r3, #1
 80080a0:	607b      	str	r3, [r7, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b37      	cmp	r3, #55	; 0x37
 80080a6:	d9ef      	bls.n	8008088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080a8:	480d      	ldr	r0, [pc, #52]	; (80080e0 <prvInitialiseTaskLists+0x64>)
 80080aa:	f7fe f9ed 	bl	8006488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080ae:	480d      	ldr	r0, [pc, #52]	; (80080e4 <prvInitialiseTaskLists+0x68>)
 80080b0:	f7fe f9ea 	bl	8006488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080b4:	480c      	ldr	r0, [pc, #48]	; (80080e8 <prvInitialiseTaskLists+0x6c>)
 80080b6:	f7fe f9e7 	bl	8006488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080ba:	480c      	ldr	r0, [pc, #48]	; (80080ec <prvInitialiseTaskLists+0x70>)
 80080bc:	f7fe f9e4 	bl	8006488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080c0:	480b      	ldr	r0, [pc, #44]	; (80080f0 <prvInitialiseTaskLists+0x74>)
 80080c2:	f7fe f9e1 	bl	8006488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <prvInitialiseTaskLists+0x78>)
 80080c8:	4a05      	ldr	r2, [pc, #20]	; (80080e0 <prvInitialiseTaskLists+0x64>)
 80080ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <prvInitialiseTaskLists+0x7c>)
 80080ce:	4a05      	ldr	r2, [pc, #20]	; (80080e4 <prvInitialiseTaskLists+0x68>)
 80080d0:	601a      	str	r2, [r3, #0]
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200007f8 	.word	0x200007f8
 80080e0:	20000c58 	.word	0x20000c58
 80080e4:	20000c6c 	.word	0x20000c6c
 80080e8:	20000c88 	.word	0x20000c88
 80080ec:	20000c9c 	.word	0x20000c9c
 80080f0:	20000cb4 	.word	0x20000cb4
 80080f4:	20000c80 	.word	0x20000c80
 80080f8:	20000c84 	.word	0x20000c84

080080fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008102:	e019      	b.n	8008138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008104:	f001 f806 	bl	8009114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008108:	4b10      	ldr	r3, [pc, #64]	; (800814c <prvCheckTasksWaitingTermination+0x50>)
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3304      	adds	r3, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe fa41 	bl	800659c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800811a:	4b0d      	ldr	r3, [pc, #52]	; (8008150 <prvCheckTasksWaitingTermination+0x54>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3b01      	subs	r3, #1
 8008120:	4a0b      	ldr	r2, [pc, #44]	; (8008150 <prvCheckTasksWaitingTermination+0x54>)
 8008122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008124:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <prvCheckTasksWaitingTermination+0x58>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3b01      	subs	r3, #1
 800812a:	4a0a      	ldr	r2, [pc, #40]	; (8008154 <prvCheckTasksWaitingTermination+0x58>)
 800812c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800812e:	f001 f821 	bl	8009174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f810 	bl	8008158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <prvCheckTasksWaitingTermination+0x58>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e1      	bne.n	8008104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20000c9c 	.word	0x20000c9c
 8008150:	20000cc8 	.word	0x20000cc8
 8008154:	20000cb0 	.word	0x20000cb0

08008158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008166:	2b00      	cmp	r3, #0
 8008168:	d108      	bne.n	800817c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816e:	4618      	mov	r0, r3
 8008170:	f001 f9be 	bl	80094f0 <vPortFree>
				vPortFree( pxTCB );
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 f9bb 	bl	80094f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800817a:	e018      	b.n	80081ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008182:	2b01      	cmp	r3, #1
 8008184:	d103      	bne.n	800818e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 f9b2 	bl	80094f0 <vPortFree>
	}
 800818c:	e00f      	b.n	80081ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008194:	2b02      	cmp	r3, #2
 8008196:	d00a      	beq.n	80081ae <prvDeleteTCB+0x56>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	60fb      	str	r3, [r7, #12]
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <prvDeleteTCB+0x54>
	}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081be:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <prvResetNextTaskUnblockTime+0x38>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081c8:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <prvResetNextTaskUnblockTime+0x3c>)
 80081ca:	f04f 32ff 	mov.w	r2, #4294967295
 80081ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081d0:	e008      	b.n	80081e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d2:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <prvResetNextTaskUnblockTime+0x38>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4a04      	ldr	r2, [pc, #16]	; (80081f4 <prvResetNextTaskUnblockTime+0x3c>)
 80081e2:	6013      	str	r3, [r2, #0]
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	20000c80 	.word	0x20000c80
 80081f4:	20000ce8 	.word	0x20000ce8

080081f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081fe:	4b0b      	ldr	r3, [pc, #44]	; (800822c <xTaskGetSchedulerState+0x34>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d102      	bne.n	800820c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008206:	2301      	movs	r3, #1
 8008208:	607b      	str	r3, [r7, #4]
 800820a:	e008      	b.n	800821e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800820c:	4b08      	ldr	r3, [pc, #32]	; (8008230 <xTaskGetSchedulerState+0x38>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008214:	2302      	movs	r3, #2
 8008216:	607b      	str	r3, [r7, #4]
 8008218:	e001      	b.n	800821e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800821a:	2300      	movs	r3, #0
 800821c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800821e:	687b      	ldr	r3, [r7, #4]
	}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	20000cd4 	.word	0x20000cd4
 8008230:	20000cf0 	.word	0x20000cf0

08008234 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d051      	beq.n	80082ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824e:	4b2a      	ldr	r3, [pc, #168]	; (80082f8 <xTaskPriorityInherit+0xc4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008254:	429a      	cmp	r2, r3
 8008256:	d241      	bcs.n	80082dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	db06      	blt.n	800826e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008260:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <xTaskPriorityInherit+0xc4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	6959      	ldr	r1, [r3, #20]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4a1f      	ldr	r2, [pc, #124]	; (80082fc <xTaskPriorityInherit+0xc8>)
 8008280:	4413      	add	r3, r2
 8008282:	4299      	cmp	r1, r3
 8008284:	d122      	bne.n	80082cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	3304      	adds	r3, #4
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe f986 	bl	800659c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008290:	4b19      	ldr	r3, [pc, #100]	; (80082f8 <xTaskPriorityInherit+0xc4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829e:	4b18      	ldr	r3, [pc, #96]	; (8008300 <xTaskPriorityInherit+0xcc>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d903      	bls.n	80082ae <xTaskPriorityInherit+0x7a>
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	4a15      	ldr	r2, [pc, #84]	; (8008300 <xTaskPriorityInherit+0xcc>)
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b2:	4613      	mov	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4a10      	ldr	r2, [pc, #64]	; (80082fc <xTaskPriorityInherit+0xc8>)
 80082bc:	441a      	add	r2, r3
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	3304      	adds	r3, #4
 80082c2:	4619      	mov	r1, r3
 80082c4:	4610      	mov	r0, r2
 80082c6:	f7fe f90c 	bl	80064e2 <vListInsertEnd>
 80082ca:	e004      	b.n	80082d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <xTaskPriorityInherit+0xc4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80082d6:	2301      	movs	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	e008      	b.n	80082ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <xTaskPriorityInherit+0xc4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d201      	bcs.n	80082ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80082ea:	2301      	movs	r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082ee:	68fb      	ldr	r3, [r7, #12]
	}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	200007f4 	.word	0x200007f4
 80082fc:	200007f8 	.word	0x200007f8
 8008300:	20000cd0 	.word	0x20000cd0

08008304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008310:	2300      	movs	r3, #0
 8008312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d056      	beq.n	80083c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800831a:	4b2e      	ldr	r3, [pc, #184]	; (80083d4 <xTaskPriorityDisinherit+0xd0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	429a      	cmp	r2, r3
 8008322:	d00a      	beq.n	800833a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	60fb      	str	r3, [r7, #12]
}
 8008336:	bf00      	nop
 8008338:	e7fe      	b.n	8008338 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	60bb      	str	r3, [r7, #8]
}
 8008354:	bf00      	nop
 8008356:	e7fe      	b.n	8008356 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835c:	1e5a      	subs	r2, r3, #1
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836a:	429a      	cmp	r2, r3
 800836c:	d02c      	beq.n	80083c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008372:	2b00      	cmp	r3, #0
 8008374:	d128      	bne.n	80083c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	3304      	adds	r3, #4
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe f90e 	bl	800659c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <xTaskPriorityDisinherit+0xd4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d903      	bls.n	80083a8 <xTaskPriorityDisinherit+0xa4>
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	4a0c      	ldr	r2, [pc, #48]	; (80083d8 <xTaskPriorityDisinherit+0xd4>)
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4a09      	ldr	r2, [pc, #36]	; (80083dc <xTaskPriorityDisinherit+0xd8>)
 80083b6:	441a      	add	r2, r3
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4610      	mov	r0, r2
 80083c0:	f7fe f88f 	bl	80064e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083c4:	2301      	movs	r3, #1
 80083c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083c8:	697b      	ldr	r3, [r7, #20]
	}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	200007f4 	.word	0x200007f4
 80083d8:	20000cd0 	.word	0x20000cd0
 80083dc:	200007f8 	.word	0x200007f8

080083e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80083ee:	2301      	movs	r3, #1
 80083f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d06a      	beq.n	80084ce <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10a      	bne.n	8008416 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	429a      	cmp	r2, r3
 800841e:	d902      	bls.n	8008426 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	e002      	b.n	800842c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800842a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	69fa      	ldr	r2, [r7, #28]
 8008432:	429a      	cmp	r2, r3
 8008434:	d04b      	beq.n	80084ce <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	429a      	cmp	r2, r3
 800843e:	d146      	bne.n	80084ce <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008440:	4b25      	ldr	r3, [pc, #148]	; (80084d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	429a      	cmp	r2, r3
 8008448:	d10a      	bne.n	8008460 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	60bb      	str	r3, [r7, #8]
}
 800845c:	bf00      	nop
 800845e:	e7fe      	b.n	800845e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008464:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	69fa      	ldr	r2, [r7, #28]
 800846a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	db04      	blt.n	800847e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	6959      	ldr	r1, [r3, #20]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	4613      	mov	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4a13      	ldr	r2, [pc, #76]	; (80084dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800848e:	4413      	add	r3, r2
 8008490:	4299      	cmp	r1, r3
 8008492:	d11c      	bne.n	80084ce <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	3304      	adds	r3, #4
 8008498:	4618      	mov	r0, r3
 800849a:	f7fe f87f 	bl	800659c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a2:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d903      	bls.n	80084b2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	4a0c      	ldr	r2, [pc, #48]	; (80084e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80084b0:	6013      	str	r3, [r2, #0]
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4a07      	ldr	r2, [pc, #28]	; (80084dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80084c0:	441a      	add	r2, r3
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f7fe f80a 	bl	80064e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084ce:	bf00      	nop
 80084d0:	3720      	adds	r7, #32
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	200007f4 	.word	0x200007f4
 80084dc:	200007f8 	.word	0x200007f8
 80084e0:	20000cd0 	.word	0x20000cd0

080084e4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80084ea:	4b09      	ldr	r3, [pc, #36]	; (8008510 <uxTaskResetEventItemValue+0x2c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <uxTaskResetEventItemValue+0x2c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f8:	4b05      	ldr	r3, [pc, #20]	; (8008510 <uxTaskResetEventItemValue+0x2c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008500:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008502:	687b      	ldr	r3, [r7, #4]
}
 8008504:	4618      	mov	r0, r3
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	200007f4 	.word	0x200007f4

08008514 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008518:	4b07      	ldr	r3, [pc, #28]	; (8008538 <pvTaskIncrementMutexHeldCount+0x24>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d004      	beq.n	800852a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008520:	4b05      	ldr	r3, [pc, #20]	; (8008538 <pvTaskIncrementMutexHeldCount+0x24>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008526:	3201      	adds	r2, #1
 8008528:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800852a:	4b03      	ldr	r3, [pc, #12]	; (8008538 <pvTaskIncrementMutexHeldCount+0x24>)
 800852c:	681b      	ldr	r3, [r3, #0]
	}
 800852e:	4618      	mov	r0, r3
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	200007f4 	.word	0x200007f4

0800853c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008546:	f000 fde5 	bl	8009114 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800854a:	4b1e      	ldr	r3, [pc, #120]	; (80085c4 <ulTaskNotifyTake+0x88>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008550:	2b00      	cmp	r3, #0
 8008552:	d113      	bne.n	800857c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008554:	4b1b      	ldr	r3, [pc, #108]	; (80085c4 <ulTaskNotifyTake+0x88>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008564:	2101      	movs	r1, #1
 8008566:	6838      	ldr	r0, [r7, #0]
 8008568:	f000 f8e8 	bl	800873c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800856c:	4b16      	ldr	r3, [pc, #88]	; (80085c8 <ulTaskNotifyTake+0x8c>)
 800856e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800857c:	f000 fdfa 	bl	8009174 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008580:	f000 fdc8 	bl	8009114 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008584:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <ulTaskNotifyTake+0x88>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00c      	beq.n	80085ac <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d004      	beq.n	80085a2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <ulTaskNotifyTake+0x88>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2200      	movs	r2, #0
 800859e:	655a      	str	r2, [r3, #84]	; 0x54
 80085a0:	e004      	b.n	80085ac <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80085a2:	4b08      	ldr	r3, [pc, #32]	; (80085c4 <ulTaskNotifyTake+0x88>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	3a01      	subs	r2, #1
 80085aa:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085ac:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <ulTaskNotifyTake+0x88>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80085b6:	f000 fddd 	bl	8009174 <vPortExitCritical>

		return ulReturn;
 80085ba:	68fb      	ldr	r3, [r7, #12]
	}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	200007f4 	.word	0x200007f4
 80085c8:	e000ed04 	.word	0xe000ed04

080085cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08a      	sub	sp, #40	; 0x28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	4613      	mov	r3, r2
 80085da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80085dc:	2301      	movs	r3, #1
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <xTaskGenericNotify+0x30>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	61bb      	str	r3, [r7, #24]
}
 80085f8:	bf00      	nop
 80085fa:	e7fe      	b.n	80085fa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008600:	f000 fd88 	bl	8009114 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008618:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	2202      	movs	r2, #2
 800861e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	2b04      	cmp	r3, #4
 8008626:	d828      	bhi.n	800867a <xTaskGenericNotify+0xae>
 8008628:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <xTaskGenericNotify+0x64>)
 800862a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862e:	bf00      	nop
 8008630:	0800869b 	.word	0x0800869b
 8008634:	08008645 	.word	0x08008645
 8008638:	08008653 	.word	0x08008653
 800863c:	0800865f 	.word	0x0800865f
 8008640:	08008667 	.word	0x08008667
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	431a      	orrs	r2, r3
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008650:	e026      	b.n	80086a0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	1c5a      	adds	r2, r3, #1
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800865c:	e020      	b.n	80086a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008664:	e01c      	b.n	80086a0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008666:	7ffb      	ldrb	r3, [r7, #31]
 8008668:	2b02      	cmp	r3, #2
 800866a:	d003      	beq.n	8008674 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008672:	e015      	b.n	80086a0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8008674:	2300      	movs	r3, #0
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008678:	e012      	b.n	80086a0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008682:	d00c      	beq.n	800869e <xTaskGenericNotify+0xd2>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	617b      	str	r3, [r7, #20]
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <xTaskGenericNotify+0xcc>
					break;
 800869a:	bf00      	nop
 800869c:	e000      	b.n	80086a0 <xTaskGenericNotify+0xd4>

					break;
 800869e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80086a0:	7ffb      	ldrb	r3, [r7, #31]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d13a      	bne.n	800871c <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	3304      	adds	r3, #4
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fd ff76 	bl	800659c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b4:	4b1d      	ldr	r3, [pc, #116]	; (800872c <xTaskGenericNotify+0x160>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d903      	bls.n	80086c4 <xTaskGenericNotify+0xf8>
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	4a1a      	ldr	r2, [pc, #104]	; (800872c <xTaskGenericNotify+0x160>)
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4a17      	ldr	r2, [pc, #92]	; (8008730 <xTaskGenericNotify+0x164>)
 80086d2:	441a      	add	r2, r3
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fd ff01 	bl	80064e2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00a      	beq.n	80086fe <xTaskGenericNotify+0x132>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	613b      	str	r3, [r7, #16]
}
 80086fa:	bf00      	nop
 80086fc:	e7fe      	b.n	80086fc <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008702:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <xTaskGenericNotify+0x168>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	429a      	cmp	r2, r3
 800870a:	d907      	bls.n	800871c <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800870c:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <xTaskGenericNotify+0x16c>)
 800870e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800871c:	f000 fd2a 	bl	8009174 <vPortExitCritical>

		return xReturn;
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008722:	4618      	mov	r0, r3
 8008724:	3728      	adds	r7, #40	; 0x28
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000cd0 	.word	0x20000cd0
 8008730:	200007f8 	.word	0x200007f8
 8008734:	200007f4 	.word	0x200007f4
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008746:	4b21      	ldr	r3, [pc, #132]	; (80087cc <prvAddCurrentTaskToDelayedList+0x90>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800874c:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3304      	adds	r3, #4
 8008752:	4618      	mov	r0, r3
 8008754:	f7fd ff22 	bl	800659c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875e:	d10a      	bne.n	8008776 <prvAddCurrentTaskToDelayedList+0x3a>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008766:	4b1a      	ldr	r3, [pc, #104]	; (80087d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3304      	adds	r3, #4
 800876c:	4619      	mov	r1, r3
 800876e:	4819      	ldr	r0, [pc, #100]	; (80087d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008770:	f7fd feb7 	bl	80064e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008774:	e026      	b.n	80087c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4413      	add	r3, r2
 800877c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800877e:	4b14      	ldr	r3, [pc, #80]	; (80087d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	429a      	cmp	r2, r3
 800878c:	d209      	bcs.n	80087a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800878e:	4b12      	ldr	r3, [pc, #72]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3304      	adds	r3, #4
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7fd fec5 	bl	800652a <vListInsert>
}
 80087a0:	e010      	b.n	80087c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087a2:	4b0e      	ldr	r3, [pc, #56]	; (80087dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f7fd febb 	bl	800652a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68ba      	ldr	r2, [r7, #8]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d202      	bcs.n	80087c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087be:	4a08      	ldr	r2, [pc, #32]	; (80087e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6013      	str	r3, [r2, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000ccc 	.word	0x20000ccc
 80087d0:	200007f4 	.word	0x200007f4
 80087d4:	20000cb4 	.word	0x20000cb4
 80087d8:	20000c84 	.word	0x20000c84
 80087dc:	20000c80 	.word	0x20000c80
 80087e0:	20000ce8 	.word	0x20000ce8

080087e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08a      	sub	sp, #40	; 0x28
 80087e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087ee:	f000 fb07 	bl	8008e00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087f2:	4b1c      	ldr	r3, [pc, #112]	; (8008864 <xTimerCreateTimerTask+0x80>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d021      	beq.n	800883e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008802:	1d3a      	adds	r2, r7, #4
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	f107 030c 	add.w	r3, r7, #12
 800880c:	4618      	mov	r0, r3
 800880e:	f7fd fc6b 	bl	80060e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	9202      	str	r2, [sp, #8]
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	2302      	movs	r3, #2
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	2300      	movs	r3, #0
 8008822:	460a      	mov	r2, r1
 8008824:	4910      	ldr	r1, [pc, #64]	; (8008868 <xTimerCreateTimerTask+0x84>)
 8008826:	4811      	ldr	r0, [pc, #68]	; (800886c <xTimerCreateTimerTask+0x88>)
 8008828:	f7fe fdb8 	bl	800739c <xTaskCreateStatic>
 800882c:	4603      	mov	r3, r0
 800882e:	4a10      	ldr	r2, [pc, #64]	; (8008870 <xTimerCreateTimerTask+0x8c>)
 8008830:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008832:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <xTimerCreateTimerTask+0x8c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800883a:	2301      	movs	r3, #1
 800883c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	613b      	str	r3, [r7, #16]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800885a:	697b      	ldr	r3, [r7, #20]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20000d24 	.word	0x20000d24
 8008868:	0800d0b4 	.word	0x0800d0b4
 800886c:	080089a9 	.word	0x080089a9
 8008870:	20000d28 	.word	0x20000d28

08008874 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08a      	sub	sp, #40	; 0x28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008882:	2300      	movs	r3, #0
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	623b      	str	r3, [r7, #32]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088a2:	4b1a      	ldr	r3, [pc, #104]	; (800890c <xTimerGenericCommand+0x98>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d02a      	beq.n	8008900 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b05      	cmp	r3, #5
 80088ba:	dc18      	bgt.n	80088ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088bc:	f7ff fc9c 	bl	80081f8 <xTaskGetSchedulerState>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d109      	bne.n	80088da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088c6:	4b11      	ldr	r3, [pc, #68]	; (800890c <xTimerGenericCommand+0x98>)
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f107 0110 	add.w	r1, r7, #16
 80088ce:	2300      	movs	r3, #0
 80088d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d2:	f7fd ffcb 	bl	800686c <xQueueGenericSend>
 80088d6:	6278      	str	r0, [r7, #36]	; 0x24
 80088d8:	e012      	b.n	8008900 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088da:	4b0c      	ldr	r3, [pc, #48]	; (800890c <xTimerGenericCommand+0x98>)
 80088dc:	6818      	ldr	r0, [r3, #0]
 80088de:	f107 0110 	add.w	r1, r7, #16
 80088e2:	2300      	movs	r3, #0
 80088e4:	2200      	movs	r2, #0
 80088e6:	f7fd ffc1 	bl	800686c <xQueueGenericSend>
 80088ea:	6278      	str	r0, [r7, #36]	; 0x24
 80088ec:	e008      	b.n	8008900 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088ee:	4b07      	ldr	r3, [pc, #28]	; (800890c <xTimerGenericCommand+0x98>)
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	f107 0110 	add.w	r1, r7, #16
 80088f6:	2300      	movs	r3, #0
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	f7fe f8b5 	bl	8006a68 <xQueueGenericSendFromISR>
 80088fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008902:	4618      	mov	r0, r3
 8008904:	3728      	adds	r7, #40	; 0x28
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	20000d24 	.word	0x20000d24

08008910 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af02      	add	r7, sp, #8
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800891a:	4b22      	ldr	r3, [pc, #136]	; (80089a4 <prvProcessExpiredTimer+0x94>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	3304      	adds	r3, #4
 8008928:	4618      	mov	r0, r3
 800892a:	f7fd fe37 	bl	800659c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d022      	beq.n	8008982 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	18d1      	adds	r1, r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	6978      	ldr	r0, [r7, #20]
 800894a:	f000 f8d1 	bl	8008af0 <prvInsertTimerInActiveList>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01f      	beq.n	8008994 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008954:	2300      	movs	r3, #0
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	2300      	movs	r3, #0
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	2100      	movs	r1, #0
 800895e:	6978      	ldr	r0, [r7, #20]
 8008960:	f7ff ff88 	bl	8008874 <xTimerGenericCommand>
 8008964:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d113      	bne.n	8008994 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	60fb      	str	r3, [r7, #12]
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008988:	f023 0301 	bic.w	r3, r3, #1
 800898c:	b2da      	uxtb	r2, r3
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	6978      	ldr	r0, [r7, #20]
 800899a:	4798      	blx	r3
}
 800899c:	bf00      	nop
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	20000d1c 	.word	0x20000d1c

080089a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089b0:	f107 0308 	add.w	r3, r7, #8
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 f857 	bl	8008a68 <prvGetNextExpireTime>
 80089ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4619      	mov	r1, r3
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 f803 	bl	80089cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80089c6:	f000 f8d5 	bl	8008b74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089ca:	e7f1      	b.n	80089b0 <prvTimerTask+0x8>

080089cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089d6:	f7fe ff8f 	bl	80078f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089da:	f107 0308 	add.w	r3, r7, #8
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 f866 	bl	8008ab0 <prvSampleTimeNow>
 80089e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d130      	bne.n	8008a4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10a      	bne.n	8008a08 <prvProcessTimerOrBlockTask+0x3c>
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d806      	bhi.n	8008a08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089fa:	f7fe ff8b 	bl	8007914 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089fe:	68f9      	ldr	r1, [r7, #12]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff ff85 	bl	8008910 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a06:	e024      	b.n	8008a52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a0e:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <prvProcessTimerOrBlockTask+0x90>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <prvProcessTimerOrBlockTask+0x50>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e000      	b.n	8008a1e <prvProcessTimerOrBlockTask+0x52>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a20:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <prvProcessTimerOrBlockTask+0x94>)
 8008a22:	6818      	ldr	r0, [r3, #0]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	f7fe fc81 	bl	8007334 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a32:	f7fe ff6f 	bl	8007914 <xTaskResumeAll>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10a      	bne.n	8008a52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a3c:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <prvProcessTimerOrBlockTask+0x98>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	f3bf 8f6f 	isb	sy
}
 8008a4c:	e001      	b.n	8008a52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a4e:	f7fe ff61 	bl	8007914 <xTaskResumeAll>
}
 8008a52:	bf00      	nop
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000d20 	.word	0x20000d20
 8008a60:	20000d24 	.word	0x20000d24
 8008a64:	e000ed04 	.word	0xe000ed04

08008a68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a70:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <prvGetNextExpireTime+0x44>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <prvGetNextExpireTime+0x16>
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	e000      	b.n	8008a80 <prvGetNextExpireTime+0x18>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d105      	bne.n	8008a98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a8c:	4b07      	ldr	r3, [pc, #28]	; (8008aac <prvGetNextExpireTime+0x44>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	e001      	b.n	8008a9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	20000d1c 	.word	0x20000d1c

08008ab0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ab8:	f7fe ffca 	bl	8007a50 <xTaskGetTickCount>
 8008abc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008abe:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <prvSampleTimeNow+0x3c>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d205      	bcs.n	8008ad4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ac8:	f000 f936 	bl	8008d38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	e002      	b.n	8008ada <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ada:	4a04      	ldr	r2, [pc, #16]	; (8008aec <prvSampleTimeNow+0x3c>)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	20000d2c 	.word	0x20000d2c

08008af0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d812      	bhi.n	8008b3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d302      	bcc.n	8008b2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	e01b      	b.n	8008b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b2a:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <prvInsertTimerInActiveList+0x7c>)
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3304      	adds	r3, #4
 8008b32:	4619      	mov	r1, r3
 8008b34:	4610      	mov	r0, r2
 8008b36:	f7fd fcf8 	bl	800652a <vListInsert>
 8008b3a:	e012      	b.n	8008b62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d206      	bcs.n	8008b52 <prvInsertTimerInActiveList+0x62>
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d302      	bcc.n	8008b52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	e007      	b.n	8008b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b52:	4b07      	ldr	r3, [pc, #28]	; (8008b70 <prvInsertTimerInActiveList+0x80>)
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	f7fd fce4 	bl	800652a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b62:	697b      	ldr	r3, [r7, #20]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20000d20 	.word	0x20000d20
 8008b70:	20000d1c 	.word	0x20000d1c

08008b74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08e      	sub	sp, #56	; 0x38
 8008b78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b7a:	e0ca      	b.n	8008d12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	da18      	bge.n	8008bb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b82:	1d3b      	adds	r3, r7, #4
 8008b84:	3304      	adds	r3, #4
 8008b86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10a      	bne.n	8008ba4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	61fb      	str	r3, [r7, #28]
}
 8008ba0:	bf00      	nop
 8008ba2:	e7fe      	b.n	8008ba2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008baa:	6850      	ldr	r0, [r2, #4]
 8008bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bae:	6892      	ldr	r2, [r2, #8]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f2c0 80aa 	blt.w	8008d10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d004      	beq.n	8008bd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	3304      	adds	r3, #4
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fd fce5 	bl	800659c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff ff6b 	bl	8008ab0 <prvSampleTimeNow>
 8008bda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b09      	cmp	r3, #9
 8008be0:	f200 8097 	bhi.w	8008d12 <prvProcessReceivedCommands+0x19e>
 8008be4:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <prvProcessReceivedCommands+0x78>)
 8008be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bea:	bf00      	nop
 8008bec:	08008c15 	.word	0x08008c15
 8008bf0:	08008c15 	.word	0x08008c15
 8008bf4:	08008c15 	.word	0x08008c15
 8008bf8:	08008c89 	.word	0x08008c89
 8008bfc:	08008c9d 	.word	0x08008c9d
 8008c00:	08008ce7 	.word	0x08008ce7
 8008c04:	08008c15 	.word	0x08008c15
 8008c08:	08008c15 	.word	0x08008c15
 8008c0c:	08008c89 	.word	0x08008c89
 8008c10:	08008c9d 	.word	0x08008c9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	18d1      	adds	r1, r2, r3
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c34:	f7ff ff5c 	bl	8008af0 <prvInsertTimerInActiveList>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d069      	beq.n	8008d12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d05e      	beq.n	8008d12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	441a      	add	r2, r3
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	2300      	movs	r3, #0
 8008c62:	2100      	movs	r1, #0
 8008c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c66:	f7ff fe05 	bl	8008874 <xTimerGenericCommand>
 8008c6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d14f      	bne.n	8008d12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	61bb      	str	r3, [r7, #24]
}
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c8e:	f023 0301 	bic.w	r3, r3, #1
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c9a:	e03a      	b.n	8008d12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10a      	bne.n	8008cd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	617b      	str	r3, [r7, #20]
}
 8008cce:	bf00      	nop
 8008cd0:	e7fe      	b.n	8008cd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	699a      	ldr	r2, [r3, #24]
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	18d1      	adds	r1, r2, r3
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ce0:	f7ff ff06 	bl	8008af0 <prvInsertTimerInActiveList>
					break;
 8008ce4:	e015      	b.n	8008d12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cec:	f003 0302 	and.w	r3, r3, #2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d103      	bne.n	8008cfc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cf6:	f000 fbfb 	bl	80094f0 <vPortFree>
 8008cfa:	e00a      	b.n	8008d12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d02:	f023 0301 	bic.w	r3, r3, #1
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d0e:	e000      	b.n	8008d12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d12:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <prvProcessReceivedCommands+0x1c0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	1d39      	adds	r1, r7, #4
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fd ffcc 	bl	8006cb8 <xQueueReceive>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f47f af2a 	bne.w	8008b7c <prvProcessReceivedCommands+0x8>
	}
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	3730      	adds	r7, #48	; 0x30
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20000d24 	.word	0x20000d24

08008d38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d3e:	e048      	b.n	8008dd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d40:	4b2d      	ldr	r3, [pc, #180]	; (8008df8 <prvSwitchTimerLists+0xc0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4a:	4b2b      	ldr	r3, [pc, #172]	; (8008df8 <prvSwitchTimerLists+0xc0>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fd fc1f 	bl	800659c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d02e      	beq.n	8008dd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d90e      	bls.n	8008da4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d92:	4b19      	ldr	r3, [pc, #100]	; (8008df8 <prvSwitchTimerLists+0xc0>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3304      	adds	r3, #4
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	f7fd fbc4 	bl	800652a <vListInsert>
 8008da2:	e016      	b.n	8008dd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008da4:	2300      	movs	r3, #0
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	2300      	movs	r3, #0
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	2100      	movs	r1, #0
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f7ff fd60 	bl	8008874 <xTimerGenericCommand>
 8008db4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10a      	bne.n	8008dd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	603b      	str	r3, [r7, #0]
}
 8008dce:	bf00      	nop
 8008dd0:	e7fe      	b.n	8008dd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <prvSwitchTimerLists+0xc0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1b1      	bne.n	8008d40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ddc:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <prvSwitchTimerLists+0xc0>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008de2:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <prvSwitchTimerLists+0xc4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a04      	ldr	r2, [pc, #16]	; (8008df8 <prvSwitchTimerLists+0xc0>)
 8008de8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008dea:	4a04      	ldr	r2, [pc, #16]	; (8008dfc <prvSwitchTimerLists+0xc4>)
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	6013      	str	r3, [r2, #0]
}
 8008df0:	bf00      	nop
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20000d1c 	.word	0x20000d1c
 8008dfc:	20000d20 	.word	0x20000d20

08008e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e06:	f000 f985 	bl	8009114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e0a:	4b15      	ldr	r3, [pc, #84]	; (8008e60 <prvCheckForValidListAndQueue+0x60>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d120      	bne.n	8008e54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e12:	4814      	ldr	r0, [pc, #80]	; (8008e64 <prvCheckForValidListAndQueue+0x64>)
 8008e14:	f7fd fb38 	bl	8006488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e18:	4813      	ldr	r0, [pc, #76]	; (8008e68 <prvCheckForValidListAndQueue+0x68>)
 8008e1a:	f7fd fb35 	bl	8006488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e1e:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <prvCheckForValidListAndQueue+0x6c>)
 8008e20:	4a10      	ldr	r2, [pc, #64]	; (8008e64 <prvCheckForValidListAndQueue+0x64>)
 8008e22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e24:	4b12      	ldr	r3, [pc, #72]	; (8008e70 <prvCheckForValidListAndQueue+0x70>)
 8008e26:	4a10      	ldr	r2, [pc, #64]	; (8008e68 <prvCheckForValidListAndQueue+0x68>)
 8008e28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <prvCheckForValidListAndQueue+0x74>)
 8008e30:	4a11      	ldr	r2, [pc, #68]	; (8008e78 <prvCheckForValidListAndQueue+0x78>)
 8008e32:	2110      	movs	r1, #16
 8008e34:	200a      	movs	r0, #10
 8008e36:	f7fd fc43 	bl	80066c0 <xQueueGenericCreateStatic>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4a08      	ldr	r2, [pc, #32]	; (8008e60 <prvCheckForValidListAndQueue+0x60>)
 8008e3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <prvCheckForValidListAndQueue+0x60>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e48:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <prvCheckForValidListAndQueue+0x60>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	490b      	ldr	r1, [pc, #44]	; (8008e7c <prvCheckForValidListAndQueue+0x7c>)
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fa46 	bl	80072e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e54:	f000 f98e 	bl	8009174 <vPortExitCritical>
}
 8008e58:	bf00      	nop
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000d24 	.word	0x20000d24
 8008e64:	20000cf4 	.word	0x20000cf4
 8008e68:	20000d08 	.word	0x20000d08
 8008e6c:	20000d1c 	.word	0x20000d1c
 8008e70:	20000d20 	.word	0x20000d20
 8008e74:	20000dd0 	.word	0x20000dd0
 8008e78:	20000d30 	.word	0x20000d30
 8008e7c:	0800d0bc 	.word	0x0800d0bc

08008e80 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08a      	sub	sp, #40	; 0x28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008e8e:	f06f 0301 	mvn.w	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ea0:	4b06      	ldr	r3, [pc, #24]	; (8008ebc <xTimerPendFunctionCallFromISR+0x3c>)
 8008ea2:	6818      	ldr	r0, [r3, #0]
 8008ea4:	f107 0114 	add.w	r1, r7, #20
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	f7fd fddc 	bl	8006a68 <xQueueGenericSendFromISR>
 8008eb0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3728      	adds	r7, #40	; 0x28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000d24 	.word	0x20000d24

08008ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3b04      	subs	r3, #4
 8008ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3b04      	subs	r3, #4
 8008ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f023 0201 	bic.w	r2, r3, #1
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3b04      	subs	r3, #4
 8008eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ef0:	4a0c      	ldr	r2, [pc, #48]	; (8008f24 <pxPortInitialiseStack+0x64>)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3b14      	subs	r3, #20
 8008efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3b04      	subs	r3, #4
 8008f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f06f 0202 	mvn.w	r2, #2
 8008f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3b20      	subs	r3, #32
 8008f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f16:	68fb      	ldr	r3, [r7, #12]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	08008f29 	.word	0x08008f29

08008f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f32:	4b12      	ldr	r3, [pc, #72]	; (8008f7c <prvTaskExitError+0x54>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3a:	d00a      	beq.n	8008f52 <prvTaskExitError+0x2a>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	60fb      	str	r3, [r7, #12]
}
 8008f4e:	bf00      	nop
 8008f50:	e7fe      	b.n	8008f50 <prvTaskExitError+0x28>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	60bb      	str	r3, [r7, #8]
}
 8008f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f66:	bf00      	nop
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0fc      	beq.n	8008f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f6e:	bf00      	nop
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	2000000c 	.word	0x2000000c

08008f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f80:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <pxCurrentTCBConst2>)
 8008f82:	6819      	ldr	r1, [r3, #0]
 8008f84:	6808      	ldr	r0, [r1, #0]
 8008f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8a:	f380 8809 	msr	PSP, r0
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f04f 0000 	mov.w	r0, #0
 8008f96:	f380 8811 	msr	BASEPRI, r0
 8008f9a:	4770      	bx	lr
 8008f9c:	f3af 8000 	nop.w

08008fa0 <pxCurrentTCBConst2>:
 8008fa0:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop

08008fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fa8:	4808      	ldr	r0, [pc, #32]	; (8008fcc <prvPortStartFirstTask+0x24>)
 8008faa:	6800      	ldr	r0, [r0, #0]
 8008fac:	6800      	ldr	r0, [r0, #0]
 8008fae:	f380 8808 	msr	MSP, r0
 8008fb2:	f04f 0000 	mov.w	r0, #0
 8008fb6:	f380 8814 	msr	CONTROL, r0
 8008fba:	b662      	cpsie	i
 8008fbc:	b661      	cpsie	f
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	df00      	svc	0
 8008fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008fca:	bf00      	nop
 8008fcc:	e000ed08 	.word	0xe000ed08

08008fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008fd6:	4b46      	ldr	r3, [pc, #280]	; (80090f0 <xPortStartScheduler+0x120>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a46      	ldr	r2, [pc, #280]	; (80090f4 <xPortStartScheduler+0x124>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d10a      	bne.n	8008ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	613b      	str	r3, [r7, #16]
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ff6:	4b3e      	ldr	r3, [pc, #248]	; (80090f0 <xPortStartScheduler+0x120>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a3f      	ldr	r2, [pc, #252]	; (80090f8 <xPortStartScheduler+0x128>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d10a      	bne.n	8009016 <xPortStartScheduler+0x46>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60fb      	str	r3, [r7, #12]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009016:	4b39      	ldr	r3, [pc, #228]	; (80090fc <xPortStartScheduler+0x12c>)
 8009018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	b2db      	uxtb	r3, r3
 8009020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	22ff      	movs	r2, #255	; 0xff
 8009026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009038:	b2da      	uxtb	r2, r3
 800903a:	4b31      	ldr	r3, [pc, #196]	; (8009100 <xPortStartScheduler+0x130>)
 800903c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800903e:	4b31      	ldr	r3, [pc, #196]	; (8009104 <xPortStartScheduler+0x134>)
 8009040:	2207      	movs	r2, #7
 8009042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009044:	e009      	b.n	800905a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009046:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <xPortStartScheduler+0x134>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3b01      	subs	r3, #1
 800904c:	4a2d      	ldr	r2, [pc, #180]	; (8009104 <xPortStartScheduler+0x134>)
 800904e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	b2db      	uxtb	r3, r3
 8009058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009062:	2b80      	cmp	r3, #128	; 0x80
 8009064:	d0ef      	beq.n	8009046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009066:	4b27      	ldr	r3, [pc, #156]	; (8009104 <xPortStartScheduler+0x134>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f1c3 0307 	rsb	r3, r3, #7
 800906e:	2b04      	cmp	r3, #4
 8009070:	d00a      	beq.n	8009088 <xPortStartScheduler+0xb8>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	60bb      	str	r3, [r7, #8]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009088:	4b1e      	ldr	r3, [pc, #120]	; (8009104 <xPortStartScheduler+0x134>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	4a1d      	ldr	r2, [pc, #116]	; (8009104 <xPortStartScheduler+0x134>)
 8009090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009092:	4b1c      	ldr	r3, [pc, #112]	; (8009104 <xPortStartScheduler+0x134>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800909a:	4a1a      	ldr	r2, [pc, #104]	; (8009104 <xPortStartScheduler+0x134>)
 800909c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090a6:	4b18      	ldr	r3, [pc, #96]	; (8009108 <xPortStartScheduler+0x138>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a17      	ldr	r2, [pc, #92]	; (8009108 <xPortStartScheduler+0x138>)
 80090ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80090b2:	4b15      	ldr	r3, [pc, #84]	; (8009108 <xPortStartScheduler+0x138>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a14      	ldr	r2, [pc, #80]	; (8009108 <xPortStartScheduler+0x138>)
 80090b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090be:	f000 f8dd 	bl	800927c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090c2:	4b12      	ldr	r3, [pc, #72]	; (800910c <xPortStartScheduler+0x13c>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090c8:	f000 f8fc 	bl	80092c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090cc:	4b10      	ldr	r3, [pc, #64]	; (8009110 <xPortStartScheduler+0x140>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a0f      	ldr	r2, [pc, #60]	; (8009110 <xPortStartScheduler+0x140>)
 80090d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090d8:	f7ff ff66 	bl	8008fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090dc:	f7fe fd82 	bl	8007be4 <vTaskSwitchContext>
	prvTaskExitError();
 80090e0:	f7ff ff22 	bl	8008f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	e000ed00 	.word	0xe000ed00
 80090f4:	410fc271 	.word	0x410fc271
 80090f8:	410fc270 	.word	0x410fc270
 80090fc:	e000e400 	.word	0xe000e400
 8009100:	20000e20 	.word	0x20000e20
 8009104:	20000e24 	.word	0x20000e24
 8009108:	e000ed20 	.word	0xe000ed20
 800910c:	2000000c 	.word	0x2000000c
 8009110:	e000ef34 	.word	0xe000ef34

08009114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	607b      	str	r3, [r7, #4]
}
 800912c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <vPortEnterCritical+0x58>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	4a0d      	ldr	r2, [pc, #52]	; (800916c <vPortEnterCritical+0x58>)
 8009136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009138:	4b0c      	ldr	r3, [pc, #48]	; (800916c <vPortEnterCritical+0x58>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d10f      	bne.n	8009160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009140:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <vPortEnterCritical+0x5c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <vPortEnterCritical+0x4c>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	603b      	str	r3, [r7, #0]
}
 800915c:	bf00      	nop
 800915e:	e7fe      	b.n	800915e <vPortEnterCritical+0x4a>
	}
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	2000000c 	.word	0x2000000c
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800917a:	4b12      	ldr	r3, [pc, #72]	; (80091c4 <vPortExitCritical+0x50>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10a      	bne.n	8009198 <vPortExitCritical+0x24>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	607b      	str	r3, [r7, #4]
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009198:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <vPortExitCritical+0x50>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3b01      	subs	r3, #1
 800919e:	4a09      	ldr	r2, [pc, #36]	; (80091c4 <vPortExitCritical+0x50>)
 80091a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091a2:	4b08      	ldr	r3, [pc, #32]	; (80091c4 <vPortExitCritical+0x50>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d105      	bne.n	80091b6 <vPortExitCritical+0x42>
 80091aa:	2300      	movs	r3, #0
 80091ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	f383 8811 	msr	BASEPRI, r3
}
 80091b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	2000000c 	.word	0x2000000c
	...

080091d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091d0:	f3ef 8009 	mrs	r0, PSP
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	4b15      	ldr	r3, [pc, #84]	; (8009230 <pxCurrentTCBConst>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	f01e 0f10 	tst.w	lr, #16
 80091e0:	bf08      	it	eq
 80091e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ea:	6010      	str	r0, [r2, #0]
 80091ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091f4:	f380 8811 	msr	BASEPRI, r0
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f7fe fcf0 	bl	8007be4 <vTaskSwitchContext>
 8009204:	f04f 0000 	mov.w	r0, #0
 8009208:	f380 8811 	msr	BASEPRI, r0
 800920c:	bc09      	pop	{r0, r3}
 800920e:	6819      	ldr	r1, [r3, #0]
 8009210:	6808      	ldr	r0, [r1, #0]
 8009212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009216:	f01e 0f10 	tst.w	lr, #16
 800921a:	bf08      	it	eq
 800921c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009220:	f380 8809 	msr	PSP, r0
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	f3af 8000 	nop.w

08009230 <pxCurrentTCBConst>:
 8009230:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop

08009238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
	__asm volatile
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	607b      	str	r3, [r7, #4]
}
 8009250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009252:	f7fe fc0d 	bl	8007a70 <xTaskIncrementTick>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800925c:	4b06      	ldr	r3, [pc, #24]	; (8009278 <xPortSysTickHandler+0x40>)
 800925e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	2300      	movs	r3, #0
 8009266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	f383 8811 	msr	BASEPRI, r3
}
 800926e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	e000ed04 	.word	0xe000ed04

0800927c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009280:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <vPortSetupTimerInterrupt+0x34>)
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009286:	4b0b      	ldr	r3, [pc, #44]	; (80092b4 <vPortSetupTimerInterrupt+0x38>)
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800928c:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <vPortSetupTimerInterrupt+0x3c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <vPortSetupTimerInterrupt+0x40>)
 8009292:	fba2 2303 	umull	r2, r3, r2, r3
 8009296:	099b      	lsrs	r3, r3, #6
 8009298:	4a09      	ldr	r2, [pc, #36]	; (80092c0 <vPortSetupTimerInterrupt+0x44>)
 800929a:	3b01      	subs	r3, #1
 800929c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800929e:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <vPortSetupTimerInterrupt+0x34>)
 80092a0:	2207      	movs	r2, #7
 80092a2:	601a      	str	r2, [r3, #0]
}
 80092a4:	bf00      	nop
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	e000e010 	.word	0xe000e010
 80092b4:	e000e018 	.word	0xe000e018
 80092b8:	20000000 	.word	0x20000000
 80092bc:	10624dd3 	.word	0x10624dd3
 80092c0:	e000e014 	.word	0xe000e014

080092c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092d4 <vPortEnableVFP+0x10>
 80092c8:	6801      	ldr	r1, [r0, #0]
 80092ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092ce:	6001      	str	r1, [r0, #0]
 80092d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092d2:	bf00      	nop
 80092d4:	e000ed88 	.word	0xe000ed88

080092d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092de:	f3ef 8305 	mrs	r3, IPSR
 80092e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b0f      	cmp	r3, #15
 80092e8:	d914      	bls.n	8009314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092ea:	4a17      	ldr	r2, [pc, #92]	; (8009348 <vPortValidateInterruptPriority+0x70>)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4413      	add	r3, r2
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092f4:	4b15      	ldr	r3, [pc, #84]	; (800934c <vPortValidateInterruptPriority+0x74>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	7afa      	ldrb	r2, [r7, #11]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d20a      	bcs.n	8009314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	607b      	str	r3, [r7, #4]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009314:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <vPortValidateInterruptPriority+0x78>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800931c:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <vPortValidateInterruptPriority+0x7c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d90a      	bls.n	800933a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	603b      	str	r3, [r7, #0]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <vPortValidateInterruptPriority+0x60>
	}
 800933a:	bf00      	nop
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	e000e3f0 	.word	0xe000e3f0
 800934c:	20000e20 	.word	0x20000e20
 8009350:	e000ed0c 	.word	0xe000ed0c
 8009354:	20000e24 	.word	0x20000e24

08009358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	; 0x28
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009360:	2300      	movs	r3, #0
 8009362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009364:	f7fe fac8 	bl	80078f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009368:	4b5b      	ldr	r3, [pc, #364]	; (80094d8 <pvPortMalloc+0x180>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009370:	f000 f920 	bl	80095b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009374:	4b59      	ldr	r3, [pc, #356]	; (80094dc <pvPortMalloc+0x184>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4013      	ands	r3, r2
 800937c:	2b00      	cmp	r3, #0
 800937e:	f040 8093 	bne.w	80094a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01d      	beq.n	80093c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009388:	2208      	movs	r2, #8
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4413      	add	r3, r2
 800938e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	2b00      	cmp	r3, #0
 8009398:	d014      	beq.n	80093c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f023 0307 	bic.w	r3, r3, #7
 80093a0:	3308      	adds	r3, #8
 80093a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f003 0307 	and.w	r3, r3, #7
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <pvPortMalloc+0x6c>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	617b      	str	r3, [r7, #20]
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d06e      	beq.n	80094a8 <pvPortMalloc+0x150>
 80093ca:	4b45      	ldr	r3, [pc, #276]	; (80094e0 <pvPortMalloc+0x188>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d869      	bhi.n	80094a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093d4:	4b43      	ldr	r3, [pc, #268]	; (80094e4 <pvPortMalloc+0x18c>)
 80093d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093d8:	4b42      	ldr	r3, [pc, #264]	; (80094e4 <pvPortMalloc+0x18c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093de:	e004      	b.n	80093ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d903      	bls.n	80093fc <pvPortMalloc+0xa4>
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1f1      	bne.n	80093e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093fc:	4b36      	ldr	r3, [pc, #216]	; (80094d8 <pvPortMalloc+0x180>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009402:	429a      	cmp	r2, r3
 8009404:	d050      	beq.n	80094a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2208      	movs	r2, #8
 800940c:	4413      	add	r3, r2
 800940e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	6a3b      	ldr	r3, [r7, #32]
 8009416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	1ad2      	subs	r2, r2, r3
 8009420:	2308      	movs	r3, #8
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	429a      	cmp	r2, r3
 8009426:	d91f      	bls.n	8009468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4413      	add	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <pvPortMalloc+0xf8>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	613b      	str	r3, [r7, #16]
}
 800944c:	bf00      	nop
 800944e:	e7fe      	b.n	800944e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	1ad2      	subs	r2, r2, r3
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009462:	69b8      	ldr	r0, [r7, #24]
 8009464:	f000 f908 	bl	8009678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009468:	4b1d      	ldr	r3, [pc, #116]	; (80094e0 <pvPortMalloc+0x188>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	4a1b      	ldr	r2, [pc, #108]	; (80094e0 <pvPortMalloc+0x188>)
 8009474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009476:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <pvPortMalloc+0x188>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	4b1b      	ldr	r3, [pc, #108]	; (80094e8 <pvPortMalloc+0x190>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d203      	bcs.n	800948a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009482:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <pvPortMalloc+0x188>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a18      	ldr	r2, [pc, #96]	; (80094e8 <pvPortMalloc+0x190>)
 8009488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <pvPortMalloc+0x184>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	431a      	orrs	r2, r3
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	2200      	movs	r2, #0
 800949c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <pvPortMalloc+0x194>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3301      	adds	r3, #1
 80094a4:	4a11      	ldr	r2, [pc, #68]	; (80094ec <pvPortMalloc+0x194>)
 80094a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80094a8:	f7fe fa34 	bl	8007914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f003 0307 	and.w	r3, r3, #7
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <pvPortMalloc+0x174>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	60fb      	str	r3, [r7, #12]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <pvPortMalloc+0x172>
	return pvReturn;
 80094cc:	69fb      	ldr	r3, [r7, #28]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3728      	adds	r7, #40	; 0x28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20004a30 	.word	0x20004a30
 80094dc:	20004a44 	.word	0x20004a44
 80094e0:	20004a34 	.word	0x20004a34
 80094e4:	20004a28 	.word	0x20004a28
 80094e8:	20004a38 	.word	0x20004a38
 80094ec:	20004a3c 	.word	0x20004a3c

080094f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d04d      	beq.n	800959e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009502:	2308      	movs	r3, #8
 8009504:	425b      	negs	r3, r3
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	4413      	add	r3, r2
 800950a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <vPortFree+0xb8>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4013      	ands	r3, r2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <vPortFree+0x44>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	60fb      	str	r3, [r7, #12]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <vPortFree+0x62>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	60bb      	str	r3, [r7, #8]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <vPortFree+0xb8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4013      	ands	r3, r2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01e      	beq.n	800959e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11a      	bne.n	800959e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <vPortFree+0xb8>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	43db      	mvns	r3, r3
 8009572:	401a      	ands	r2, r3
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009578:	f7fe f9be 	bl	80078f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	685a      	ldr	r2, [r3, #4]
 8009580:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <vPortFree+0xbc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4413      	add	r3, r2
 8009586:	4a09      	ldr	r2, [pc, #36]	; (80095ac <vPortFree+0xbc>)
 8009588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800958a:	6938      	ldr	r0, [r7, #16]
 800958c:	f000 f874 	bl	8009678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <vPortFree+0xc0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3301      	adds	r3, #1
 8009596:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <vPortFree+0xc0>)
 8009598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800959a:	f7fe f9bb 	bl	8007914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800959e:	bf00      	nop
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20004a44 	.word	0x20004a44
 80095ac:	20004a34 	.word	0x20004a34
 80095b0:	20004a40 	.word	0x20004a40

080095b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80095ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80095be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80095c0:	4b27      	ldr	r3, [pc, #156]	; (8009660 <prvHeapInit+0xac>)
 80095c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00c      	beq.n	80095e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3307      	adds	r3, #7
 80095d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0307 	bic.w	r3, r3, #7
 80095da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	4a1f      	ldr	r2, [pc, #124]	; (8009660 <prvHeapInit+0xac>)
 80095e4:	4413      	add	r3, r2
 80095e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095ec:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <prvHeapInit+0xb0>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095f2:	4b1c      	ldr	r3, [pc, #112]	; (8009664 <prvHeapInit+0xb0>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4413      	add	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009600:	2208      	movs	r2, #8
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0307 	bic.w	r3, r3, #7
 800960e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4a15      	ldr	r2, [pc, #84]	; (8009668 <prvHeapInit+0xb4>)
 8009614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <prvHeapInit+0xb4>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2200      	movs	r2, #0
 800961c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800961e:	4b12      	ldr	r3, [pc, #72]	; (8009668 <prvHeapInit+0xb4>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <prvHeapInit+0xb4>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	4a0a      	ldr	r2, [pc, #40]	; (800966c <prvHeapInit+0xb8>)
 8009642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	4a09      	ldr	r2, [pc, #36]	; (8009670 <prvHeapInit+0xbc>)
 800964a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <prvHeapInit+0xc0>)
 800964e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009652:	601a      	str	r2, [r3, #0]
}
 8009654:	bf00      	nop
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20000e28 	.word	0x20000e28
 8009664:	20004a28 	.word	0x20004a28
 8009668:	20004a30 	.word	0x20004a30
 800966c:	20004a38 	.word	0x20004a38
 8009670:	20004a34 	.word	0x20004a34
 8009674:	20004a44 	.word	0x20004a44

08009678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009680:	4b28      	ldr	r3, [pc, #160]	; (8009724 <prvInsertBlockIntoFreeList+0xac>)
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	e002      	b.n	800968c <prvInsertBlockIntoFreeList+0x14>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	429a      	cmp	r2, r3
 8009694:	d8f7      	bhi.n	8009686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	4413      	add	r3, r2
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d108      	bne.n	80096ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	441a      	add	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	441a      	add	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d118      	bne.n	8009700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b15      	ldr	r3, [pc, #84]	; (8009728 <prvInsertBlockIntoFreeList+0xb0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d00d      	beq.n	80096f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	441a      	add	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	e008      	b.n	8009708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <prvInsertBlockIntoFreeList+0xb0>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	e003      	b.n	8009708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	429a      	cmp	r2, r3
 800970e:	d002      	beq.n	8009716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20004a28 	.word	0x20004a28
 8009728:	20004a30 	.word	0x20004a30

0800972c <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8009736:	2300      	movs	r3, #0
 8009738:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	2b05      	cmp	r3, #5
 8009740:	d16c      	bne.n	800981c <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	3301      	adds	r3, #1
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	3302      	adds	r3, #2
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	b29a      	uxth	r2, r3
 8009756:	8abb      	ldrh	r3, [r7, #20]
 8009758:	4313      	orrs	r3, r2
 800975a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800975c:	8abb      	ldrh	r3, [r7, #20]
 800975e:	3301      	adds	r3, #1
 8009760:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	3303      	adds	r3, #3
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	b29b      	uxth	r3, r3
 800976a:	021b      	lsls	r3, r3, #8
 800976c:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3304      	adds	r3, #4
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	b29a      	uxth	r2, r3
 8009776:	8a7b      	ldrh	r3, [r7, #18]
 8009778:	4313      	orrs	r3, r2
 800977a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800977c:	8a7b      	ldrh	r3, [r7, #18]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d049      	beq.n	8009816 <eMBFuncReadCoils+0xea>
 8009782:	8a7b      	ldrh	r3, [r7, #18]
 8009784:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009788:	d245      	bcs.n	8009816 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2200      	movs	r2, #0
 8009792:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	1c5a      	adds	r2, r3, #1
 8009798:	60fa      	str	r2, [r7, #12]
 800979a:	2201      	movs	r2, #1
 800979c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	3301      	adds	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 80097aa:	8a7b      	ldrh	r3, [r7, #18]
 80097ac:	f003 0307 	and.w	r3, r3, #7
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d006      	beq.n	80097c2 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 80097b4:	8a7b      	ldrh	r3, [r7, #18]
 80097b6:	08db      	lsrs	r3, r3, #3
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	3301      	adds	r3, #1
 80097be:	75fb      	strb	r3, [r7, #23]
 80097c0:	e003      	b.n	80097ca <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 80097c2:	8a7b      	ldrh	r3, [r7, #18]
 80097c4:	08db      	lsrs	r3, r3, #3
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	1c5a      	adds	r2, r3, #1
 80097ce:	60fa      	str	r2, [r7, #12]
 80097d0:	7dfa      	ldrb	r2, [r7, #23]
 80097d2:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	3301      	adds	r3, #1
 80097da:	b29a      	uxth	r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 80097e0:	8a7a      	ldrh	r2, [r7, #18]
 80097e2:	8ab9      	ldrh	r1, [r7, #20]
 80097e4:	2300      	movs	r3, #0
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f001 f8ee 	bl	800a9c8 <eMBRegCoilsCB>
 80097ec:	4603      	mov	r3, r0
 80097ee:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80097f0:	7afb      	ldrb	r3, [r7, #11]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d006      	beq.n	8009804 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80097f6:	7afb      	ldrb	r3, [r7, #11]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f000 fc2b 	bl	800a054 <prveMBError2Exception>
 80097fe:	4603      	mov	r3, r0
 8009800:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8009802:	e00d      	b.n	8009820 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	881a      	ldrh	r2, [r3, #0]
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	b29b      	uxth	r3, r3
 800980c:	4413      	add	r3, r2
 800980e:	b29a      	uxth	r2, r3
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009814:	e004      	b.n	8009820 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009816:	2303      	movs	r3, #3
 8009818:	75bb      	strb	r3, [r7, #22]
 800981a:	e001      	b.n	8009820 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800981c:	2303      	movs	r3, #3
 800981e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8009820:	7dbb      	ldrb	r3, [r7, #22]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3718      	adds	r7, #24
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	881b      	ldrh	r3, [r3, #0]
 800983c:	2b05      	cmp	r3, #5
 800983e:	d140      	bne.n	80098c2 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3301      	adds	r3, #1
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b29b      	uxth	r3, r3
 8009848:	021b      	lsls	r3, r3, #8
 800984a:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	3302      	adds	r3, #2
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	b29a      	uxth	r2, r3
 8009854:	89bb      	ldrh	r3, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800985a:	89bb      	ldrh	r3, [r7, #12]
 800985c:	3301      	adds	r3, #1
 800985e:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3304      	adds	r3, #4
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d128      	bne.n	80098bc <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3303      	adds	r3, #3
 800986e:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8009870:	2bff      	cmp	r3, #255	; 0xff
 8009872:	d004      	beq.n	800987e <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3303      	adds	r3, #3
 8009878:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 800987a:	2b00      	cmp	r3, #0
 800987c:	d11e      	bne.n	80098bc <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3303      	adds	r3, #3
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2bff      	cmp	r3, #255	; 0xff
 800988a:	d102      	bne.n	8009892 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 800988c:	2301      	movs	r3, #1
 800988e:	723b      	strb	r3, [r7, #8]
 8009890:	e001      	b.n	8009896 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8009892:	2300      	movs	r3, #0
 8009894:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8009896:	89b9      	ldrh	r1, [r7, #12]
 8009898:	f107 0008 	add.w	r0, r7, #8
 800989c:	2301      	movs	r3, #1
 800989e:	2201      	movs	r2, #1
 80098a0:	f001 f892 	bl	800a9c8 <eMBRegCoilsCB>
 80098a4:	4603      	mov	r3, r0
 80098a6:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fbcf 	bl	800a054 <prveMBError2Exception>
 80098b6:	4603      	mov	r3, r0
 80098b8:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 80098ba:	e004      	b.n	80098c6 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80098bc:	2303      	movs	r3, #3
 80098be:	73fb      	strb	r3, [r7, #15]
 80098c0:	e001      	b.n	80098c6 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80098c2:	2303      	movs	r3, #3
 80098c4:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 80098da:	2300      	movs	r3, #0
 80098dc:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	2b05      	cmp	r3, #5
 80098e4:	d954      	bls.n	8009990 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	3301      	adds	r3, #1
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3302      	adds	r3, #2
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	89bb      	ldrh	r3, [r7, #12]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8009900:	89bb      	ldrh	r3, [r7, #12]
 8009902:	3301      	adds	r3, #1
 8009904:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3303      	adds	r3, #3
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	b29b      	uxth	r3, r3
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3304      	adds	r3, #4
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	b29a      	uxth	r2, r3
 800991a:	897b      	ldrh	r3, [r7, #10]
 800991c:	4313      	orrs	r3, r2
 800991e:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	795b      	ldrb	r3, [r3, #5]
 8009924:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8009926:	897b      	ldrh	r3, [r7, #10]
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	2b00      	cmp	r3, #0
 800992e:	d006      	beq.n	800993e <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8009930:	897b      	ldrh	r3, [r7, #10]
 8009932:	08db      	lsrs	r3, r3, #3
 8009934:	b29b      	uxth	r3, r3
 8009936:	b2db      	uxtb	r3, r3
 8009938:	3301      	adds	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]
 800993c:	e003      	b.n	8009946 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 800993e:	897b      	ldrh	r3, [r7, #10]
 8009940:	08db      	lsrs	r3, r3, #3
 8009942:	b29b      	uxth	r3, r3
 8009944:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8009946:	897b      	ldrh	r3, [r7, #10]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d01e      	beq.n	800998a <eMBFuncWriteMultipleCoils+0xba>
 800994c:	897b      	ldrh	r3, [r7, #10]
 800994e:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8009952:	d81a      	bhi.n	800998a <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8009954:	7bfa      	ldrb	r2, [r7, #15]
 8009956:	7a7b      	ldrb	r3, [r7, #9]
 8009958:	429a      	cmp	r2, r3
 800995a:	d116      	bne.n	800998a <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	1d98      	adds	r0, r3, #6
 8009960:	897a      	ldrh	r2, [r7, #10]
 8009962:	89b9      	ldrh	r1, [r7, #12]
 8009964:	2301      	movs	r3, #1
 8009966:	f001 f82f 	bl	800a9c8 <eMBRegCoilsCB>
 800996a:	4603      	mov	r3, r0
 800996c:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800996e:	7a3b      	ldrb	r3, [r7, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009974:	7a3b      	ldrb	r3, [r7, #8]
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fb6c 	bl	800a054 <prveMBError2Exception>
 800997c:	4603      	mov	r3, r0
 800997e:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8009980:	e008      	b.n	8009994 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2205      	movs	r2, #5
 8009986:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009988:	e004      	b.n	8009994 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800998a:	2303      	movs	r3, #3
 800998c:	73bb      	strb	r3, [r7, #14]
 800998e:	e001      	b.n	8009994 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009990:	2303      	movs	r3, #3
 8009992:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8009994:	7bbb      	ldrb	r3, [r7, #14]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b086      	sub	sp, #24
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	2b05      	cmp	r3, #5
 80099b2:	d16c      	bne.n	8009a8e <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3301      	adds	r3, #1
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	021b      	lsls	r3, r3, #8
 80099be:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3302      	adds	r3, #2
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	8abb      	ldrh	r3, [r7, #20]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80099ce:	8abb      	ldrh	r3, [r7, #20]
 80099d0:	3301      	adds	r3, #1
 80099d2:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3303      	adds	r3, #3
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	b29b      	uxth	r3, r3
 80099dc:	021b      	lsls	r3, r3, #8
 80099de:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3304      	adds	r3, #4
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	8a7b      	ldrh	r3, [r7, #18]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 80099ee:	8a7b      	ldrh	r3, [r7, #18]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d049      	beq.n	8009a88 <eMBFuncReadDiscreteInputs+0xea>
 80099f4:	8a7b      	ldrh	r3, [r7, #18]
 80099f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80099fa:	d245      	bcs.n	8009a88 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2200      	movs	r2, #0
 8009a04:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	60fa      	str	r2, [r7, #12]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	3301      	adds	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 8009a1c:	8a7b      	ldrh	r3, [r7, #18]
 8009a1e:	f003 0307 	and.w	r3, r3, #7
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d006      	beq.n	8009a34 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8009a26:	8a7b      	ldrh	r3, [r7, #18]
 8009a28:	08db      	lsrs	r3, r3, #3
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	3301      	adds	r3, #1
 8009a30:	75fb      	strb	r3, [r7, #23]
 8009a32:	e003      	b.n	8009a3c <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8009a34:	8a7b      	ldrh	r3, [r7, #18]
 8009a36:	08db      	lsrs	r3, r3, #3
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	60fa      	str	r2, [r7, #12]
 8009a42:	7dfa      	ldrb	r2, [r7, #23]
 8009a44:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	881b      	ldrh	r3, [r3, #0]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8009a52:	8a7a      	ldrh	r2, [r7, #18]
 8009a54:	8abb      	ldrh	r3, [r7, #20]
 8009a56:	4619      	mov	r1, r3
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f001 f863 	bl	800ab24 <eMBRegDiscreteCB>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8009a62:	7afb      	ldrb	r3, [r7, #11]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d006      	beq.n	8009a76 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 faf2 	bl	800a054 <prveMBError2Exception>
 8009a70:	4603      	mov	r3, r0
 8009a72:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8009a74:	e00d      	b.n	8009a92 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	881a      	ldrh	r2, [r3, #0]
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	4413      	add	r3, r2
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009a86:	e004      	b.n	8009a92 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	75bb      	strb	r3, [r7, #22]
 8009a8c:	e001      	b.n	8009a92 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8009a92:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	d122      	bne.n	8009af8 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	021b      	lsls	r3, r3, #8
 8009abc:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	89bb      	ldrh	r3, [r7, #12]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8009acc:	89bb      	ldrh	r3, [r7, #12]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	1cd8      	adds	r0, r3, #3
 8009ad6:	89b9      	ldrh	r1, [r7, #12]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	2201      	movs	r2, #1
 8009adc:	f000 fee6 	bl	800a8ac <eMBRegHoldingCB>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d008      	beq.n	8009afc <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 fab1 	bl	800a054 <prveMBError2Exception>
 8009af2:	4603      	mov	r3, r0
 8009af4:	73fb      	strb	r3, [r7, #15]
 8009af6:	e001      	b.n	8009afc <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009af8:	2303      	movs	r3, #3
 8009afa:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	2b05      	cmp	r3, #5
 8009b1a:	d946      	bls.n	8009baa <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3302      	adds	r3, #2
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	89bb      	ldrh	r3, [r7, #12]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8009b36:	89bb      	ldrh	r3, [r7, #12]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	3303      	adds	r3, #3
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	021b      	lsls	r3, r3, #8
 8009b46:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	897b      	ldrh	r3, [r7, #10]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	795b      	ldrb	r3, [r3, #5]
 8009b5a:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 8009b5c:	897b      	ldrh	r3, [r7, #10]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d020      	beq.n	8009ba4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 8009b62:	897b      	ldrh	r3, [r7, #10]
 8009b64:	2b78      	cmp	r3, #120	; 0x78
 8009b66:	d81d      	bhi.n	8009ba4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 8009b68:	897b      	ldrh	r3, [r7, #10]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	005b      	lsls	r3, r3, #1
 8009b6e:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 8009b70:	7a7a      	ldrb	r2, [r7, #9]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d116      	bne.n	8009ba4 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	1d98      	adds	r0, r3, #6
 8009b7a:	897a      	ldrh	r2, [r7, #10]
 8009b7c:	89b9      	ldrh	r1, [r7, #12]
 8009b7e:	2301      	movs	r3, #1
 8009b80:	f000 fe94 	bl	800a8ac <eMBRegHoldingCB>
 8009b84:	4603      	mov	r3, r0
 8009b86:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8009b88:	7a3b      	ldrb	r3, [r7, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d006      	beq.n	8009b9c <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009b8e:	7a3b      	ldrb	r3, [r7, #8]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 fa5f 	bl	800a054 <prveMBError2Exception>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8009b9a:	e008      	b.n	8009bae <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2205      	movs	r2, #5
 8009ba0:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009ba2:	e004      	b.n	8009bae <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	73fb      	strb	r3, [r7, #15]
 8009ba8:	e001      	b.n	8009bae <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009baa:	2303      	movs	r3, #3
 8009bac:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	2b05      	cmp	r3, #5
 8009bcc:	d15c      	bne.n	8009c88 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	021b      	lsls	r3, r3, #8
 8009bd8:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3302      	adds	r3, #2
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	8abb      	ldrh	r3, [r7, #20]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8009be8:	8abb      	ldrh	r3, [r7, #20]
 8009bea:	3301      	adds	r3, #1
 8009bec:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3303      	adds	r3, #3
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8009c02:	8a7b      	ldrh	r3, [r7, #18]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d03c      	beq.n	8009c82 <eMBFuncReadHoldingRegister+0xca>
 8009c08:	8a7b      	ldrh	r3, [r7, #18]
 8009c0a:	2b7d      	cmp	r3, #125	; 0x7d
 8009c0c:	d839      	bhi.n	8009c82 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2200      	movs	r2, #0
 8009c16:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	60fa      	str	r2, [r7, #12]
 8009c1e:	2203      	movs	r2, #3
 8009c20:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	3301      	adds	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8009c2e:	8a7b      	ldrh	r3, [r7, #18]
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	1c59      	adds	r1, r3, #1
 8009c36:	60f9      	str	r1, [r7, #12]
 8009c38:	0052      	lsls	r2, r2, #1
 8009c3a:	b2d2      	uxtb	r2, r2
 8009c3c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	3301      	adds	r3, #1
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8009c4a:	8a7a      	ldrh	r2, [r7, #18]
 8009c4c:	8ab9      	ldrh	r1, [r7, #20]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 fe2b 	bl	800a8ac <eMBRegHoldingCB>
 8009c56:	4603      	mov	r3, r0
 8009c58:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8009c5a:	7afb      	ldrb	r3, [r7, #11]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d006      	beq.n	8009c6e <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f9f6 	bl	800a054 <prveMBError2Exception>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8009c6c:	e00e      	b.n	8009c8c <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	881a      	ldrh	r2, [r3, #0]
 8009c72:	8a7b      	ldrh	r3, [r7, #18]
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	4413      	add	r3, r2
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009c80:	e004      	b.n	8009c8c <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009c82:	2303      	movs	r3, #3
 8009c84:	75fb      	strb	r3, [r7, #23]
 8009c86:	e001      	b.n	8009c8c <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b086      	sub	sp, #24
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	2b09      	cmp	r3, #9
 8009caa:	f240 8099 	bls.w	8009de0 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	3302      	adds	r3, #2
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	8abb      	ldrh	r3, [r7, #20]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8009cc8:	8abb      	ldrh	r3, [r7, #20]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	3303      	adds	r3, #3
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	021b      	lsls	r3, r3, #8
 8009cd8:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3304      	adds	r3, #4
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	8a7b      	ldrh	r3, [r7, #18]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3305      	adds	r3, #5
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	021b      	lsls	r3, r3, #8
 8009cf2:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3306      	adds	r3, #6
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	8a3b      	ldrh	r3, [r7, #16]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8009d02:	8a3b      	ldrh	r3, [r7, #16]
 8009d04:	3301      	adds	r3, #1
 8009d06:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3307      	adds	r3, #7
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	3308      	adds	r3, #8
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	89fb      	ldrh	r3, [r7, #14]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	7a5b      	ldrb	r3, [r3, #9]
 8009d26:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 8009d28:	8a7b      	ldrh	r3, [r7, #18]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d056      	beq.n	8009ddc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8009d2e:	8a7b      	ldrh	r3, [r7, #18]
 8009d30:	2b7d      	cmp	r3, #125	; 0x7d
 8009d32:	d853      	bhi.n	8009ddc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 8009d34:	89fb      	ldrh	r3, [r7, #14]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d050      	beq.n	8009ddc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8009d3a:	89fb      	ldrh	r3, [r7, #14]
 8009d3c:	2b79      	cmp	r3, #121	; 0x79
 8009d3e:	d84d      	bhi.n	8009ddc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 8009d40:	89fb      	ldrh	r3, [r7, #14]
 8009d42:	005a      	lsls	r2, r3, #1
 8009d44:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d148      	bne.n	8009ddc <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f103 000a 	add.w	r0, r3, #10
 8009d50:	89fa      	ldrh	r2, [r7, #14]
 8009d52:	8a39      	ldrh	r1, [r7, #16]
 8009d54:	2301      	movs	r3, #1
 8009d56:	f000 fda9 	bl	800a8ac <eMBRegHoldingCB>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 8009d5e:	7dbb      	ldrb	r3, [r7, #22]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d131      	bne.n	8009dc8 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	60ba      	str	r2, [r7, #8]
 8009d74:	2217      	movs	r2, #23
 8009d76:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8009d84:	8a7b      	ldrh	r3, [r7, #18]
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	1c59      	adds	r1, r3, #1
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	0052      	lsls	r2, r2, #1
 8009d90:	b2d2      	uxtb	r2, r2
 8009d92:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	b29a      	uxth	r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8009da0:	8a7a      	ldrh	r2, [r7, #18]
 8009da2:	8ab9      	ldrh	r1, [r7, #20]
 8009da4:	2300      	movs	r3, #0
 8009da6:	68b8      	ldr	r0, [r7, #8]
 8009da8:	f000 fd80 	bl	800a8ac <eMBRegHoldingCB>
 8009dac:	4603      	mov	r3, r0
 8009dae:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8009db0:	7dbb      	ldrb	r3, [r7, #22]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d108      	bne.n	8009dc8 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	881a      	ldrh	r2, [r3, #0]
 8009dba:	8a7b      	ldrh	r3, [r7, #18]
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	4413      	add	r3, r2
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8009dc8:	7dbb      	ldrb	r3, [r7, #22]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d008      	beq.n	8009de0 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009dce:	7dbb      	ldrb	r3, [r7, #22]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 f93f 	bl	800a054 <prveMBError2Exception>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8009dda:	e001      	b.n	8009de0 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b086      	sub	sp, #24
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	881b      	ldrh	r3, [r3, #0]
 8009dfc:	2b05      	cmp	r3, #5
 8009dfe:	d15f      	bne.n	8009ec0 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3301      	adds	r3, #1
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	021b      	lsls	r3, r3, #8
 8009e0a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3302      	adds	r3, #2
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	8abb      	ldrh	r3, [r7, #20]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8009e1a:	8abb      	ldrh	r3, [r7, #20]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3303      	adds	r3, #3
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	021b      	lsls	r3, r3, #8
 8009e2a:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	8a7b      	ldrh	r3, [r7, #18]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8009e3a:	8a7b      	ldrh	r3, [r7, #18]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d03c      	beq.n	8009eba <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8009e40:	8a7b      	ldrh	r3, [r7, #18]
 8009e42:	2b7c      	cmp	r3, #124	; 0x7c
 8009e44:	d839      	bhi.n	8009eba <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	60fa      	str	r2, [r7, #12]
 8009e56:	2204      	movs	r2, #4
 8009e58:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8009e66:	8a7b      	ldrh	r3, [r7, #18]
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	1c59      	adds	r1, r3, #1
 8009e6e:	60f9      	str	r1, [r7, #12]
 8009e70:	0052      	lsls	r2, r2, #1
 8009e72:	b2d2      	uxtb	r2, r2
 8009e74:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8009e82:	8a7a      	ldrh	r2, [r7, #18]
 8009e84:	8abb      	ldrh	r3, [r7, #20]
 8009e86:	4619      	mov	r1, r3
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f000 fcbb 	bl	800a804 <eMBRegInputCB>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8009e92:	7afb      	ldrb	r3, [r7, #11]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d006      	beq.n	8009ea6 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 f8da 	bl	800a054 <prveMBError2Exception>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8009ea4:	e00e      	b.n	8009ec4 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	881a      	ldrh	r2, [r3, #0]
 8009eaa:	8a7b      	ldrh	r3, [r7, #18]
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	4413      	add	r3, r2
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8009eb8:	e004      	b.n	8009ec4 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	75fb      	strb	r3, [r7, #23]
 8009ebe:	e001      	b.n	8009ec4 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3301      	adds	r3, #1
 8009ede:	4a08      	ldr	r2, [pc, #32]	; (8009f00 <eMBFuncReportSlaveID+0x30>)
 8009ee0:	8812      	ldrh	r2, [r2, #0]
 8009ee2:	4908      	ldr	r1, [pc, #32]	; (8009f04 <eMBFuncReportSlaveID+0x34>)
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f001 f937 	bl	800b158 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <eMBFuncReportSlaveID+0x30>)
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20004a68 	.word	0x20004a68
 8009f04:	20004a48 	.word	0x20004a48

08009f08 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	4608      	mov	r0, r1
 8009f12:	4611      	mov	r1, r2
 8009f14:	461a      	mov	r2, r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	807b      	strh	r3, [r7, #2]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	707b      	strb	r3, [r7, #1]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	703b      	strb	r3, [r7, #0]
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
 8009f22:	783b      	ldrb	r3, [r7, #0]
 8009f24:	82fb      	strh	r3, [r7, #22]

    assert( ucNBits <= 8 );
 8009f26:	787b      	ldrb	r3, [r7, #1]
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d905      	bls.n	8009f38 <xMBUtilSetBits+0x30>
 8009f2c:	4b29      	ldr	r3, [pc, #164]	; (8009fd4 <xMBUtilSetBits+0xcc>)
 8009f2e:	4a2a      	ldr	r2, [pc, #168]	; (8009fd8 <xMBUtilSetBits+0xd0>)
 8009f30:	2138      	movs	r1, #56	; 0x38
 8009f32:	482a      	ldr	r0, [pc, #168]	; (8009fdc <xMBUtilSetBits+0xd4>)
 8009f34:	f001 f8b6 	bl	800b0a4 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8009f38:	887b      	ldrh	r3, [r7, #2]
 8009f3a:	08db      	lsrs	r3, r3, #3
 8009f3c:	82bb      	strh	r3, [r7, #20]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8009f3e:	8abb      	ldrh	r3, [r7, #20]
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	887a      	ldrh	r2, [r7, #2]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	827b      	strh	r3, [r7, #18]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8009f4a:	8afa      	ldrh	r2, [r7, #22]
 8009f4c:	8a7b      	ldrh	r3, [r7, #18]
 8009f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f52:	82fb      	strh	r3, [r7, #22]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8009f54:	787b      	ldrb	r3, [r7, #1]
 8009f56:	2201      	movs	r2, #1
 8009f58:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	823b      	strh	r3, [r7, #16]
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 8009f62:	8a3a      	ldrh	r2, [r7, #16]
 8009f64:	8879      	ldrh	r1, [r7, #2]
 8009f66:	8abb      	ldrh	r3, [r7, #20]
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	1acb      	subs	r3, r1, r3
 8009f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f70:	823b      	strh	r3, [r7, #16]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 8009f72:	8abb      	ldrh	r3, [r7, #20]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	4413      	add	r3, r2
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	81fb      	strh	r3, [r7, #14]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8009f7c:	8abb      	ldrh	r3, [r7, #20]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	4413      	add	r3, r2
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	021b      	lsls	r3, r3, #8
 8009f88:	b21a      	sxth	r2, r3
 8009f8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	b21b      	sxth	r3, r3
 8009f92:	81fb      	strh	r3, [r7, #14]

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8009f94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009f98:	43db      	mvns	r3, r3
 8009f9a:	b21a      	sxth	r2, r3
 8009f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	b21a      	sxth	r2, r3
 8009fa4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	b21b      	sxth	r3, r3
 8009fac:	81fb      	strh	r3, [r7, #14]

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 8009fae:	8abb      	ldrh	r3, [r7, #20]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	89fa      	ldrh	r2, [r7, #14]
 8009fb6:	b2d2      	uxtb	r2, r2
 8009fb8:	701a      	strb	r2, [r3, #0]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 8009fba:	89fb      	ldrh	r3, [r7, #14]
 8009fbc:	0a1b      	lsrs	r3, r3, #8
 8009fbe:	b299      	uxth	r1, r3
 8009fc0:	8abb      	ldrh	r3, [r7, #20]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	b2ca      	uxtb	r2, r1
 8009fca:	701a      	strb	r2, [r3, #0]
}
 8009fcc:	bf00      	nop
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	0800d0c4 	.word	0x0800d0c4
 8009fd8:	0800d230 	.word	0x0800d230
 8009fdc:	0800d0d4 	.word	0x0800d0d4

08009fe0 <xMBUtilGetBits>:

UCHAR
xMBUtilGetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits )
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	807b      	strh	r3, [r7, #2]
 8009fec:	4613      	mov	r3, r2
 8009fee:	707b      	strb	r3, [r7, #1]
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 8009ff0:	887b      	ldrh	r3, [r7, #2]
 8009ff2:	08db      	lsrs	r3, r3, #3
 8009ff4:	81fb      	strh	r3, [r7, #14]

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
 8009ff6:	89fb      	ldrh	r3, [r7, #14]
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	887a      	ldrh	r2, [r7, #2]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	81bb      	strh	r3, [r7, #12]

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 800a002:	787b      	ldrb	r3, [r7, #1]
 800a004:	2201      	movs	r2, #1
 800a006:	fa02 f303 	lsl.w	r3, r2, r3
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	3b01      	subs	r3, #1
 800a00e:	817b      	strh	r3, [r7, #10]

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
 800a010:	89fb      	ldrh	r3, [r7, #14]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	4413      	add	r3, r2
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	813b      	strh	r3, [r7, #8]
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800a01a:	89fb      	ldrh	r3, [r7, #14]
 800a01c:	3301      	adds	r3, #1
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	4413      	add	r3, r2
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	b21a      	sxth	r2, r3
 800a028:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	b21b      	sxth	r3, r3
 800a030:	813b      	strh	r3, [r7, #8]

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
 800a032:	893a      	ldrh	r2, [r7, #8]
 800a034:	89bb      	ldrh	r3, [r7, #12]
 800a036:	fa42 f303 	asr.w	r3, r2, r3
 800a03a:	813b      	strh	r3, [r7, #8]

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;
 800a03c:	893a      	ldrh	r2, [r7, #8]
 800a03e:	897b      	ldrh	r3, [r7, #10]
 800a040:	4013      	ands	r3, r2
 800a042:	813b      	strh	r3, [r7, #8]

    return ( UCHAR ) usWordBuf;
 800a044:	893b      	ldrh	r3, [r7, #8]
 800a046:	b2db      	uxtb	r3, r3
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	2b07      	cmp	r3, #7
 800a062:	d00c      	beq.n	800a07e <prveMBError2Exception+0x2a>
 800a064:	2b07      	cmp	r3, #7
 800a066:	dc0d      	bgt.n	800a084 <prveMBError2Exception+0x30>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <prveMBError2Exception+0x1e>
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d003      	beq.n	800a078 <prveMBError2Exception+0x24>
 800a070:	e008      	b.n	800a084 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 800a072:	2300      	movs	r3, #0
 800a074:	73fb      	strb	r3, [r7, #15]
            break;
 800a076:	e008      	b.n	800a08a <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 800a078:	2302      	movs	r3, #2
 800a07a:	73fb      	strb	r3, [r7, #15]
            break;
 800a07c:	e005      	b.n	800a08a <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 800a07e:	2306      	movs	r3, #6
 800a080:	73fb      	strb	r3, [r7, #15]
            break;
 800a082:	e002      	b.n	800a08a <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 800a084:	2304      	movs	r3, #4
 800a086:	73fb      	strb	r3, [r7, #15]
            break;
 800a088:	bf00      	nop
    }

    return eStatus;
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	71fb      	strb	r3, [r7, #7]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	71bb      	strb	r3, [r7, #6]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 800a0b0:	79bb      	ldrb	r3, [r7, #6]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d005      	beq.n	800a0c2 <eMBInit+0x2a>
 800a0b6:	79bb      	ldrb	r3, [r7, #6]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 800a0bc:	79bb      	ldrb	r3, [r7, #6]
 800a0be:	2bf7      	cmp	r3, #247	; 0xf7
 800a0c0:	d902      	bls.n	800a0c8 <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	73fb      	strb	r3, [r7, #15]
 800a0c6:	e03a      	b.n	800a13e <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800a0c8:	4a1f      	ldr	r2, [pc, #124]	; (800a148 <eMBInit+0xb0>)
 800a0ca:	79bb      	ldrb	r3, [r7, #6]
 800a0cc:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d121      	bne.n	800a118 <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 800a0d4:	4b1d      	ldr	r3, [pc, #116]	; (800a14c <eMBInit+0xb4>)
 800a0d6:	4a1e      	ldr	r2, [pc, #120]	; (800a150 <eMBInit+0xb8>)
 800a0d8:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800a0da:	4b1e      	ldr	r3, [pc, #120]	; (800a154 <eMBInit+0xbc>)
 800a0dc:	4a1e      	ldr	r2, [pc, #120]	; (800a158 <eMBInit+0xc0>)
 800a0de:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 800a0e0:	4b1e      	ldr	r3, [pc, #120]	; (800a15c <eMBInit+0xc4>)
 800a0e2:	4a1f      	ldr	r2, [pc, #124]	; (800a160 <eMBInit+0xc8>)
 800a0e4:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 800a0e6:	4b1f      	ldr	r3, [pc, #124]	; (800a164 <eMBInit+0xcc>)
 800a0e8:	4a1f      	ldr	r2, [pc, #124]	; (800a168 <eMBInit+0xd0>)
 800a0ea:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 800a0ec:	4b1f      	ldr	r3, [pc, #124]	; (800a16c <eMBInit+0xd4>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;			//call back from interrupt
 800a0f2:	4b1f      	ldr	r3, [pc, #124]	; (800a170 <eMBInit+0xd8>)
 800a0f4:	4a1f      	ldr	r2, [pc, #124]	; (800a174 <eMBInit+0xdc>)
 800a0f6:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;	//call back from interrupt
 800a0f8:	4b1f      	ldr	r3, [pc, #124]	; (800a178 <eMBInit+0xe0>)
 800a0fa:	4a20      	ldr	r2, [pc, #128]	; (800a17c <eMBInit+0xe4>)
 800a0fc:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;		//call back from interrupt
 800a0fe:	4b20      	ldr	r3, [pc, #128]	; (800a180 <eMBInit+0xe8>)
 800a100:	4a20      	ldr	r2, [pc, #128]	; (800a184 <eMBInit+0xec>)
 800a102:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 800a104:	4b10      	ldr	r3, [pc, #64]	; (800a148 <eMBInit+0xb0>)
 800a106:	7818      	ldrb	r0, [r3, #0]
 800a108:	7e3b      	ldrb	r3, [r7, #24]
 800a10a:	7979      	ldrb	r1, [r7, #5]
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	f000 fdb3 	bl	800ac78 <eMBRTUInit>
 800a112:	4603      	mov	r3, r0
 800a114:	73fb      	strb	r3, [r7, #15]
            break;
 800a116:	e001      	b.n	800a11c <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 800a118:	2302      	movs	r3, #2
 800a11a:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10d      	bne.n	800a13e <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 800a122:	f000 f9ad 	bl	800a480 <xMBPortEventInit>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 800a12c:	2303      	movs	r3, #3
 800a12e:	73fb      	strb	r3, [r7, #15]
 800a130:	e005      	b.n	800a13e <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 800a132:	4a15      	ldr	r2, [pc, #84]	; (800a188 <eMBInit+0xf0>)
 800a134:	79fb      	ldrb	r3, [r7, #7]
 800a136:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 800a138:	4b14      	ldr	r3, [pc, #80]	; (800a18c <eMBInit+0xf4>)
 800a13a:	2201      	movs	r2, #1
 800a13c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	20004a6a 	.word	0x20004a6a
 800a14c:	20004a70 	.word	0x20004a70
 800a150:	0800acf1 	.word	0x0800acf1
 800a154:	20004a74 	.word	0x20004a74
 800a158:	0800ad19 	.word	0x0800ad19
 800a15c:	20004a6c 	.word	0x20004a6c
 800a160:	0800add1 	.word	0x0800add1
 800a164:	20004a78 	.word	0x20004a78
 800a168:	0800ad35 	.word	0x0800ad35
 800a16c:	20004a7c 	.word	0x20004a7c
 800a170:	20004da4 	.word	0x20004da4
 800a174:	0800ae99 	.word	0x0800ae99
 800a178:	20004d9c 	.word	0x20004d9c
 800a17c:	0800af69 	.word	0x0800af69
 800a180:	20004da0 	.word	0x20004da0
 800a184:	0800b019 	.word	0x0800b019
 800a188:	20004a6b 	.word	0x20004a6b
 800a18c:	20000010 	.word	0x20000010

0800a190 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 800a196:	2300      	movs	r3, #0
 800a198:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 800a19a:	4b09      	ldr	r3, [pc, #36]	; (800a1c0 <eMBEnable+0x30>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d106      	bne.n	800a1b0 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800a1a2:	4b08      	ldr	r3, [pc, #32]	; (800a1c4 <eMBEnable+0x34>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 800a1a8:	4b05      	ldr	r3, [pc, #20]	; (800a1c0 <eMBEnable+0x30>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	701a      	strb	r2, [r3, #0]
 800a1ae:	e001      	b.n	800a1b4 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 800a1b0:	2306      	movs	r3, #6
 800a1b2:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 800a1b4:	79fb      	ldrb	r3, [r7, #7]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20000010 	.word	0x20000010
 800a1c4:	20004a70 	.word	0x20004a70

0800a1c8 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 800a1c8:	b590      	push	{r4, r7, lr}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800a1d2:	4b56      	ldr	r3, [pc, #344]	; (800a32c <eMBPoll+0x164>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 800a1da:	2306      	movs	r3, #6
 800a1dc:	e0a1      	b.n	800a322 <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 800a1de:	1cbb      	adds	r3, r7, #2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 f98d 	bl	800a500 <xMBPortEventGet>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	f040 8094 	bne.w	800a316 <eMBPoll+0x14e>
    {
        switch ( eEvent )
 800a1ee:	78bb      	ldrb	r3, [r7, #2]
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	2b07      	cmp	r3, #7
 800a1f4:	f200 8094 	bhi.w	800a320 <eMBPoll+0x158>
 800a1f8:	a201      	add	r2, pc, #4	; (adr r2, 800a200 <eMBPoll+0x38>)
 800a1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fe:	bf00      	nop
 800a200:	0800a321 	.word	0x0800a321
 800a204:	0800a221 	.word	0x0800a221
 800a208:	0800a321 	.word	0x0800a321
 800a20c:	0800a253 	.word	0x0800a253
 800a210:	0800a321 	.word	0x0800a321
 800a214:	0800a321 	.word	0x0800a321
 800a218:	0800a321 	.word	0x0800a321
 800a21c:	0800a321 	.word	0x0800a321
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800a220:	4b43      	ldr	r3, [pc, #268]	; (800a330 <eMBPoll+0x168>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a43      	ldr	r2, [pc, #268]	; (800a334 <eMBPoll+0x16c>)
 800a226:	4944      	ldr	r1, [pc, #272]	; (800a338 <eMBPoll+0x170>)
 800a228:	4844      	ldr	r0, [pc, #272]	; (800a33c <eMBPoll+0x174>)
 800a22a:	4798      	blx	r3
 800a22c:	4603      	mov	r3, r0
 800a22e:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d171      	bne.n	800a31a <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 800a236:	4b41      	ldr	r3, [pc, #260]	; (800a33c <eMBPoll+0x174>)
 800a238:	781a      	ldrb	r2, [r3, #0]
 800a23a:	4b41      	ldr	r3, [pc, #260]	; (800a340 <eMBPoll+0x178>)
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d003      	beq.n	800a24a <eMBPoll+0x82>
 800a242:	4b3e      	ldr	r3, [pc, #248]	; (800a33c <eMBPoll+0x174>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d167      	bne.n	800a31a <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800a24a:	2004      	movs	r0, #4
 800a24c:	f000 f92a 	bl	800a4a4 <xMBPortEventPost>
                }
            }
            break;
 800a250:	e063      	b.n	800a31a <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 800a252:	4b39      	ldr	r3, [pc, #228]	; (800a338 <eMBPoll+0x170>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	781a      	ldrb	r2, [r3, #0]
 800a258:	4b3a      	ldr	r3, [pc, #232]	; (800a344 <eMBPoll+0x17c>)
 800a25a:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800a25c:	4b3a      	ldr	r3, [pc, #232]	; (800a348 <eMBPoll+0x180>)
 800a25e:	2201      	movs	r2, #1
 800a260:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800a262:	2300      	movs	r3, #0
 800a264:	607b      	str	r3, [r7, #4]
 800a266:	e01f      	b.n	800a2a8 <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 800a268:	4a38      	ldr	r2, [pc, #224]	; (800a34c <eMBPoll+0x184>)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d01d      	beq.n	800a2b0 <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 800a274:	4a35      	ldr	r2, [pc, #212]	; (800a34c <eMBPoll+0x184>)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800a27c:	4b31      	ldr	r3, [pc, #196]	; (800a344 <eMBPoll+0x17c>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d10e      	bne.n	800a2a2 <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 800a284:	4a31      	ldr	r2, [pc, #196]	; (800a34c <eMBPoll+0x184>)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	00db      	lsls	r3, r3, #3
 800a28a:	4413      	add	r3, r2
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	4a2a      	ldr	r2, [pc, #168]	; (800a338 <eMBPoll+0x170>)
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	4928      	ldr	r1, [pc, #160]	; (800a334 <eMBPoll+0x16c>)
 800a294:	4610      	mov	r0, r2
 800a296:	4798      	blx	r3
 800a298:	4603      	mov	r3, r0
 800a29a:	461a      	mov	r2, r3
 800a29c:	4b2a      	ldr	r3, [pc, #168]	; (800a348 <eMBPoll+0x180>)
 800a29e:	701a      	strb	r2, [r3, #0]
                    break;
 800a2a0:	e007      	b.n	800a2b2 <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	607b      	str	r3, [r7, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b0f      	cmp	r3, #15
 800a2ac:	dddc      	ble.n	800a268 <eMBPoll+0xa0>
 800a2ae:	e000      	b.n	800a2b2 <eMBPoll+0xea>
                    break;
 800a2b0:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 800a2b2:	4b22      	ldr	r3, [pc, #136]	; (800a33c <eMBPoll+0x174>)
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d031      	beq.n	800a31e <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 800a2ba:	4b23      	ldr	r3, [pc, #140]	; (800a348 <eMBPoll+0x180>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d01d      	beq.n	800a2fe <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 800a2c2:	4b1c      	ldr	r3, [pc, #112]	; (800a334 <eMBPoll+0x16c>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 800a2c8:	4b1e      	ldr	r3, [pc, #120]	; (800a344 <eMBPoll+0x17c>)
 800a2ca:	781a      	ldrb	r2, [r3, #0]
 800a2cc:	4b1a      	ldr	r3, [pc, #104]	; (800a338 <eMBPoll+0x170>)
 800a2ce:	6819      	ldr	r1, [r3, #0]
 800a2d0:	4b18      	ldr	r3, [pc, #96]	; (800a334 <eMBPoll+0x16c>)
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	1c58      	adds	r0, r3, #1
 800a2d6:	b284      	uxth	r4, r0
 800a2d8:	4816      	ldr	r0, [pc, #88]	; (800a334 <eMBPoll+0x16c>)
 800a2da:	8004      	strh	r4, [r0, #0]
 800a2dc:	440b      	add	r3, r1
 800a2de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 800a2e6:	4b14      	ldr	r3, [pc, #80]	; (800a338 <eMBPoll+0x170>)
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	4b12      	ldr	r3, [pc, #72]	; (800a334 <eMBPoll+0x16c>)
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	1c59      	adds	r1, r3, #1
 800a2f0:	b288      	uxth	r0, r1
 800a2f2:	4910      	ldr	r1, [pc, #64]	; (800a334 <eMBPoll+0x16c>)
 800a2f4:	8008      	strh	r0, [r1, #0]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	4a13      	ldr	r2, [pc, #76]	; (800a348 <eMBPoll+0x180>)
 800a2fa:	7812      	ldrb	r2, [r2, #0]
 800a2fc:	701a      	strb	r2, [r3, #0]
                }
               // if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
               // {
                //    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                //}
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 800a2fe:	4b14      	ldr	r3, [pc, #80]	; (800a350 <eMBPoll+0x188>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a0f      	ldr	r2, [pc, #60]	; (800a340 <eMBPoll+0x178>)
 800a304:	7810      	ldrb	r0, [r2, #0]
 800a306:	4a0c      	ldr	r2, [pc, #48]	; (800a338 <eMBPoll+0x170>)
 800a308:	6811      	ldr	r1, [r2, #0]
 800a30a:	4a0a      	ldr	r2, [pc, #40]	; (800a334 <eMBPoll+0x16c>)
 800a30c:	8812      	ldrh	r2, [r2, #0]
 800a30e:	4798      	blx	r3
 800a310:	4603      	mov	r3, r0
 800a312:	70fb      	strb	r3, [r7, #3]
            }
            break;
 800a314:	e003      	b.n	800a31e <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 800a316:	bf00      	nop
 800a318:	e002      	b.n	800a320 <eMBPoll+0x158>
            break;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <eMBPoll+0x158>
            break;
 800a31e:	bf00      	nop
    return MB_ENOERR;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	bd90      	pop	{r4, r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20000010 	.word	0x20000010
 800a330:	20004a78 	.word	0x20004a78
 800a334:	20004a88 	.word	0x20004a88
 800a338:	20004a84 	.word	0x20004a84
 800a33c:	20004a80 	.word	0x20004a80
 800a340:	20004a6a 	.word	0x20004a6a
 800a344:	20004a8a 	.word	0x20004a8a
 800a348:	20004a8b 	.word	0x20004a8b
 800a34c:	20000014 	.word	0x20000014
 800a350:	20004a6c 	.word	0x20004a6c

0800a354 <initMBSlaveTask>:
extern UCHAR    ucSDiscInBuf[S_DISCRETE_INPUT_NDISCRETES/8];

TaskHandle_t slavepoll_handle;
TaskHandle_t led_handle;

void initMBSlaveTask(void){
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af02      	add	r7, sp, #8
	BaseType_t status;
	status = xTaskCreate(slavepoll_task, "mb slave poll", 600, NULL, osPriorityNormal, &slavepoll_handle );
 800a35a:	4b1b      	ldr	r3, [pc, #108]	; (800a3c8 <initMBSlaveTask+0x74>)
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	2318      	movs	r3, #24
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	2300      	movs	r3, #0
 800a364:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a368:	4918      	ldr	r1, [pc, #96]	; (800a3cc <initMBSlaveTask+0x78>)
 800a36a:	4819      	ldr	r0, [pc, #100]	; (800a3d0 <initMBSlaveTask+0x7c>)
 800a36c:	f7fd f873 	bl	8007456 <xTaskCreate>
 800a370:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d00a      	beq.n	800a38e <initMBSlaveTask+0x3a>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	60bb      	str	r3, [r7, #8]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <initMBSlaveTask+0x38>

	status = xTaskCreate(led_task, "blink led", 100, NULL, osPriorityNormal, &led_handle );
 800a38e:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <initMBSlaveTask+0x80>)
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	2318      	movs	r3, #24
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	2300      	movs	r3, #0
 800a398:	2264      	movs	r2, #100	; 0x64
 800a39a:	490f      	ldr	r1, [pc, #60]	; (800a3d8 <initMBSlaveTask+0x84>)
 800a39c:	480f      	ldr	r0, [pc, #60]	; (800a3dc <initMBSlaveTask+0x88>)
 800a39e:	f7fd f85a 	bl	8007456 <xTaskCreate>
 800a3a2:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d00a      	beq.n	800a3c0 <initMBSlaveTask+0x6c>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	607b      	str	r3, [r7, #4]
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <initMBSlaveTask+0x6a>
	// vTaskStartScheduler();
}
 800a3c0:	bf00      	nop
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20004dac 	.word	0x20004dac
 800a3cc:	0800d0f4 	.word	0x0800d0f4
 800a3d0:	0800a3e1 	.word	0x0800a3e1
 800a3d4:	20004da8 	.word	0x20004da8
 800a3d8:	0800d104 	.word	0x0800d104
 800a3dc:	0800a449 	.word	0x0800a449

0800a3e0 <slavepoll_task>:

void slavepoll_task(void*p){
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af02      	add	r7, sp, #8
 800a3e6:	6078      	str	r0, [r7, #4]

	  usSRegInBuf[4] = 0x11;
 800a3e8:	4b13      	ldr	r3, [pc, #76]	; (800a438 <slavepoll_task+0x58>)
 800a3ea:	2211      	movs	r2, #17
 800a3ec:	811a      	strh	r2, [r3, #8]
	  usSRegInBuf[1] = 0x22;
 800a3ee:	4b12      	ldr	r3, [pc, #72]	; (800a438 <slavepoll_task+0x58>)
 800a3f0:	2222      	movs	r2, #34	; 0x22
 800a3f2:	805a      	strh	r2, [r3, #2]
	  usSRegInBuf[2] = 0x33;
 800a3f4:	4b10      	ldr	r3, [pc, #64]	; (800a438 <slavepoll_task+0x58>)
 800a3f6:	2233      	movs	r2, #51	; 0x33
 800a3f8:	809a      	strh	r2, [r3, #4]
	  usSRegInBuf[3] = 0x44;
 800a3fa:	4b0f      	ldr	r3, [pc, #60]	; (800a438 <slavepoll_task+0x58>)
 800a3fc:	2244      	movs	r2, #68	; 0x44
 800a3fe:	80da      	strh	r2, [r3, #6]
	  usSRegHoldBuf[2] = 0x1111;
 800a400:	4b0e      	ldr	r3, [pc, #56]	; (800a43c <slavepoll_task+0x5c>)
 800a402:	f241 1211 	movw	r2, #4369	; 0x1111
 800a406:	809a      	strh	r2, [r3, #4]
	  usSRegHoldBuf[1] = 0x2222;
 800a408:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <slavepoll_task+0x5c>)
 800a40a:	f242 2222 	movw	r2, #8738	; 0x2222
 800a40e:	805a      	strh	r2, [r3, #2]
	  ucSDiscInBuf[0] = 0xf0;
 800a410:	4b0b      	ldr	r3, [pc, #44]	; (800a440 <slavepoll_task+0x60>)
 800a412:	22f0      	movs	r2, #240	; 0xf0
 800a414:	701a      	strb	r2, [r3, #0]
	  ucSCoilBuf[0] = 0xff ;
 800a416:	4b0b      	ldr	r3, [pc, #44]	; (800a444 <slavepoll_task+0x64>)
 800a418:	22ff      	movs	r2, #255	; 0xff
 800a41a:	701a      	strb	r2, [r3, #0]
	eMBInit(MB_RTU, 1, 9, 115200, MB_PAR_NONE);
 800a41c:	2300      	movs	r3, #0
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800a424:	2209      	movs	r2, #9
 800a426:	2101      	movs	r1, #1
 800a428:	2000      	movs	r0, #0
 800a42a:	f7ff fe35 	bl	800a098 <eMBInit>
	eMBEnable();
 800a42e:	f7ff feaf 	bl	800a190 <eMBEnable>
	while(1){
		eMBPoll();
 800a432:	f7ff fec9 	bl	800a1c8 <eMBPoll>
 800a436:	e7fc      	b.n	800a432 <slavepoll_task+0x52>
 800a438:	20004dd8 	.word	0x20004dd8
 800a43c:	20004db8 	.word	0x20004db8
 800a440:	20004db4 	.word	0x20004db4
 800a444:	20004db0 	.word	0x20004db0

0800a448 <led_task>:
	}
}

void led_task (void*p){
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800a450:	2120      	movs	r1, #32
 800a452:	4804      	ldr	r0, [pc, #16]	; (800a464 <led_task+0x1c>)
 800a454:	f7f8 fcb7 	bl	8002dc6 <HAL_GPIO_TogglePin>
		//HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, GPIO_PIN_SET);
		vTaskDelay(500);
 800a458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a45c:	f7fd f9b2 	bl	80077c4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800a460:	e7f6      	b.n	800a450 <led_task+0x8>
 800a462:	bf00      	nop
 800a464:	40020000 	.word	0x40020000

0800a468 <EnterCriticalSection>:

/* ----------------------- Variables ----------------------------------------*/

/* ----------------------- Start implementation -----------------------------*/
void EnterCriticalSection(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
    taskENTER_CRITICAL();
 800a46c:	f7fe fe52 	bl	8009114 <vPortEnterCritical>
}
 800a470:	bf00      	nop
 800a472:	bd80      	pop	{r7, pc}

0800a474 <ExitCriticalSection>:

void ExitCriticalSection(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
    taskEXIT_CRITICAL();
 800a478:	f7fe fe7c 	bl	8009174 <vPortExitCritical>
}
 800a47c:	bf00      	nop
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <xMBPortEventInit>:


/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
	xSlaveOsEvent = xEventGroupCreate();
 800a484:	f7fb fe4a 	bl	800611c <xEventGroupCreate>
 800a488:	4603      	mov	r3, r0
 800a48a:	4a05      	ldr	r2, [pc, #20]	; (800a4a0 <xMBPortEventInit+0x20>)
 800a48c:	6013      	str	r3, [r2, #0]
	if(xSlaveOsEvent == NULL) return FALSE;
 800a48e:	4b04      	ldr	r3, [pc, #16]	; (800a4a0 <xMBPortEventInit+0x20>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <xMBPortEventInit+0x1a>
 800a496:	2300      	movs	r3, #0
 800a498:	e000      	b.n	800a49c <xMBPortEventInit+0x1c>
    return TRUE;
 800a49a:	2301      	movs	r3, #1
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20004a8c 	.word	0x20004a8c

0800a4a4 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	71fb      	strb	r3, [r7, #7]
	xEventGroupSetBits(xSlaveOsEvent, eEvent);
 800a4ae:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <xMBPortEventPost+0x24>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	79fa      	ldrb	r2, [r7, #7]
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fb ff18 	bl	80062ec <xEventGroupSetBits>
    return TRUE;
 800a4bc:	2301      	movs	r3, #1
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20004a8c 	.word	0x20004a8c

0800a4cc <xMBPortEventPostFromISR>:

BOOL
xMBPortEventPostFromISR( eMBEventType eEvent )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	71fb      	strb	r3, [r7, #7]
	BaseType_t xresult = pdFAIL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
	xresult = xEventGroupSetBitsFromISR(xSlaveOsEvent, eEvent, NULL);
 800a4da:	4b08      	ldr	r3, [pc, #32]	; (800a4fc <xMBPortEventPostFromISR+0x30>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	79f9      	ldrb	r1, [r7, #7]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fb ffbc 	bl	8006460 <xEventGroupSetBitsFromISR>
 800a4e8:	60f8      	str	r0, [r7, #12]
	if(xresult == pdFAIL){
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d100      	bne.n	800a4f2 <xMBPortEventPostFromISR+0x26>
		while(1);
 800a4f0:	e7fe      	b.n	800a4f0 <xMBPortEventPostFromISR+0x24>
	}
	return TRUE;
 800a4f2:	2301      	movs	r3, #1
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	20004a8c 	.word	0x20004a8c

0800a500 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af02      	add	r7, sp, #8
 800a506:	6078      	str	r0, [r7, #4]
	EventBits_t recEvent;
	recEvent = xEventGroupWaitBits(	xSlaveOsEvent,
 800a508:	4b1b      	ldr	r3, [pc, #108]	; (800a578 <xMBPortEventGet+0x78>)
 800a50a:	6818      	ldr	r0, [r3, #0]
 800a50c:	f04f 33ff 	mov.w	r3, #4294967295
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	2300      	movs	r3, #0
 800a514:	2201      	movs	r2, #1
 800a516:	210f      	movs	r1, #15
 800a518:	f7fb fe1a 	bl	8006150 <xEventGroupWaitBits>
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3b01      	subs	r3, #1
 800a522:	2b07      	cmp	r3, #7
 800a524:	d822      	bhi.n	800a56c <xMBPortEventGet+0x6c>
 800a526:	a201      	add	r2, pc, #4	; (adr r2, 800a52c <xMBPortEventGet+0x2c>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a54d 	.word	0x0800a54d
 800a530:	0800a555 	.word	0x0800a555
 800a534:	0800a56d 	.word	0x0800a56d
 800a538:	0800a55d 	.word	0x0800a55d
 800a53c:	0800a56d 	.word	0x0800a56d
 800a540:	0800a56d 	.word	0x0800a56d
 800a544:	0800a56d 	.word	0x0800a56d
 800a548:	0800a565 	.word	0x0800a565
									portMAX_DELAY);

    switch (recEvent)
    {
    case EV_READY:
        *eEvent = EV_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	701a      	strb	r2, [r3, #0]
        break;
 800a552:	e00b      	b.n	800a56c <xMBPortEventGet+0x6c>
    case EV_FRAME_RECEIVED:
        *eEvent = EV_FRAME_RECEIVED;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	701a      	strb	r2, [r3, #0]
        break;
 800a55a:	e007      	b.n	800a56c <xMBPortEventGet+0x6c>
    case EV_EXECUTE:
        *eEvent = EV_EXECUTE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2204      	movs	r2, #4
 800a560:	701a      	strb	r2, [r3, #0]
        break;
 800a562:	e003      	b.n	800a56c <xMBPortEventGet+0x6c>
    case EV_FRAME_SENT:
        *eEvent = EV_FRAME_SENT;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2208      	movs	r2, #8
 800a568:	701a      	strb	r2, [r3, #0]
        break;
 800a56a:	bf00      	nop
    }
    return TRUE;
 800a56c:	2301      	movs	r3, #1
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20004a8c 	.word	0x20004a8c

0800a57c <vMBPortSerialEnable>:
 
/* ----------------------- Start implementation -----------------------------*/

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	460a      	mov	r2, r1
 800a586:	71fb      	strb	r3, [r7, #7]
 800a588:	4613      	mov	r3, r2
 800a58a:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 800a58c:	79fb      	ldrb	r3, [r7, #7]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d008      	beq.n	800a5a4 <vMBPortSerialEnable+0x28>
    __HAL_UART_ENABLE_IT(&huartused, UART_IT_RXNE);
 800a592:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <vMBPortSerialEnable+0x6c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68da      	ldr	r2, [r3, #12]
 800a598:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <vMBPortSerialEnable+0x6c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f042 0220 	orr.w	r2, r2, #32
 800a5a0:	60da      	str	r2, [r3, #12]
 800a5a2:	e007      	b.n	800a5b4 <vMBPortSerialEnable+0x38>
    //HAL_GPIO_WritePin(GPIOC, PC2_Pin, GPIO_PIN_RESET);	//RE ........Receiver Output Enable (Low to enable)
  } else {    
    __HAL_UART_DISABLE_IT(&huartused, UART_IT_RXNE);
 800a5a4:	4b10      	ldr	r3, [pc, #64]	; (800a5e8 <vMBPortSerialEnable+0x6c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68da      	ldr	r2, [r3, #12]
 800a5aa:	4b0f      	ldr	r3, [pc, #60]	; (800a5e8 <vMBPortSerialEnable+0x6c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f022 0220 	bic.w	r2, r2, #32
 800a5b2:	60da      	str	r2, [r3, #12]
   // HAL_GPIO_WritePin(GPIOC, PC2_Pin, GPIO_PIN_RESET);
  }
  
  if (xTxEnable) {    
 800a5b4:	79bb      	ldrb	r3, [r7, #6]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d008      	beq.n	800a5cc <vMBPortSerialEnable+0x50>
    __HAL_UART_ENABLE_IT(&huartused, UART_IT_TXE);
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	; (800a5e8 <vMBPortSerialEnable+0x6c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68da      	ldr	r2, [r3, #12]
 800a5c0:	4b09      	ldr	r3, [pc, #36]	; (800a5e8 <vMBPortSerialEnable+0x6c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5c8:	60da      	str	r2, [r3, #12]
  } else {
    __HAL_UART_DISABLE_IT(&huartused, UART_IT_TXE);
    //HAL_GPIO_WritePin(GPIOC, PC3_Pin, GPIO_PIN_RESET);
  }  
  
}
 800a5ca:	e007      	b.n	800a5dc <vMBPortSerialEnable+0x60>
    __HAL_UART_DISABLE_IT(&huartused, UART_IT_TXE);
 800a5cc:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <vMBPortSerialEnable+0x6c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <vMBPortSerialEnable+0x6c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5da:	60da      	str	r2, [r3, #12]
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	20004be0 	.word	0x20004be0

0800a5ec <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6039      	str	r1, [r7, #0]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	71fb      	strb	r3, [r7, #7]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	71bb      	strb	r3, [r7, #6]
 800a600:	4613      	mov	r3, r2
 800a602:	717b      	strb	r3, [r7, #5]

	/*
	 * Please note: when user uses EVEN or ODD parity the Data bit value chose
	 * in CubeMx initialize must be 9 bit
	 */
  return TRUE;
 800a604:	2301      	movs	r3, #1
}
 800a606:	4618      	mov	r0, r3
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
	huartused.Instance->DR = (uint8_t)(ucByte & 0xFFU);
 800a61e:	4b05      	ldr	r3, [pc, #20]	; (800a634 <xMBPortSerialPutByte+0x20>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	79fa      	ldrb	r2, [r7, #7]
 800a624:	605a      	str	r2, [r3, #4]
	return TRUE;
 800a626:	2301      	movs	r3, #1
  //return (HAL_OK == HAL_UART_Transmit(&huartused, (uint8_t*)&ucByte, 1, 10));
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	20004be0 	.word	0x20004be0

0800a638 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huartused.Instance->DR & (uint8_t)0x00FF);
 800a640:	4b06      	ldr	r3, [pc, #24]	; (800a65c <xMBPortSerialGetByte+0x24>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	b2da      	uxtb	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	701a      	strb	r2, [r3, #0]
  return TRUE;
 800a64c:	2301      	movs	r3, #1
}
 800a64e:	4618      	mov	r0, r3
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20004be0 	.word	0x20004be0

0800a660 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */

#if PORT_USE_UART2
void USART2_IRQHandler(void){
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
void UART5_IRQHandler(void){
#endif

  /* USER CODE BEGIN USART2_IRQn 0 */

  uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huartused, UART_FLAG_RXNE);
 800a666:	4b1f      	ldr	r3, [pc, #124]	; (800a6e4 <USART2_IRQHandler+0x84>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0320 	and.w	r3, r3, #32
 800a670:	2b20      	cmp	r3, #32
 800a672:	bf0c      	ite	eq
 800a674:	2301      	moveq	r3, #1
 800a676:	2300      	movne	r3, #0
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huartused, UART_IT_RXNE);
 800a67c:	4b19      	ldr	r3, [pc, #100]	; (800a6e4 <USART2_IRQHandler+0x84>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	f003 0320 	and.w	r3, r3, #32
 800a686:	60bb      	str	r3, [r7, #8]

  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d011      	beq.n	800a6b2 <USART2_IRQHandler+0x52>
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00e      	beq.n	800a6b2 <USART2_IRQHandler+0x52>

	  pxMBFrameCBByteReceived();	  //xMBRTUReceiveFSM() in mbrtu.c
 800a694:	4b14      	ldr	r3, [pc, #80]	; (800a6e8 <USART2_IRQHandler+0x88>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4798      	blx	r3

	  __HAL_UART_CLEAR_PEFLAG(&huartused);
 800a69a:	2300      	movs	r3, #0
 800a69c:	607b      	str	r3, [r7, #4]
 800a69e:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <USART2_IRQHandler+0x84>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	607b      	str	r3, [r7, #4]
 800a6a6:	4b0f      	ldr	r3, [pc, #60]	; (800a6e4 <USART2_IRQHandler+0x84>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	607b      	str	r3, [r7, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
    return;
 800a6b0:	e014      	b.n	800a6dc <USART2_IRQHandler+0x7c>
  }

  if((__HAL_UART_GET_FLAG(&huartused, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huartused, UART_IT_TXE) != RESET)) {
 800a6b2:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <USART2_IRQHandler+0x84>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6bc:	2b80      	cmp	r3, #128	; 0x80
 800a6be:	d10a      	bne.n	800a6d6 <USART2_IRQHandler+0x76>
 800a6c0:	4b08      	ldr	r3, [pc, #32]	; (800a6e4 <USART2_IRQHandler+0x84>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <USART2_IRQHandler+0x76>

	  pxMBFrameCBTransmitterEmpty(); 	  //xMBRTUTransmitFSM() in mbrtu.c
 800a6ce:	4b07      	ldr	r3, [pc, #28]	; (800a6ec <USART2_IRQHandler+0x8c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4798      	blx	r3

    return ;
 800a6d4:	e002      	b.n	800a6dc <USART2_IRQHandler+0x7c>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huartused);
 800a6d6:	4803      	ldr	r0, [pc, #12]	; (800a6e4 <USART2_IRQHandler+0x84>)
 800a6d8:	f7f9 ff5a 	bl	8004590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20004be0 	.word	0x20004be0
 800a6e8:	20004da4 	.word	0x20004da4
 800a6ec:	20004d9c 	.word	0x20004d9c

0800a6f0 <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim7.Instance = TIM7;
 800a6fa:	4b19      	ldr	r3, [pc, #100]	; (800a760 <xMBPortTimersInit+0x70>)
 800a6fc:	4a19      	ldr	r2, [pc, #100]	; (800a764 <xMBPortTimersInit+0x74>)
 800a6fe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (2 * HAL_RCC_GetPCLK1Freq() / 1000000) - 1; //TIMx_CLK = 90Mhz, PCLK1 = 45MHz
 800a700:	f7f8 fc6e 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 800a704:	4603      	mov	r3, r0
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	4a17      	ldr	r2, [pc, #92]	; (800a768 <xMBPortTimersInit+0x78>)
 800a70a:	fba2 2303 	umull	r2, r3, r2, r3
 800a70e:	0c9b      	lsrs	r3, r3, #18
 800a710:	3b01      	subs	r3, #1
 800a712:	4a13      	ldr	r2, [pc, #76]	; (800a760 <xMBPortTimersInit+0x70>)
 800a714:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a716:	4b12      	ldr	r3, [pc, #72]	; (800a760 <xMBPortTimersInit+0x70>)
 800a718:	2200      	movs	r2, #0
 800a71a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50 - 1;
 800a71c:	4b10      	ldr	r3, [pc, #64]	; (800a760 <xMBPortTimersInit+0x70>)
 800a71e:	2231      	movs	r2, #49	; 0x31
 800a720:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 800a722:	4a12      	ldr	r2, [pc, #72]	; (800a76c <xMBPortTimersInit+0x7c>)
 800a724:	88fb      	ldrh	r3, [r7, #6]
 800a726:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a728:	480d      	ldr	r0, [pc, #52]	; (800a760 <xMBPortTimersInit+0x70>)
 800a72a:	f7f9 fb93 	bl	8003e54 <HAL_TIM_Base_Init>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <xMBPortTimersInit+0x48>
  {
    return FALSE;
 800a734:	2300      	movs	r3, #0
 800a736:	e00f      	b.n	800a758 <xMBPortTimersInit+0x68>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a738:	2320      	movs	r3, #32
 800a73a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4619      	mov	r1, r3
 800a746:	4806      	ldr	r0, [pc, #24]	; (800a760 <xMBPortTimersInit+0x70>)
 800a748:	f7f9 fe44 	bl	80043d4 <HAL_TIMEx_MasterConfigSynchronization>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <xMBPortTimersInit+0x66>
  {
    return FALSE;
 800a752:	2300      	movs	r3, #0
 800a754:	e000      	b.n	800a758 <xMBPortTimersInit+0x68>
  }
  
  return TRUE;
 800a756:	2301      	movs	r3, #1
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20004c84 	.word	0x20004c84
 800a764:	40001400 	.word	0x40001400
 800a768:	431bde83 	.word	0x431bde83
 800a76c:	20004a90 	.word	0x20004a90

0800a770 <vMBPortTimersEnable>:
 
void
vMBPortTimersEnable(  )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 800a774:	4b04      	ldr	r3, [pc, #16]	; (800a788 <vMBPortTimersEnable+0x18>)
 800a776:	881a      	ldrh	r2, [r3, #0]
 800a778:	4b04      	ldr	r3, [pc, #16]	; (800a78c <vMBPortTimersEnable+0x1c>)
 800a77a:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 800a77c:	4804      	ldr	r0, [pc, #16]	; (800a790 <vMBPortTimersEnable+0x20>)
 800a77e:	f7f9 fbb9 	bl	8003ef4 <HAL_TIM_Base_Start_IT>
}
 800a782:	bf00      	nop
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20004a90 	.word	0x20004a90
 800a78c:	20004a92 	.word	0x20004a92
 800a790:	20004c84 	.word	0x20004c84

0800a794 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim7);
 800a798:	4802      	ldr	r0, [pc, #8]	; (800a7a4 <vMBPortTimersDisable+0x10>)
 800a79a:	f7f9 fc1b 	bl	8003fd4 <HAL_TIM_Base_Stop_IT>
}
 800a79e:	bf00      	nop
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20004c84 	.word	0x20004c84

0800a7a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET
 800a7ac:	4b12      	ldr	r3, [pc, #72]	; (800a7f8 <TIM7_IRQHandler+0x50>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d118      	bne.n	800a7ec <TIM7_IRQHandler+0x44>
	   && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET)
 800a7ba:	4b0f      	ldr	r3, [pc, #60]	; (800a7f8 <TIM7_IRQHandler+0x50>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	f003 0301 	and.w	r3, r3, #1
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d111      	bne.n	800a7ec <TIM7_IRQHandler+0x44>
	{
		__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 800a7c8:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <TIM7_IRQHandler+0x50>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f06f 0201 	mvn.w	r2, #1
 800a7d0:	611a      	str	r2, [r3, #16]
		if (!--downcounter)
 800a7d2:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <TIM7_IRQHandler+0x54>)
 800a7d4:	881b      	ldrh	r3, [r3, #0]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	4b08      	ldr	r3, [pc, #32]	; (800a7fc <TIM7_IRQHandler+0x54>)
 800a7dc:	801a      	strh	r2, [r3, #0]
 800a7de:	4b07      	ldr	r3, [pc, #28]	; (800a7fc <TIM7_IRQHandler+0x54>)
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d102      	bne.n	800a7ec <TIM7_IRQHandler+0x44>
		{
			pxMBPortCBTimerExpired();	// it is "xMBRTUTimerT35Expired()"
 800a7e6:	4b06      	ldr	r3, [pc, #24]	; (800a800 <TIM7_IRQHandler+0x58>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4798      	blx	r3

		}
	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a7ec:	4802      	ldr	r0, [pc, #8]	; (800a7f8 <TIM7_IRQHandler+0x50>)
 800a7ee:	f7f9 fc20 	bl	8004032 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a7f2:	bf00      	nop
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20004c84 	.word	0x20004c84
 800a7fc:	20004a92 	.word	0x20004a92
 800a800:	20004da0 	.word	0x20004da0

0800a804 <eMBRegInputCB>:
 *
 * @return result
 */

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	807b      	strh	r3, [r7, #2]
 800a810:	4613      	mov	r3, r2
 800a812:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a814:	2300      	movs	r3, #0
 800a816:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usSRegInBuf;
 800a818:	4b22      	ldr	r3, [pc, #136]	; (800a8a4 <eMBRegInputCB+0xa0>)
 800a81a:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = S_REG_INPUT_START;
 800a81c:	2300      	movs	r3, #0
 800a81e:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = S_REG_INPUT_NREGS;
 800a820:	2310      	movs	r3, #16
 800a822:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usSRegInStart;
 800a824:	4b20      	ldr	r3, [pc, #128]	; (800a8a8 <eMBRegInputCB+0xa4>)
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 800a82a:	887b      	ldrh	r3, [r7, #2]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 800a830:	887a      	ldrh	r2, [r7, #2]
 800a832:	89fb      	ldrh	r3, [r7, #14]
 800a834:	429a      	cmp	r2, r3
 800a836:	d32c      	bcc.n	800a892 <eMBRegInputCB+0x8e>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 800a838:	887a      	ldrh	r2, [r7, #2]
 800a83a:	883b      	ldrh	r3, [r7, #0]
 800a83c:	441a      	add	r2, r3
 800a83e:	89f9      	ldrh	r1, [r7, #14]
 800a840:	89bb      	ldrh	r3, [r7, #12]
 800a842:	440b      	add	r3, r1
 800a844:	429a      	cmp	r2, r3
 800a846:	dc24      	bgt.n	800a892 <eMBRegInputCB+0x8e>
    {
        iRegIndex = usAddress - usRegInStart;
 800a848:	887a      	ldrh	r2, [r7, #2]
 800a84a:	897b      	ldrh	r3, [r7, #10]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 800a850:	e01b      	b.n	800a88a <eMBRegInputCB+0x86>
        {
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] >> 8);
 800a852:	8abb      	ldrh	r3, [r7, #20]
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	4413      	add	r3, r2
 800a85a:	881b      	ldrh	r3, [r3, #0]
 800a85c:	0a1b      	lsrs	r3, r3, #8
 800a85e:	b299      	uxth	r1, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	1c5a      	adds	r2, r3, #1
 800a864:	607a      	str	r2, [r7, #4]
 800a866:	b2ca      	uxtb	r2, r1
 800a868:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ = (UCHAR) (pusRegInputBuf[iRegIndex] & 0xFF);
 800a86a:	8abb      	ldrh	r3, [r7, #20]
 800a86c:	005b      	lsls	r3, r3, #1
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	4413      	add	r3, r2
 800a872:	8819      	ldrh	r1, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	1c5a      	adds	r2, r3, #1
 800a878:	607a      	str	r2, [r7, #4]
 800a87a:	b2ca      	uxtb	r2, r1
 800a87c:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 800a87e:	8abb      	ldrh	r3, [r7, #20]
 800a880:	3301      	adds	r3, #1
 800a882:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 800a884:	883b      	ldrh	r3, [r7, #0]
 800a886:	3b01      	subs	r3, #1
 800a888:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 800a88a:	883b      	ldrh	r3, [r7, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e0      	bne.n	800a852 <eMBRegInputCB+0x4e>
    if ((usAddress >= REG_INPUT_START)
 800a890:	e001      	b.n	800a896 <eMBRegInputCB+0x92>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800a892:	2301      	movs	r3, #1
 800a894:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 800a896:	7dfb      	ldrb	r3, [r7, #23]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	371c      	adds	r7, #28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	20004dd8 	.word	0x20004dd8
 800a8a8:	20004a98 	.word	0x20004a98

0800a8ac <eMBRegHoldingCB>:
#include "task.h"
extern TaskHandle_t cmd_handler;

eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	817b      	strh	r3, [r7, #10]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	813b      	strh	r3, [r7, #8]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usSRegHoldBuf;
 800a8ca:	4b3c      	ldr	r3, [pc, #240]	; (800a9bc <eMBRegHoldingCB+0x110>)
 800a8cc:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = S_REG_HOLDING_START;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = S_REG_HOLDING_NREGS;
 800a8d2:	2310      	movs	r3, #16
 800a8d4:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usSRegHoldStart;
 800a8d6:	4b3a      	ldr	r3, [pc, #232]	; (800a9c0 <eMBRegHoldingCB+0x114>)
 800a8d8:	881b      	ldrh	r3, [r3, #0]
 800a8da:	827b      	strh	r3, [r7, #18]

    /* it already plus one in modbus function method. */
    usAddress--;
 800a8dc:	897b      	ldrh	r3, [r7, #10]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 800a8e2:	897a      	ldrh	r2, [r7, #10]
 800a8e4:	8afb      	ldrh	r3, [r7, #22]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d360      	bcc.n	800a9ac <eMBRegHoldingCB+0x100>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 800a8ea:	897a      	ldrh	r2, [r7, #10]
 800a8ec:	893b      	ldrh	r3, [r7, #8]
 800a8ee:	441a      	add	r2, r3
 800a8f0:	8af9      	ldrh	r1, [r7, #22]
 800a8f2:	8abb      	ldrh	r3, [r7, #20]
 800a8f4:	440b      	add	r3, r1
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	dc58      	bgt.n	800a9ac <eMBRegHoldingCB+0x100>
    {
        iRegIndex = usAddress - usRegHoldStart;
 800a8fa:	897a      	ldrh	r2, [r7, #10]
 800a8fc:	8a7b      	ldrh	r3, [r7, #18]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 800a902:	79fb      	ldrb	r3, [r7, #7]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d01e      	beq.n	800a946 <eMBRegHoldingCB+0x9a>
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d043      	beq.n	800a994 <eMBRegHoldingCB+0xe8>
 800a90c:	e046      	b.n	800a99c <eMBRegHoldingCB+0xf0>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 800a90e:	8bbb      	ldrh	r3, [r7, #28]
 800a910:	005b      	lsls	r3, r3, #1
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	4413      	add	r3, r2
 800a916:	881b      	ldrh	r3, [r3, #0]
 800a918:	0a1b      	lsrs	r3, r3, #8
 800a91a:	b299      	uxth	r1, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	60fa      	str	r2, [r7, #12]
 800a922:	b2ca      	uxtb	r2, r1
 800a924:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 800a926:	8bbb      	ldrh	r3, [r7, #28]
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	4413      	add	r3, r2
 800a92e:	8819      	ldrh	r1, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	60fa      	str	r2, [r7, #12]
 800a936:	b2ca      	uxtb	r2, r1
 800a938:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 800a93a:	8bbb      	ldrh	r3, [r7, #28]
 800a93c:	3301      	adds	r3, #1
 800a93e:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 800a940:	893b      	ldrh	r3, [r7, #8]
 800a942:	3b01      	subs	r3, #1
 800a944:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 800a946:	893b      	ldrh	r3, [r7, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1e0      	bne.n	800a90e <eMBRegHoldingCB+0x62>
            }
            break;
 800a94c:	e026      	b.n	800a99c <eMBRegHoldingCB+0xf0>

        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	60fa      	str	r2, [r7, #12]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	b29a      	uxth	r2, r3
 800a958:	8bbb      	ldrh	r3, [r7, #28]
 800a95a:	005b      	lsls	r3, r3, #1
 800a95c:	69b9      	ldr	r1, [r7, #24]
 800a95e:	440b      	add	r3, r1
 800a960:	0212      	lsls	r2, r2, #8
 800a962:	b292      	uxth	r2, r2
 800a964:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	60fa      	str	r2, [r7, #12]
 800a96c:	7818      	ldrb	r0, [r3, #0]
 800a96e:	8bbb      	ldrh	r3, [r7, #28]
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	4413      	add	r3, r2
 800a976:	8819      	ldrh	r1, [r3, #0]
 800a978:	b282      	uxth	r2, r0
 800a97a:	8bbb      	ldrh	r3, [r7, #28]
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	69b8      	ldr	r0, [r7, #24]
 800a980:	4403      	add	r3, r0
 800a982:	430a      	orrs	r2, r1
 800a984:	b292      	uxth	r2, r2
 800a986:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 800a988:	8bbb      	ldrh	r3, [r7, #28]
 800a98a:	3301      	adds	r3, #1
 800a98c:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 800a98e:	893b      	ldrh	r3, [r7, #8]
 800a990:	3b01      	subs	r3, #1
 800a992:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 800a994:	893b      	ldrh	r3, [r7, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d1d9      	bne.n	800a94e <eMBRegHoldingCB+0xa2>
            }
            break;
 800a99a:	bf00      	nop
        }

        //notify to cmd_task in project_task.c
        xTaskNotifyGive(cmd_handler);
 800a99c:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <eMBRegHoldingCB+0x118>)
 800a99e:	6818      	ldr	r0, [r3, #0]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	f7fd fe11 	bl	80085cc <xTaskGenericNotify>
 800a9aa:	e001      	b.n	800a9b0 <eMBRegHoldingCB+0x104>
    }
    else
    {
        eStatus = MB_ENOREG;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 800a9b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3720      	adds	r7, #32
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20004db8 	.word	0x20004db8
 800a9c0:	20004a9a 	.word	0x20004a9a
 800a9c4:	20000120 	.word	0x20000120

0800a9c8 <eMBRegCoilsCB>:
 *
 * @return result
 */
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNCoils, eMBRegisterMode eMode)
{
 800a9c8:	b590      	push	{r4, r7, lr}
 800a9ca:	b08b      	sub	sp, #44	; 0x2c
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	817b      	strh	r3, [r7, #10]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	813b      	strh	r3, [r7, #8]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucCoilBuf;
    USHORT          COIL_START;
    USHORT          COIL_NCOILS;
    USHORT          usCoilStart;
    iNReg =  usNCoils / 8 + 1;
 800a9e8:	893b      	ldrh	r3, [r7, #8]
 800a9ea:	08db      	lsrs	r3, r3, #3
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	847b      	strh	r3, [r7, #34]	; 0x22

    pucCoilBuf = ucSCoilBuf;
 800a9f2:	4b4a      	ldr	r3, [pc, #296]	; (800ab1c <eMBRegCoilsCB+0x154>)
 800a9f4:	61fb      	str	r3, [r7, #28]
    COIL_START = S_COIL_START;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	837b      	strh	r3, [r7, #26]
    COIL_NCOILS = S_COIL_NCOILS;
 800a9fa:	2308      	movs	r3, #8
 800a9fc:	833b      	strh	r3, [r7, #24]
    usCoilStart = usSCoilStart;
 800a9fe:	4b48      	ldr	r3, [pc, #288]	; (800ab20 <eMBRegCoilsCB+0x158>)
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	82fb      	strh	r3, [r7, #22]

    /* it already plus one in modbus function method. */
    usAddress--;
 800aa04:	897b      	ldrh	r3, [r7, #10]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	817b      	strh	r3, [r7, #10]

    if( ( usAddress >= COIL_START ) &&
 800aa0a:	897a      	ldrh	r2, [r7, #10]
 800aa0c:	8b7b      	ldrh	r3, [r7, #26]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d37b      	bcc.n	800ab0a <eMBRegCoilsCB+0x142>
        ( usAddress + usNCoils <= COIL_START + COIL_NCOILS ) )
 800aa12:	897a      	ldrh	r2, [r7, #10]
 800aa14:	893b      	ldrh	r3, [r7, #8]
 800aa16:	441a      	add	r2, r3
 800aa18:	8b79      	ldrh	r1, [r7, #26]
 800aa1a:	8b3b      	ldrh	r3, [r7, #24]
 800aa1c:	440b      	add	r3, r1
    if( ( usAddress >= COIL_START ) &&
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	dc73      	bgt.n	800ab0a <eMBRegCoilsCB+0x142>
    {
        iRegIndex = (USHORT) (usAddress - usCoilStart) / 8;
 800aa22:	897a      	ldrh	r2, [r7, #10]
 800aa24:	8afb      	ldrh	r3, [r7, #22]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	08db      	lsrs	r3, r3, #3
 800aa2c:	84bb      	strh	r3, [r7, #36]	; 0x24
        iRegBitIndex = (USHORT) (usAddress - usCoilStart) % 8;
 800aa2e:	897a      	ldrh	r2, [r7, #10]
 800aa30:	8afb      	ldrh	r3, [r7, #22]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	82bb      	strh	r3, [r7, #20]
        switch ( eMode )
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d015      	beq.n	800aa6e <eMBRegCoilsCB+0xa6>
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d045      	beq.n	800aad2 <eMBRegCoilsCB+0x10a>
 800aa46:	e063      	b.n	800ab10 <eMBRegCoilsCB+0x148>
        {
        /* read current coil values from the protocol stack. */
        case MB_REG_READ:
            while (iNReg > 0)
            {
                *pucRegBuffer++ = xMBUtilGetBits(&pucCoilBuf[iRegIndex++],
 800aa48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa4a:	1c5a      	adds	r2, r3, #1
 800aa4c:	84ba      	strh	r2, [r7, #36]	; 0x24
 800aa4e:	461a      	mov	r2, r3
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	1898      	adds	r0, r3, r2
 800aa54:	68fc      	ldr	r4, [r7, #12]
 800aa56:	1c63      	adds	r3, r4, #1
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	8abb      	ldrh	r3, [r7, #20]
 800aa5c:	2208      	movs	r2, #8
 800aa5e:	4619      	mov	r1, r3
 800aa60:	f7ff fabe 	bl	8009fe0 <xMBUtilGetBits>
 800aa64:	4603      	mov	r3, r0
 800aa66:	7023      	strb	r3, [r4, #0]
                        iRegBitIndex, 8);
                iNReg--;
 800aa68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 0)
 800aa6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e9      	bne.n	800aa48 <eMBRegCoilsCB+0x80>
            }
            pucRegBuffer--;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
            /* last coils */
            usNCoils = usNCoils % 8;
 800aa7a:	893b      	ldrh	r3, [r7, #8]
 800aa7c:	f003 0307 	and.w	r3, r3, #7
 800aa80:	813b      	strh	r3, [r7, #8]
            /* filling zero to high bit */
            *pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	893b      	ldrh	r3, [r7, #8]
 800aa8a:	f1c3 0308 	rsb	r3, r3, #8
 800aa8e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	893b      	ldrh	r3, [r7, #8]
 800aaa0:	f1c3 0308 	rsb	r3, r3, #8
 800aaa4:	fa42 f303 	asr.w	r3, r2, r3
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	701a      	strb	r2, [r3, #0]
            break;
 800aaae:	e02b      	b.n	800ab08 <eMBRegCoilsCB+0x140>

            /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800aab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aab2:	1c5a      	adds	r2, r3, #1
 800aab4:	84ba      	strh	r2, [r7, #36]	; 0x24
 800aab6:	461a      	mov	r2, r3
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	1898      	adds	r0, r3, r2
                        *pucRegBuffer++);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	1c5a      	adds	r2, r3, #1
 800aac0:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	8ab9      	ldrh	r1, [r7, #20]
 800aac6:	2208      	movs	r2, #8
 800aac8:	f7ff fa1e 	bl	8009f08 <xMBUtilSetBits>
                iNReg--;
 800aacc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aace:	3b01      	subs	r3, #1
 800aad0:	847b      	strh	r3, [r7, #34]	; 0x22
            while (iNReg > 1)
 800aad2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d8eb      	bhi.n	800aab0 <eMBRegCoilsCB+0xe8>
            }
            /* last coils */
            usNCoils = usNCoils % 8;
 800aad8:	893b      	ldrh	r3, [r7, #8]
 800aada:	f003 0307 	and.w	r3, r3, #7
 800aade:	813b      	strh	r3, [r7, #8]
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 800aae0:	893b      	ldrh	r3, [r7, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00f      	beq.n	800ab06 <eMBRegCoilsCB+0x13e>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800aae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	84ba      	strh	r2, [r7, #36]	; 0x24
 800aaec:	461a      	mov	r2, r3
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	1898      	adds	r0, r3, r2
 800aaf2:	893b      	ldrh	r3, [r7, #8]
 800aaf4:	b2dc      	uxtb	r4, r3
                        *pucRegBuffer++);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	1c5a      	adds	r2, r3, #1
 800aafa:	60fa      	str	r2, [r7, #12]
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	8ab9      	ldrh	r1, [r7, #20]
 800ab00:	4622      	mov	r2, r4
 800ab02:	f7ff fa01 	bl	8009f08 <xMBUtilSetBits>
            }
            break;
 800ab06:	bf00      	nop
        switch ( eMode )
 800ab08:	e002      	b.n	800ab10 <eMBRegCoilsCB+0x148>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return eStatus;
 800ab10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	372c      	adds	r7, #44	; 0x2c
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd90      	pop	{r4, r7, pc}
 800ab1c:	20004db0 	.word	0x20004db0
 800ab20:	20004a96 	.word	0x20004a96

0800ab24 <eMBRegDiscreteCB>:
 * @param usNDiscrete discrete number
 *
 * @return result
 */
eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 800ab24:	b590      	push	{r4, r7, lr}
 800ab26:	b089      	sub	sp, #36	; 0x24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	807b      	strh	r3, [r7, #2]
 800ab30:	4613      	mov	r3, r2
 800ab32:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 800ab34:	2300      	movs	r3, #0
 800ab36:	77fb      	strb	r3, [r7, #31]
    USHORT          iRegIndex , iRegBitIndex , iNReg;
    UCHAR *         pucDiscreteInputBuf;
    USHORT          DISCRETE_INPUT_START;
    USHORT          DISCRETE_INPUT_NDISCRETES;
    USHORT          usDiscreteInputStart;
    iNReg =  usNDiscrete / 8 + 1;
 800ab38:	883b      	ldrh	r3, [r7, #0]
 800ab3a:	08db      	lsrs	r3, r3, #3
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3301      	adds	r3, #1
 800ab40:	837b      	strh	r3, [r7, #26]

    pucDiscreteInputBuf = ucSDiscInBuf;
 800ab42:	4b30      	ldr	r3, [pc, #192]	; (800ac04 <eMBRegDiscreteCB+0xe0>)
 800ab44:	617b      	str	r3, [r7, #20]
    DISCRETE_INPUT_START = S_DISCRETE_INPUT_START;
 800ab46:	2300      	movs	r3, #0
 800ab48:	827b      	strh	r3, [r7, #18]
    DISCRETE_INPUT_NDISCRETES = S_DISCRETE_INPUT_NDISCRETES;
 800ab4a:	2308      	movs	r3, #8
 800ab4c:	823b      	strh	r3, [r7, #16]
    usDiscreteInputStart = usSDiscInStart;
 800ab4e:	4b2e      	ldr	r3, [pc, #184]	; (800ac08 <eMBRegDiscreteCB+0xe4>)
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	81fb      	strh	r3, [r7, #14]

    /* it already plus one in modbus function method. */
    usAddress--;
 800ab54:	887b      	ldrh	r3, [r7, #2]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= DISCRETE_INPUT_START)
 800ab5a:	887a      	ldrh	r2, [r7, #2]
 800ab5c:	8a7b      	ldrh	r3, [r7, #18]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d349      	bcc.n	800abf6 <eMBRegDiscreteCB+0xd2>
            && (usAddress + usNDiscrete    <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
 800ab62:	887a      	ldrh	r2, [r7, #2]
 800ab64:	883b      	ldrh	r3, [r7, #0]
 800ab66:	441a      	add	r2, r3
 800ab68:	8a79      	ldrh	r1, [r7, #18]
 800ab6a:	8a3b      	ldrh	r3, [r7, #16]
 800ab6c:	440b      	add	r3, r1
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	dc41      	bgt.n	800abf6 <eMBRegDiscreteCB+0xd2>
    {
        iRegIndex = (USHORT) (usAddress - usDiscreteInputStart) / 8;
 800ab72:	887a      	ldrh	r2, [r7, #2]
 800ab74:	89fb      	ldrh	r3, [r7, #14]
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	08db      	lsrs	r3, r3, #3
 800ab7c:	83bb      	strh	r3, [r7, #28]
        iRegBitIndex = (USHORT) (usAddress - usDiscreteInputStart) % 8;
 800ab7e:	887a      	ldrh	r2, [r7, #2]
 800ab80:	89fb      	ldrh	r3, [r7, #14]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	81bb      	strh	r3, [r7, #12]

        while (iNReg > 0)
 800ab8c:	e012      	b.n	800abb4 <eMBRegDiscreteCB+0x90>
        {
            *pucRegBuffer++ = xMBUtilGetBits(&pucDiscreteInputBuf[iRegIndex++],
 800ab8e:	8bbb      	ldrh	r3, [r7, #28]
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	83ba      	strh	r2, [r7, #28]
 800ab94:	461a      	mov	r2, r3
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	1898      	adds	r0, r3, r2
 800ab9a:	687c      	ldr	r4, [r7, #4]
 800ab9c:	1c63      	adds	r3, r4, #1
 800ab9e:	607b      	str	r3, [r7, #4]
 800aba0:	89bb      	ldrh	r3, [r7, #12]
 800aba2:	2208      	movs	r2, #8
 800aba4:	4619      	mov	r1, r3
 800aba6:	f7ff fa1b 	bl	8009fe0 <xMBUtilGetBits>
 800abaa:	4603      	mov	r3, r0
 800abac:	7023      	strb	r3, [r4, #0]
                    iRegBitIndex, 8);
            iNReg--;
 800abae:	8b7b      	ldrh	r3, [r7, #26]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	837b      	strh	r3, [r7, #26]
        while (iNReg > 0)
 800abb4:	8b7b      	ldrh	r3, [r7, #26]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1e9      	bne.n	800ab8e <eMBRegDiscreteCB+0x6a>
        }
        pucRegBuffer--;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	607b      	str	r3, [r7, #4]
        /* last discrete */
        usNDiscrete = usNDiscrete % 8;
 800abc0:	883b      	ldrh	r3, [r7, #0]
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	803b      	strh	r3, [r7, #0]
        /* filling zero to high bit */
        *pucRegBuffer = *pucRegBuffer << (8 - usNDiscrete);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	461a      	mov	r2, r3
 800abce:	883b      	ldrh	r3, [r7, #0]
 800abd0:	f1c3 0308 	rsb	r3, r3, #8
 800abd4:	fa02 f303 	lsl.w	r3, r2, r3
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	701a      	strb	r2, [r3, #0]
        *pucRegBuffer = *pucRegBuffer >> (8 - usNDiscrete);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	883b      	ldrh	r3, [r7, #0]
 800abe6:	f1c3 0308 	rsb	r3, r3, #8
 800abea:	fa42 f303 	asr.w	r3, r2, r3
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	701a      	strb	r2, [r3, #0]
 800abf4:	e001      	b.n	800abfa <eMBRegDiscreteCB+0xd6>
    }
    else
    {
        eStatus = MB_ENOREG;
 800abf6:	2301      	movs	r3, #1
 800abf8:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 800abfa:	7ffb      	ldrb	r3, [r7, #31]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3724      	adds	r7, #36	; 0x24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd90      	pop	{r4, r7, pc}
 800ac04:	20004db4 	.word	0x20004db4
 800ac08:	20004a94 	.word	0x20004a94

0800ac0c <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800ac18:	23ff      	movs	r3, #255	; 0xff
 800ac1a:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 800ac1c:	23ff      	movs	r3, #255	; 0xff
 800ac1e:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 800ac20:	e013      	b.n	800ac4a <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	781a      	ldrb	r2, [r3, #0]
 800ac2a:	7bbb      	ldrb	r3, [r7, #14]
 800ac2c:	4053      	eors	r3, r2
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800ac32:	4a0f      	ldr	r2, [pc, #60]	; (800ac70 <usMBCRC16+0x64>)
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	4413      	add	r3, r2
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
 800ac3c:	4053      	eors	r3, r2
 800ac3e:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 800ac40:	4a0c      	ldr	r2, [pc, #48]	; (800ac74 <usMBCRC16+0x68>)
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	4413      	add	r3, r2
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800ac4a:	887b      	ldrh	r3, [r7, #2]
 800ac4c:	1e5a      	subs	r2, r3, #1
 800ac4e:	807a      	strh	r2, [r7, #2]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e6      	bne.n	800ac22 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	021b      	lsls	r3, r3, #8
 800ac58:	b21a      	sxth	r2, r3
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	b21b      	sxth	r3, r3
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	b21b      	sxth	r3, r3
 800ac62:	b29b      	uxth	r3, r3
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	0800d240 	.word	0x0800d240
 800ac74:	0800d340 	.word	0x0800d340

0800ac78 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/*----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	603a      	str	r2, [r7, #0]
 800ac80:	461a      	mov	r2, r3
 800ac82:	4603      	mov	r3, r0
 800ac84:	71fb      	strb	r3, [r7, #7]
 800ac86:	460b      	mov	r3, r1
 800ac88:	71bb      	strb	r3, [r7, #6]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 800ac92:	f7ff fbe9 	bl	800a468 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800ac96:	797b      	ldrb	r3, [r7, #5]
 800ac98:	79b8      	ldrb	r0, [r7, #6]
 800ac9a:	2208      	movs	r2, #8
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	f7ff fca5 	bl	800a5ec <xMBPortSerialInit>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d002      	beq.n	800acae <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 800aca8:	2303      	movs	r3, #3
 800acaa:	73fb      	strb	r3, [r7, #15]
 800acac:	e016      	b.n	800acdc <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800acb4:	d902      	bls.n	800acbc <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800acb6:	2323      	movs	r3, #35	; 0x23
 800acb8:	60bb      	str	r3, [r7, #8]
 800acba:	e005      	b.n	800acc8 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	4a0a      	ldr	r2, [pc, #40]	; (800acec <eMBRTUInit+0x74>)
 800acc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc6:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	b29b      	uxth	r3, r3
 800accc:	4618      	mov	r0, r3
 800acce:	f7ff fd0f 	bl	800a6f0 <xMBPortTimersInit>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d001      	beq.n	800acdc <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 800acd8:	2303      	movs	r3, #3
 800acda:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800acdc:	f7ff fbca 	bl	800a474 <ExitCriticalSection>

    return eStatus;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	00177fa0 	.word	0x00177fa0

0800acf0 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800acf4:	f7ff fbb8 	bl	800a468 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 800acf8:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <eMBRTUStart+0x24>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 800acfe:	2100      	movs	r1, #0
 800ad00:	2001      	movs	r0, #1
 800ad02:	f7ff fc3b 	bl	800a57c <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 800ad06:	f7ff fd33 	bl	800a770 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 800ad0a:	f7ff fbb3 	bl	800a474 <ExitCriticalSection>
}
 800ad0e:	bf00      	nop
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20004a9d 	.word	0x20004a9d

0800ad18 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 800ad1c:	f7ff fba4 	bl	800a468 <EnterCriticalSection>
    vMBPortSerialEnable( FALSE, FALSE );
 800ad20:	2100      	movs	r1, #0
 800ad22:	2000      	movs	r0, #0
 800ad24:	f7ff fc2a 	bl	800a57c <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 800ad28:	f7ff fd34 	bl	800a794 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 800ad2c:	f7ff fba2 	bl	800a474 <ExitCriticalSection>
}
 800ad30:	bf00      	nop
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 800ad40:	2300      	movs	r3, #0
 800ad42:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 800ad44:	2300      	movs	r3, #0
 800ad46:	75fb      	strb	r3, [r7, #23]

    (void)(xFrameReceived);

    ENTER_CRITICAL_SECTION(  );
 800ad48:	f7ff fb8e 	bl	800a468 <EnterCriticalSection>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800ad4c:	4b1a      	ldr	r3, [pc, #104]	; (800adb8 <eMBRTUReceive+0x84>)
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	2bff      	cmp	r3, #255	; 0xff
 800ad54:	d905      	bls.n	800ad62 <eMBRTUReceive+0x2e>
 800ad56:	4b19      	ldr	r3, [pc, #100]	; (800adbc <eMBRTUReceive+0x88>)
 800ad58:	4a19      	ldr	r2, [pc, #100]	; (800adc0 <eMBRTUReceive+0x8c>)
 800ad5a:	219f      	movs	r1, #159	; 0x9f
 800ad5c:	4819      	ldr	r0, [pc, #100]	; (800adc4 <eMBRTUReceive+0x90>)
 800ad5e:	f000 f9a1 	bl	800b0a4 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800ad62:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <eMBRTUReceive+0x84>)
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d91b      	bls.n	800ada4 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 800ad6c:	4b12      	ldr	r3, [pc, #72]	; (800adb8 <eMBRTUReceive+0x84>)
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	4619      	mov	r1, r3
 800ad74:	4814      	ldr	r0, [pc, #80]	; (800adc8 <eMBRTUReceive+0x94>)
 800ad76:	f7ff ff49 	bl	800ac0c <usMBCRC16>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d111      	bne.n	800ada4 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 800ad80:	4b11      	ldr	r3, [pc, #68]	; (800adc8 <eMBRTUReceive+0x94>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 800ad8a:	4b0b      	ldr	r3, [pc, #44]	; (800adb8 <eMBRTUReceive+0x84>)
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	3b03      	subs	r3, #3
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	4a0c      	ldr	r2, [pc, #48]	; (800adcc <eMBRTUReceive+0x98>)
 800ad9c:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	75bb      	strb	r3, [r7, #22]
 800ada2:	e001      	b.n	800ada8 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 800ada4:	2305      	movs	r3, #5
 800ada6:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 800ada8:	f7ff fb64 	bl	800a474 <ExitCriticalSection>
    return eStatus;
 800adac:	7dfb      	ldrb	r3, [r7, #23]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	20004aa6 	.word	0x20004aa6
 800adbc:	0800d110 	.word	0x0800d110
 800adc0:	0800d440 	.word	0x0800d440
 800adc4:	0800d138 	.word	0x0800d138
 800adc8:	20004df8 	.word	0x20004df8
 800adcc:	20004df9 	.word	0x20004df9

0800add0 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	6039      	str	r1, [r7, #0]
 800adda:	71fb      	strb	r3, [r7, #7]
 800addc:	4613      	mov	r3, r2
 800adde:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 800ade0:	2300      	movs	r3, #0
 800ade2:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 800ade4:	f7ff fb40 	bl	800a468 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 800ade8:	4b26      	ldr	r3, [pc, #152]	; (800ae84 <eMBRTUSend+0xb4>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d13f      	bne.n	800ae72 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	4a24      	ldr	r2, [pc, #144]	; (800ae88 <eMBRTUSend+0xb8>)
 800adf8:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 800adfa:	4b24      	ldr	r3, [pc, #144]	; (800ae8c <eMBRTUSend+0xbc>)
 800adfc:	2201      	movs	r2, #1
 800adfe:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU.*/
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 800ae00:	4b21      	ldr	r3, [pc, #132]	; (800ae88 <eMBRTUSend+0xb8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	79fa      	ldrb	r2, [r7, #7]
 800ae06:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 800ae08:	4b20      	ldr	r3, [pc, #128]	; (800ae8c <eMBRTUSend+0xbc>)
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	88bb      	ldrh	r3, [r7, #4]
 800ae10:	4413      	add	r3, r2
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	4b1d      	ldr	r3, [pc, #116]	; (800ae8c <eMBRTUSend+0xbc>)
 800ae16:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 800ae18:	4b1b      	ldr	r3, [pc, #108]	; (800ae88 <eMBRTUSend+0xb8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a1b      	ldr	r2, [pc, #108]	; (800ae8c <eMBRTUSend+0xbc>)
 800ae1e:	8812      	ldrh	r2, [r2, #0]
 800ae20:	b292      	uxth	r2, r2
 800ae22:	4611      	mov	r1, r2
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff fef1 	bl	800ac0c <usMBCRC16>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800ae2e:	4b17      	ldr	r3, [pc, #92]	; (800ae8c <eMBRTUSend+0xbc>)
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	1c5a      	adds	r2, r3, #1
 800ae36:	b291      	uxth	r1, r2
 800ae38:	4a14      	ldr	r2, [pc, #80]	; (800ae8c <eMBRTUSend+0xbc>)
 800ae3a:	8011      	strh	r1, [r2, #0]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	89bb      	ldrh	r3, [r7, #12]
 800ae40:	b2d9      	uxtb	r1, r3
 800ae42:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <eMBRTUSend+0xc0>)
 800ae44:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800ae46:	89bb      	ldrh	r3, [r7, #12]
 800ae48:	0a1b      	lsrs	r3, r3, #8
 800ae4a:	b299      	uxth	r1, r3
 800ae4c:	4b0f      	ldr	r3, [pc, #60]	; (800ae8c <eMBRTUSend+0xbc>)
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	b290      	uxth	r0, r2
 800ae56:	4a0d      	ldr	r2, [pc, #52]	; (800ae8c <eMBRTUSend+0xbc>)
 800ae58:	8010      	strh	r0, [r2, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	b2c9      	uxtb	r1, r1
 800ae5e:	4b0c      	ldr	r3, [pc, #48]	; (800ae90 <eMBRTUSend+0xc0>)
 800ae60:	5499      	strb	r1, [r3, r2]
         */
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
#endif /*PORT_USE_UART2*/

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800ae62:	4b0c      	ldr	r3, [pc, #48]	; (800ae94 <eMBRTUSend+0xc4>)
 800ae64:	2201      	movs	r2, #1
 800ae66:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );//turn off receiver
 800ae68:	2101      	movs	r1, #1
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	f7ff fb86 	bl	800a57c <vMBPortSerialEnable>
 800ae70:	e001      	b.n	800ae76 <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 800ae72:	2305      	movs	r3, #5
 800ae74:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800ae76:	f7ff fafd 	bl	800a474 <ExitCriticalSection>
    return eStatus;
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	20004a9d 	.word	0x20004a9d
 800ae88:	20004aa0 	.word	0x20004aa0
 800ae8c:	20004aa4 	.word	0x20004aa4
 800ae90:	20004df8 	.word	0x20004df8
 800ae94:	20004a9c 	.word	0x20004a9c

0800ae98 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )		//run in UART_ISR - thread mode
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800aea2:	4b2a      	ldr	r3, [pc, #168]	; (800af4c <xMBRTUReceiveFSM+0xb4>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d005      	beq.n	800aeb8 <xMBRTUReceiveFSM+0x20>
 800aeac:	4b28      	ldr	r3, [pc, #160]	; (800af50 <xMBRTUReceiveFSM+0xb8>)
 800aeae:	4a29      	ldr	r2, [pc, #164]	; (800af54 <xMBRTUReceiveFSM+0xbc>)
 800aeb0:	21f1      	movs	r1, #241	; 0xf1
 800aeb2:	4829      	ldr	r0, [pc, #164]	; (800af58 <xMBRTUReceiveFSM+0xc0>)
 800aeb4:	f000 f8f6 	bl	800b0a4 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 800aeb8:	1dbb      	adds	r3, r7, #6
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7ff fbbc 	bl	800a638 <xMBPortSerialGetByte>

    switch ( eRcvState )
 800aec0:	4b26      	ldr	r3, [pc, #152]	; (800af5c <xMBRTUReceiveFSM+0xc4>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	d83b      	bhi.n	800af42 <xMBRTUReceiveFSM+0xaa>
 800aeca:	a201      	add	r2, pc, #4	; (adr r2, 800aed0 <xMBRTUReceiveFSM+0x38>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800aee1 	.word	0x0800aee1
 800aed4:	0800aeed 	.word	0x0800aeed
 800aed8:	0800af15 	.word	0x0800af15
 800aedc:	0800aee7 	.word	0x0800aee7
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 800aee0:	f7ff fc46 	bl	800a770 <vMBPortTimersEnable>
        break;
 800aee4:	e02d      	b.n	800af42 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800aee6:	f7ff fc43 	bl	800a770 <vMBPortTimersEnable>
        break;
 800aeea:	e02a      	b.n	800af42 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800aeec:	4b1c      	ldr	r3, [pc, #112]	; (800af60 <xMBRTUReceiveFSM+0xc8>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 800aef2:	4b1b      	ldr	r3, [pc, #108]	; (800af60 <xMBRTUReceiveFSM+0xc8>)
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	1c5a      	adds	r2, r3, #1
 800aefa:	b291      	uxth	r1, r2
 800aefc:	4a18      	ldr	r2, [pc, #96]	; (800af60 <xMBRTUReceiveFSM+0xc8>)
 800aefe:	8011      	strh	r1, [r2, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	79b9      	ldrb	r1, [r7, #6]
 800af04:	4b17      	ldr	r3, [pc, #92]	; (800af64 <xMBRTUReceiveFSM+0xcc>)
 800af06:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 800af08:	4b14      	ldr	r3, [pc, #80]	; (800af5c <xMBRTUReceiveFSM+0xc4>)
 800af0a:	2202      	movs	r2, #2
 800af0c:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800af0e:	f7ff fc2f 	bl	800a770 <vMBPortTimersEnable>
        break;
 800af12:	e016      	b.n	800af42 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 800af14:	4b12      	ldr	r3, [pc, #72]	; (800af60 <xMBRTUReceiveFSM+0xc8>)
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	2bff      	cmp	r3, #255	; 0xff
 800af1c:	d80b      	bhi.n	800af36 <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800af1e:	4b10      	ldr	r3, [pc, #64]	; (800af60 <xMBRTUReceiveFSM+0xc8>)
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	b29b      	uxth	r3, r3
 800af24:	1c5a      	adds	r2, r3, #1
 800af26:	b291      	uxth	r1, r2
 800af28:	4a0d      	ldr	r2, [pc, #52]	; (800af60 <xMBRTUReceiveFSM+0xc8>)
 800af2a:	8011      	strh	r1, [r2, #0]
 800af2c:	461a      	mov	r2, r3
 800af2e:	79b9      	ldrb	r1, [r7, #6]
 800af30:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <xMBRTUReceiveFSM+0xcc>)
 800af32:	5499      	strb	r1, [r3, r2]
 800af34:	e002      	b.n	800af3c <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 800af36:	4b09      	ldr	r3, [pc, #36]	; (800af5c <xMBRTUReceiveFSM+0xc4>)
 800af38:	2203      	movs	r2, #3
 800af3a:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 800af3c:	f7ff fc18 	bl	800a770 <vMBPortTimersEnable>
        break;
 800af40:	bf00      	nop
    }
    return xTaskNeedSwitch;
 800af42:	79fb      	ldrb	r3, [r7, #7]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20004a9c 	.word	0x20004a9c
 800af50:	0800d150 	.word	0x0800d150
 800af54:	0800d450 	.word	0x0800d450
 800af58:	0800d138 	.word	0x0800d138
 800af5c:	20004a9d 	.word	0x20004a9d
 800af60:	20004aa6 	.word	0x20004aa6
 800af64:	20004df8 	.word	0x20004df8

0800af68 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )	//run in UART_ISR - thread mode
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800af6e:	2300      	movs	r3, #0
 800af70:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 800af72:	4b22      	ldr	r3, [pc, #136]	; (800affc <xMBRTUTransmitFSM+0x94>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d006      	beq.n	800af8a <xMBRTUTransmitFSM+0x22>
 800af7c:	4b20      	ldr	r3, [pc, #128]	; (800b000 <xMBRTUTransmitFSM+0x98>)
 800af7e:	4a21      	ldr	r2, [pc, #132]	; (800b004 <xMBRTUTransmitFSM+0x9c>)
 800af80:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800af84:	4820      	ldr	r0, [pc, #128]	; (800b008 <xMBRTUTransmitFSM+0xa0>)
 800af86:	f000 f88d 	bl	800b0a4 <__assert_func>

    switch ( eSndState )
 800af8a:	4b20      	ldr	r3, [pc, #128]	; (800b00c <xMBRTUTransmitFSM+0xa4>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <xMBRTUTransmitFSM+0x32>
 800af94:	2b01      	cmp	r3, #1
 800af96:	d005      	beq.n	800afa4 <xMBRTUTransmitFSM+0x3c>
 800af98:	e02a      	b.n	800aff0 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 800af9a:	2100      	movs	r1, #0
 800af9c:	2001      	movs	r0, #1
 800af9e:	f7ff faed 	bl	800a57c <vMBPortSerialEnable>
        break;	
 800afa2:	e025      	b.n	800aff0 <xMBRTUTransmitFSM+0x88>
	
    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800afa4:	4b1a      	ldr	r3, [pc, #104]	; (800b010 <xMBRTUTransmitFSM+0xa8>)
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d013      	beq.n	800afd6 <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 800afae:	4b19      	ldr	r3, [pc, #100]	; (800b014 <xMBRTUTransmitFSM+0xac>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7ff fb2c 	bl	800a614 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 800afbc:	4b15      	ldr	r3, [pc, #84]	; (800b014 <xMBRTUTransmitFSM+0xac>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3301      	adds	r3, #1
 800afc2:	4a14      	ldr	r2, [pc, #80]	; (800b014 <xMBRTUTransmitFSM+0xac>)
 800afc4:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 800afc6:	4b12      	ldr	r3, [pc, #72]	; (800b010 <xMBRTUTransmitFSM+0xa8>)
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	b29b      	uxth	r3, r3
 800afcc:	3b01      	subs	r3, #1
 800afce:	b29a      	uxth	r2, r3
 800afd0:	4b0f      	ldr	r3, [pc, #60]	; (800b010 <xMBRTUTransmitFSM+0xa8>)
 800afd2:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */	
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 800afd4:	e00b      	b.n	800afee <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_SENT );
 800afd6:	2008      	movs	r0, #8
 800afd8:	f7ff fa78 	bl	800a4cc <xMBPortEventPostFromISR>
 800afdc:	4603      	mov	r3, r0
 800afde:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 800afe0:	2100      	movs	r1, #0
 800afe2:	2001      	movs	r0, #1
 800afe4:	f7ff faca 	bl	800a57c <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 800afe8:	4b08      	ldr	r3, [pc, #32]	; (800b00c <xMBRTUTransmitFSM+0xa4>)
 800afea:	2200      	movs	r2, #0
 800afec:	701a      	strb	r2, [r3, #0]
        break;
 800afee:	bf00      	nop
    }
	
    return xNeedPoll;
 800aff0:	79fb      	ldrb	r3, [r7, #7]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20004a9d 	.word	0x20004a9d
 800b000:	0800d16c 	.word	0x0800d16c
 800b004:	0800d464 	.word	0x0800d464
 800b008:	0800d138 	.word	0x0800d138
 800b00c:	20004a9c 	.word	0x20004a9c
 800b010:	20004aa4 	.word	0x20004aa4
 800b014:	20004aa0 	.word	0x20004aa0

0800b018 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )		// run in ISR handler-timer7
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800b01e:	2300      	movs	r3, #0
 800b020:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 800b022:	4b1c      	ldr	r3, [pc, #112]	; (800b094 <xMBRTUTimerT35Expired+0x7c>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d028      	beq.n	800b07e <xMBRTUTimerT35Expired+0x66>
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	dc10      	bgt.n	800b052 <xMBRTUTimerT35Expired+0x3a>
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <xMBRTUTimerT35Expired+0x22>
 800b034:	2b02      	cmp	r3, #2
 800b036:	d006      	beq.n	800b046 <xMBRTUTimerT35Expired+0x2e>
 800b038:	e00b      	b.n	800b052 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPostFromISR( EV_READY );
 800b03a:	2001      	movs	r0, #1
 800b03c:	f7ff fa46 	bl	800a4cc <xMBPortEventPostFromISR>
 800b040:	4603      	mov	r3, r0
 800b042:	71fb      	strb	r3, [r7, #7]
        break;
 800b044:	e01c      	b.n	800b080 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPostFromISR( EV_FRAME_RECEIVED );
 800b046:	2002      	movs	r0, #2
 800b048:	f7ff fa40 	bl	800a4cc <xMBPortEventPostFromISR>
 800b04c:	4603      	mov	r3, r0
 800b04e:	71fb      	strb	r3, [r7, #7]
        break;
 800b050:	e016      	b.n	800b080 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800b052:	4b10      	ldr	r3, [pc, #64]	; (800b094 <xMBRTUTimerT35Expired+0x7c>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d011      	beq.n	800b080 <xMBRTUTimerT35Expired+0x68>
 800b05c:	4b0d      	ldr	r3, [pc, #52]	; (800b094 <xMBRTUTimerT35Expired+0x7c>)
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b02      	cmp	r3, #2
 800b064:	d00c      	beq.n	800b080 <xMBRTUTimerT35Expired+0x68>
 800b066:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <xMBRTUTimerT35Expired+0x7c>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d007      	beq.n	800b080 <xMBRTUTimerT35Expired+0x68>
 800b070:	4b09      	ldr	r3, [pc, #36]	; (800b098 <xMBRTUTimerT35Expired+0x80>)
 800b072:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <xMBRTUTimerT35Expired+0x84>)
 800b074:	f240 1165 	movw	r1, #357	; 0x165
 800b078:	4809      	ldr	r0, [pc, #36]	; (800b0a0 <xMBRTUTimerT35Expired+0x88>)
 800b07a:	f000 f813 	bl	800b0a4 <__assert_func>
        break;
 800b07e:	bf00      	nop
                ( eRcvState == STATE_RX_RCV )  || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 800b080:	f7ff fb88 	bl	800a794 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800b084:	4b03      	ldr	r3, [pc, #12]	; (800b094 <xMBRTUTimerT35Expired+0x7c>)
 800b086:	2201      	movs	r2, #1
 800b088:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 800b08a:	79fb      	ldrb	r3, [r7, #7]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	20004a9d 	.word	0x20004a9d
 800b098:	0800d188 	.word	0x0800d188
 800b09c:	0800d478 	.word	0x0800d478
 800b0a0:	0800d138 	.word	0x0800d138

0800b0a4 <__assert_func>:
 800b0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0a6:	4614      	mov	r4, r2
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <__assert_func+0x2c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	68d8      	ldr	r0, [r3, #12]
 800b0b2:	b14c      	cbz	r4, 800b0c8 <__assert_func+0x24>
 800b0b4:	4b07      	ldr	r3, [pc, #28]	; (800b0d4 <__assert_func+0x30>)
 800b0b6:	9100      	str	r1, [sp, #0]
 800b0b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0bc:	4906      	ldr	r1, [pc, #24]	; (800b0d8 <__assert_func+0x34>)
 800b0be:	462b      	mov	r3, r5
 800b0c0:	f000 f814 	bl	800b0ec <fiprintf>
 800b0c4:	f000 fc0c 	bl	800b8e0 <abort>
 800b0c8:	4b04      	ldr	r3, [pc, #16]	; (800b0dc <__assert_func+0x38>)
 800b0ca:	461c      	mov	r4, r3
 800b0cc:	e7f3      	b.n	800b0b6 <__assert_func+0x12>
 800b0ce:	bf00      	nop
 800b0d0:	20000094 	.word	0x20000094
 800b0d4:	0800d48e 	.word	0x0800d48e
 800b0d8:	0800d49b 	.word	0x0800d49b
 800b0dc:	0800d4c9 	.word	0x0800d4c9

0800b0e0 <__errno>:
 800b0e0:	4b01      	ldr	r3, [pc, #4]	; (800b0e8 <__errno+0x8>)
 800b0e2:	6818      	ldr	r0, [r3, #0]
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20000094 	.word	0x20000094

0800b0ec <fiprintf>:
 800b0ec:	b40e      	push	{r1, r2, r3}
 800b0ee:	b503      	push	{r0, r1, lr}
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	ab03      	add	r3, sp, #12
 800b0f4:	4805      	ldr	r0, [pc, #20]	; (800b10c <fiprintf+0x20>)
 800b0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fa:	6800      	ldr	r0, [r0, #0]
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	f000 f86b 	bl	800b1d8 <_vfiprintf_r>
 800b102:	b002      	add	sp, #8
 800b104:	f85d eb04 	ldr.w	lr, [sp], #4
 800b108:	b003      	add	sp, #12
 800b10a:	4770      	bx	lr
 800b10c:	20000094 	.word	0x20000094

0800b110 <__libc_init_array>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	4d0d      	ldr	r5, [pc, #52]	; (800b148 <__libc_init_array+0x38>)
 800b114:	4c0d      	ldr	r4, [pc, #52]	; (800b14c <__libc_init_array+0x3c>)
 800b116:	1b64      	subs	r4, r4, r5
 800b118:	10a4      	asrs	r4, r4, #2
 800b11a:	2600      	movs	r6, #0
 800b11c:	42a6      	cmp	r6, r4
 800b11e:	d109      	bne.n	800b134 <__libc_init_array+0x24>
 800b120:	4d0b      	ldr	r5, [pc, #44]	; (800b150 <__libc_init_array+0x40>)
 800b122:	4c0c      	ldr	r4, [pc, #48]	; (800b154 <__libc_init_array+0x44>)
 800b124:	f001 ffa2 	bl	800d06c <_init>
 800b128:	1b64      	subs	r4, r4, r5
 800b12a:	10a4      	asrs	r4, r4, #2
 800b12c:	2600      	movs	r6, #0
 800b12e:	42a6      	cmp	r6, r4
 800b130:	d105      	bne.n	800b13e <__libc_init_array+0x2e>
 800b132:	bd70      	pop	{r4, r5, r6, pc}
 800b134:	f855 3b04 	ldr.w	r3, [r5], #4
 800b138:	4798      	blx	r3
 800b13a:	3601      	adds	r6, #1
 800b13c:	e7ee      	b.n	800b11c <__libc_init_array+0xc>
 800b13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b142:	4798      	blx	r3
 800b144:	3601      	adds	r6, #1
 800b146:	e7f2      	b.n	800b12e <__libc_init_array+0x1e>
 800b148:	0800d5b0 	.word	0x0800d5b0
 800b14c:	0800d5b0 	.word	0x0800d5b0
 800b150:	0800d5b0 	.word	0x0800d5b0
 800b154:	0800d5b4 	.word	0x0800d5b4

0800b158 <memcpy>:
 800b158:	440a      	add	r2, r1
 800b15a:	4291      	cmp	r1, r2
 800b15c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b160:	d100      	bne.n	800b164 <memcpy+0xc>
 800b162:	4770      	bx	lr
 800b164:	b510      	push	{r4, lr}
 800b166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b16a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b16e:	4291      	cmp	r1, r2
 800b170:	d1f9      	bne.n	800b166 <memcpy+0xe>
 800b172:	bd10      	pop	{r4, pc}

0800b174 <memset>:
 800b174:	4402      	add	r2, r0
 800b176:	4603      	mov	r3, r0
 800b178:	4293      	cmp	r3, r2
 800b17a:	d100      	bne.n	800b17e <memset+0xa>
 800b17c:	4770      	bx	lr
 800b17e:	f803 1b01 	strb.w	r1, [r3], #1
 800b182:	e7f9      	b.n	800b178 <memset+0x4>

0800b184 <__sfputc_r>:
 800b184:	6893      	ldr	r3, [r2, #8]
 800b186:	3b01      	subs	r3, #1
 800b188:	2b00      	cmp	r3, #0
 800b18a:	b410      	push	{r4}
 800b18c:	6093      	str	r3, [r2, #8]
 800b18e:	da08      	bge.n	800b1a2 <__sfputc_r+0x1e>
 800b190:	6994      	ldr	r4, [r2, #24]
 800b192:	42a3      	cmp	r3, r4
 800b194:	db01      	blt.n	800b19a <__sfputc_r+0x16>
 800b196:	290a      	cmp	r1, #10
 800b198:	d103      	bne.n	800b1a2 <__sfputc_r+0x1e>
 800b19a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b19e:	f000 badf 	b.w	800b760 <__swbuf_r>
 800b1a2:	6813      	ldr	r3, [r2, #0]
 800b1a4:	1c58      	adds	r0, r3, #1
 800b1a6:	6010      	str	r0, [r2, #0]
 800b1a8:	7019      	strb	r1, [r3, #0]
 800b1aa:	4608      	mov	r0, r1
 800b1ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <__sfputs_r>:
 800b1b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b4:	4606      	mov	r6, r0
 800b1b6:	460f      	mov	r7, r1
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	18d5      	adds	r5, r2, r3
 800b1bc:	42ac      	cmp	r4, r5
 800b1be:	d101      	bne.n	800b1c4 <__sfputs_r+0x12>
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	e007      	b.n	800b1d4 <__sfputs_r+0x22>
 800b1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c8:	463a      	mov	r2, r7
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f7ff ffda 	bl	800b184 <__sfputc_r>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d1f3      	bne.n	800b1bc <__sfputs_r+0xa>
 800b1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1d8 <_vfiprintf_r>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	460d      	mov	r5, r1
 800b1de:	b09d      	sub	sp, #116	; 0x74
 800b1e0:	4614      	mov	r4, r2
 800b1e2:	4698      	mov	r8, r3
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	b118      	cbz	r0, 800b1f0 <_vfiprintf_r+0x18>
 800b1e8:	6983      	ldr	r3, [r0, #24]
 800b1ea:	b90b      	cbnz	r3, 800b1f0 <_vfiprintf_r+0x18>
 800b1ec:	f000 fc9a 	bl	800bb24 <__sinit>
 800b1f0:	4b89      	ldr	r3, [pc, #548]	; (800b418 <_vfiprintf_r+0x240>)
 800b1f2:	429d      	cmp	r5, r3
 800b1f4:	d11b      	bne.n	800b22e <_vfiprintf_r+0x56>
 800b1f6:	6875      	ldr	r5, [r6, #4]
 800b1f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1fa:	07d9      	lsls	r1, r3, #31
 800b1fc:	d405      	bmi.n	800b20a <_vfiprintf_r+0x32>
 800b1fe:	89ab      	ldrh	r3, [r5, #12]
 800b200:	059a      	lsls	r2, r3, #22
 800b202:	d402      	bmi.n	800b20a <_vfiprintf_r+0x32>
 800b204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b206:	f000 fd2b 	bl	800bc60 <__retarget_lock_acquire_recursive>
 800b20a:	89ab      	ldrh	r3, [r5, #12]
 800b20c:	071b      	lsls	r3, r3, #28
 800b20e:	d501      	bpl.n	800b214 <_vfiprintf_r+0x3c>
 800b210:	692b      	ldr	r3, [r5, #16]
 800b212:	b9eb      	cbnz	r3, 800b250 <_vfiprintf_r+0x78>
 800b214:	4629      	mov	r1, r5
 800b216:	4630      	mov	r0, r6
 800b218:	f000 faf4 	bl	800b804 <__swsetup_r>
 800b21c:	b1c0      	cbz	r0, 800b250 <_vfiprintf_r+0x78>
 800b21e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b220:	07dc      	lsls	r4, r3, #31
 800b222:	d50e      	bpl.n	800b242 <_vfiprintf_r+0x6a>
 800b224:	f04f 30ff 	mov.w	r0, #4294967295
 800b228:	b01d      	add	sp, #116	; 0x74
 800b22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22e:	4b7b      	ldr	r3, [pc, #492]	; (800b41c <_vfiprintf_r+0x244>)
 800b230:	429d      	cmp	r5, r3
 800b232:	d101      	bne.n	800b238 <_vfiprintf_r+0x60>
 800b234:	68b5      	ldr	r5, [r6, #8]
 800b236:	e7df      	b.n	800b1f8 <_vfiprintf_r+0x20>
 800b238:	4b79      	ldr	r3, [pc, #484]	; (800b420 <_vfiprintf_r+0x248>)
 800b23a:	429d      	cmp	r5, r3
 800b23c:	bf08      	it	eq
 800b23e:	68f5      	ldreq	r5, [r6, #12]
 800b240:	e7da      	b.n	800b1f8 <_vfiprintf_r+0x20>
 800b242:	89ab      	ldrh	r3, [r5, #12]
 800b244:	0598      	lsls	r0, r3, #22
 800b246:	d4ed      	bmi.n	800b224 <_vfiprintf_r+0x4c>
 800b248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24a:	f000 fd0a 	bl	800bc62 <__retarget_lock_release_recursive>
 800b24e:	e7e9      	b.n	800b224 <_vfiprintf_r+0x4c>
 800b250:	2300      	movs	r3, #0
 800b252:	9309      	str	r3, [sp, #36]	; 0x24
 800b254:	2320      	movs	r3, #32
 800b256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b25a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b25e:	2330      	movs	r3, #48	; 0x30
 800b260:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b424 <_vfiprintf_r+0x24c>
 800b264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b268:	f04f 0901 	mov.w	r9, #1
 800b26c:	4623      	mov	r3, r4
 800b26e:	469a      	mov	sl, r3
 800b270:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b274:	b10a      	cbz	r2, 800b27a <_vfiprintf_r+0xa2>
 800b276:	2a25      	cmp	r2, #37	; 0x25
 800b278:	d1f9      	bne.n	800b26e <_vfiprintf_r+0x96>
 800b27a:	ebba 0b04 	subs.w	fp, sl, r4
 800b27e:	d00b      	beq.n	800b298 <_vfiprintf_r+0xc0>
 800b280:	465b      	mov	r3, fp
 800b282:	4622      	mov	r2, r4
 800b284:	4629      	mov	r1, r5
 800b286:	4630      	mov	r0, r6
 800b288:	f7ff ff93 	bl	800b1b2 <__sfputs_r>
 800b28c:	3001      	adds	r0, #1
 800b28e:	f000 80aa 	beq.w	800b3e6 <_vfiprintf_r+0x20e>
 800b292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b294:	445a      	add	r2, fp
 800b296:	9209      	str	r2, [sp, #36]	; 0x24
 800b298:	f89a 3000 	ldrb.w	r3, [sl]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f000 80a2 	beq.w	800b3e6 <_vfiprintf_r+0x20e>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ac:	f10a 0a01 	add.w	sl, sl, #1
 800b2b0:	9304      	str	r3, [sp, #16]
 800b2b2:	9307      	str	r3, [sp, #28]
 800b2b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2b8:	931a      	str	r3, [sp, #104]	; 0x68
 800b2ba:	4654      	mov	r4, sl
 800b2bc:	2205      	movs	r2, #5
 800b2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c2:	4858      	ldr	r0, [pc, #352]	; (800b424 <_vfiprintf_r+0x24c>)
 800b2c4:	f7f4 ffa4 	bl	8000210 <memchr>
 800b2c8:	9a04      	ldr	r2, [sp, #16]
 800b2ca:	b9d8      	cbnz	r0, 800b304 <_vfiprintf_r+0x12c>
 800b2cc:	06d1      	lsls	r1, r2, #27
 800b2ce:	bf44      	itt	mi
 800b2d0:	2320      	movmi	r3, #32
 800b2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d6:	0713      	lsls	r3, r2, #28
 800b2d8:	bf44      	itt	mi
 800b2da:	232b      	movmi	r3, #43	; 0x2b
 800b2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e6:	d015      	beq.n	800b314 <_vfiprintf_r+0x13c>
 800b2e8:	9a07      	ldr	r2, [sp, #28]
 800b2ea:	4654      	mov	r4, sl
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	f04f 0c0a 	mov.w	ip, #10
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f8:	3b30      	subs	r3, #48	; 0x30
 800b2fa:	2b09      	cmp	r3, #9
 800b2fc:	d94e      	bls.n	800b39c <_vfiprintf_r+0x1c4>
 800b2fe:	b1b0      	cbz	r0, 800b32e <_vfiprintf_r+0x156>
 800b300:	9207      	str	r2, [sp, #28]
 800b302:	e014      	b.n	800b32e <_vfiprintf_r+0x156>
 800b304:	eba0 0308 	sub.w	r3, r0, r8
 800b308:	fa09 f303 	lsl.w	r3, r9, r3
 800b30c:	4313      	orrs	r3, r2
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	46a2      	mov	sl, r4
 800b312:	e7d2      	b.n	800b2ba <_vfiprintf_r+0xe2>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	1d19      	adds	r1, r3, #4
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	9103      	str	r1, [sp, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	bfbb      	ittet	lt
 800b320:	425b      	neglt	r3, r3
 800b322:	f042 0202 	orrlt.w	r2, r2, #2
 800b326:	9307      	strge	r3, [sp, #28]
 800b328:	9307      	strlt	r3, [sp, #28]
 800b32a:	bfb8      	it	lt
 800b32c:	9204      	strlt	r2, [sp, #16]
 800b32e:	7823      	ldrb	r3, [r4, #0]
 800b330:	2b2e      	cmp	r3, #46	; 0x2e
 800b332:	d10c      	bne.n	800b34e <_vfiprintf_r+0x176>
 800b334:	7863      	ldrb	r3, [r4, #1]
 800b336:	2b2a      	cmp	r3, #42	; 0x2a
 800b338:	d135      	bne.n	800b3a6 <_vfiprintf_r+0x1ce>
 800b33a:	9b03      	ldr	r3, [sp, #12]
 800b33c:	1d1a      	adds	r2, r3, #4
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	9203      	str	r2, [sp, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	bfb8      	it	lt
 800b346:	f04f 33ff 	movlt.w	r3, #4294967295
 800b34a:	3402      	adds	r4, #2
 800b34c:	9305      	str	r3, [sp, #20]
 800b34e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b434 <_vfiprintf_r+0x25c>
 800b352:	7821      	ldrb	r1, [r4, #0]
 800b354:	2203      	movs	r2, #3
 800b356:	4650      	mov	r0, sl
 800b358:	f7f4 ff5a 	bl	8000210 <memchr>
 800b35c:	b140      	cbz	r0, 800b370 <_vfiprintf_r+0x198>
 800b35e:	2340      	movs	r3, #64	; 0x40
 800b360:	eba0 000a 	sub.w	r0, r0, sl
 800b364:	fa03 f000 	lsl.w	r0, r3, r0
 800b368:	9b04      	ldr	r3, [sp, #16]
 800b36a:	4303      	orrs	r3, r0
 800b36c:	3401      	adds	r4, #1
 800b36e:	9304      	str	r3, [sp, #16]
 800b370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b374:	482c      	ldr	r0, [pc, #176]	; (800b428 <_vfiprintf_r+0x250>)
 800b376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b37a:	2206      	movs	r2, #6
 800b37c:	f7f4 ff48 	bl	8000210 <memchr>
 800b380:	2800      	cmp	r0, #0
 800b382:	d03f      	beq.n	800b404 <_vfiprintf_r+0x22c>
 800b384:	4b29      	ldr	r3, [pc, #164]	; (800b42c <_vfiprintf_r+0x254>)
 800b386:	bb1b      	cbnz	r3, 800b3d0 <_vfiprintf_r+0x1f8>
 800b388:	9b03      	ldr	r3, [sp, #12]
 800b38a:	3307      	adds	r3, #7
 800b38c:	f023 0307 	bic.w	r3, r3, #7
 800b390:	3308      	adds	r3, #8
 800b392:	9303      	str	r3, [sp, #12]
 800b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b396:	443b      	add	r3, r7
 800b398:	9309      	str	r3, [sp, #36]	; 0x24
 800b39a:	e767      	b.n	800b26c <_vfiprintf_r+0x94>
 800b39c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3a0:	460c      	mov	r4, r1
 800b3a2:	2001      	movs	r0, #1
 800b3a4:	e7a5      	b.n	800b2f2 <_vfiprintf_r+0x11a>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	3401      	adds	r4, #1
 800b3aa:	9305      	str	r3, [sp, #20]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f04f 0c0a 	mov.w	ip, #10
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b8:	3a30      	subs	r2, #48	; 0x30
 800b3ba:	2a09      	cmp	r2, #9
 800b3bc:	d903      	bls.n	800b3c6 <_vfiprintf_r+0x1ee>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0c5      	beq.n	800b34e <_vfiprintf_r+0x176>
 800b3c2:	9105      	str	r1, [sp, #20]
 800b3c4:	e7c3      	b.n	800b34e <_vfiprintf_r+0x176>
 800b3c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e7f0      	b.n	800b3b2 <_vfiprintf_r+0x1da>
 800b3d0:	ab03      	add	r3, sp, #12
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	4b16      	ldr	r3, [pc, #88]	; (800b430 <_vfiprintf_r+0x258>)
 800b3d8:	a904      	add	r1, sp, #16
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f3af 8000 	nop.w
 800b3e0:	4607      	mov	r7, r0
 800b3e2:	1c78      	adds	r0, r7, #1
 800b3e4:	d1d6      	bne.n	800b394 <_vfiprintf_r+0x1bc>
 800b3e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3e8:	07d9      	lsls	r1, r3, #31
 800b3ea:	d405      	bmi.n	800b3f8 <_vfiprintf_r+0x220>
 800b3ec:	89ab      	ldrh	r3, [r5, #12]
 800b3ee:	059a      	lsls	r2, r3, #22
 800b3f0:	d402      	bmi.n	800b3f8 <_vfiprintf_r+0x220>
 800b3f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f4:	f000 fc35 	bl	800bc62 <__retarget_lock_release_recursive>
 800b3f8:	89ab      	ldrh	r3, [r5, #12]
 800b3fa:	065b      	lsls	r3, r3, #25
 800b3fc:	f53f af12 	bmi.w	800b224 <_vfiprintf_r+0x4c>
 800b400:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b402:	e711      	b.n	800b228 <_vfiprintf_r+0x50>
 800b404:	ab03      	add	r3, sp, #12
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	462a      	mov	r2, r5
 800b40a:	4b09      	ldr	r3, [pc, #36]	; (800b430 <_vfiprintf_r+0x258>)
 800b40c:	a904      	add	r1, sp, #16
 800b40e:	4630      	mov	r0, r6
 800b410:	f000 f880 	bl	800b514 <_printf_i>
 800b414:	e7e4      	b.n	800b3e0 <_vfiprintf_r+0x208>
 800b416:	bf00      	nop
 800b418:	0800d524 	.word	0x0800d524
 800b41c:	0800d544 	.word	0x0800d544
 800b420:	0800d504 	.word	0x0800d504
 800b424:	0800d4d0 	.word	0x0800d4d0
 800b428:	0800d4da 	.word	0x0800d4da
 800b42c:	00000000 	.word	0x00000000
 800b430:	0800b1b3 	.word	0x0800b1b3
 800b434:	0800d4d6 	.word	0x0800d4d6

0800b438 <_printf_common>:
 800b438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b43c:	4616      	mov	r6, r2
 800b43e:	4699      	mov	r9, r3
 800b440:	688a      	ldr	r2, [r1, #8]
 800b442:	690b      	ldr	r3, [r1, #16]
 800b444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b448:	4293      	cmp	r3, r2
 800b44a:	bfb8      	it	lt
 800b44c:	4613      	movlt	r3, r2
 800b44e:	6033      	str	r3, [r6, #0]
 800b450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b454:	4607      	mov	r7, r0
 800b456:	460c      	mov	r4, r1
 800b458:	b10a      	cbz	r2, 800b45e <_printf_common+0x26>
 800b45a:	3301      	adds	r3, #1
 800b45c:	6033      	str	r3, [r6, #0]
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	0699      	lsls	r1, r3, #26
 800b462:	bf42      	ittt	mi
 800b464:	6833      	ldrmi	r3, [r6, #0]
 800b466:	3302      	addmi	r3, #2
 800b468:	6033      	strmi	r3, [r6, #0]
 800b46a:	6825      	ldr	r5, [r4, #0]
 800b46c:	f015 0506 	ands.w	r5, r5, #6
 800b470:	d106      	bne.n	800b480 <_printf_common+0x48>
 800b472:	f104 0a19 	add.w	sl, r4, #25
 800b476:	68e3      	ldr	r3, [r4, #12]
 800b478:	6832      	ldr	r2, [r6, #0]
 800b47a:	1a9b      	subs	r3, r3, r2
 800b47c:	42ab      	cmp	r3, r5
 800b47e:	dc26      	bgt.n	800b4ce <_printf_common+0x96>
 800b480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b484:	1e13      	subs	r3, r2, #0
 800b486:	6822      	ldr	r2, [r4, #0]
 800b488:	bf18      	it	ne
 800b48a:	2301      	movne	r3, #1
 800b48c:	0692      	lsls	r2, r2, #26
 800b48e:	d42b      	bmi.n	800b4e8 <_printf_common+0xb0>
 800b490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b494:	4649      	mov	r1, r9
 800b496:	4638      	mov	r0, r7
 800b498:	47c0      	blx	r8
 800b49a:	3001      	adds	r0, #1
 800b49c:	d01e      	beq.n	800b4dc <_printf_common+0xa4>
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	68e5      	ldr	r5, [r4, #12]
 800b4a2:	6832      	ldr	r2, [r6, #0]
 800b4a4:	f003 0306 	and.w	r3, r3, #6
 800b4a8:	2b04      	cmp	r3, #4
 800b4aa:	bf08      	it	eq
 800b4ac:	1aad      	subeq	r5, r5, r2
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	6922      	ldr	r2, [r4, #16]
 800b4b2:	bf0c      	ite	eq
 800b4b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4b8:	2500      	movne	r5, #0
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	bfc4      	itt	gt
 800b4be:	1a9b      	subgt	r3, r3, r2
 800b4c0:	18ed      	addgt	r5, r5, r3
 800b4c2:	2600      	movs	r6, #0
 800b4c4:	341a      	adds	r4, #26
 800b4c6:	42b5      	cmp	r5, r6
 800b4c8:	d11a      	bne.n	800b500 <_printf_common+0xc8>
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	e008      	b.n	800b4e0 <_printf_common+0xa8>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4652      	mov	r2, sl
 800b4d2:	4649      	mov	r1, r9
 800b4d4:	4638      	mov	r0, r7
 800b4d6:	47c0      	blx	r8
 800b4d8:	3001      	adds	r0, #1
 800b4da:	d103      	bne.n	800b4e4 <_printf_common+0xac>
 800b4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e4:	3501      	adds	r5, #1
 800b4e6:	e7c6      	b.n	800b476 <_printf_common+0x3e>
 800b4e8:	18e1      	adds	r1, r4, r3
 800b4ea:	1c5a      	adds	r2, r3, #1
 800b4ec:	2030      	movs	r0, #48	; 0x30
 800b4ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4f2:	4422      	add	r2, r4
 800b4f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4fc:	3302      	adds	r3, #2
 800b4fe:	e7c7      	b.n	800b490 <_printf_common+0x58>
 800b500:	2301      	movs	r3, #1
 800b502:	4622      	mov	r2, r4
 800b504:	4649      	mov	r1, r9
 800b506:	4638      	mov	r0, r7
 800b508:	47c0      	blx	r8
 800b50a:	3001      	adds	r0, #1
 800b50c:	d0e6      	beq.n	800b4dc <_printf_common+0xa4>
 800b50e:	3601      	adds	r6, #1
 800b510:	e7d9      	b.n	800b4c6 <_printf_common+0x8e>
	...

0800b514 <_printf_i>:
 800b514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b518:	460c      	mov	r4, r1
 800b51a:	4691      	mov	r9, r2
 800b51c:	7e27      	ldrb	r7, [r4, #24]
 800b51e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b520:	2f78      	cmp	r7, #120	; 0x78
 800b522:	4680      	mov	r8, r0
 800b524:	469a      	mov	sl, r3
 800b526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b52a:	d807      	bhi.n	800b53c <_printf_i+0x28>
 800b52c:	2f62      	cmp	r7, #98	; 0x62
 800b52e:	d80a      	bhi.n	800b546 <_printf_i+0x32>
 800b530:	2f00      	cmp	r7, #0
 800b532:	f000 80d8 	beq.w	800b6e6 <_printf_i+0x1d2>
 800b536:	2f58      	cmp	r7, #88	; 0x58
 800b538:	f000 80a3 	beq.w	800b682 <_printf_i+0x16e>
 800b53c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b544:	e03a      	b.n	800b5bc <_printf_i+0xa8>
 800b546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b54a:	2b15      	cmp	r3, #21
 800b54c:	d8f6      	bhi.n	800b53c <_printf_i+0x28>
 800b54e:	a001      	add	r0, pc, #4	; (adr r0, 800b554 <_printf_i+0x40>)
 800b550:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b554:	0800b5ad 	.word	0x0800b5ad
 800b558:	0800b5c1 	.word	0x0800b5c1
 800b55c:	0800b53d 	.word	0x0800b53d
 800b560:	0800b53d 	.word	0x0800b53d
 800b564:	0800b53d 	.word	0x0800b53d
 800b568:	0800b53d 	.word	0x0800b53d
 800b56c:	0800b5c1 	.word	0x0800b5c1
 800b570:	0800b53d 	.word	0x0800b53d
 800b574:	0800b53d 	.word	0x0800b53d
 800b578:	0800b53d 	.word	0x0800b53d
 800b57c:	0800b53d 	.word	0x0800b53d
 800b580:	0800b6cd 	.word	0x0800b6cd
 800b584:	0800b5f1 	.word	0x0800b5f1
 800b588:	0800b6af 	.word	0x0800b6af
 800b58c:	0800b53d 	.word	0x0800b53d
 800b590:	0800b53d 	.word	0x0800b53d
 800b594:	0800b6ef 	.word	0x0800b6ef
 800b598:	0800b53d 	.word	0x0800b53d
 800b59c:	0800b5f1 	.word	0x0800b5f1
 800b5a0:	0800b53d 	.word	0x0800b53d
 800b5a4:	0800b53d 	.word	0x0800b53d
 800b5a8:	0800b6b7 	.word	0x0800b6b7
 800b5ac:	680b      	ldr	r3, [r1, #0]
 800b5ae:	1d1a      	adds	r2, r3, #4
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	600a      	str	r2, [r1, #0]
 800b5b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e0a3      	b.n	800b708 <_printf_i+0x1f4>
 800b5c0:	6825      	ldr	r5, [r4, #0]
 800b5c2:	6808      	ldr	r0, [r1, #0]
 800b5c4:	062e      	lsls	r6, r5, #24
 800b5c6:	f100 0304 	add.w	r3, r0, #4
 800b5ca:	d50a      	bpl.n	800b5e2 <_printf_i+0xce>
 800b5cc:	6805      	ldr	r5, [r0, #0]
 800b5ce:	600b      	str	r3, [r1, #0]
 800b5d0:	2d00      	cmp	r5, #0
 800b5d2:	da03      	bge.n	800b5dc <_printf_i+0xc8>
 800b5d4:	232d      	movs	r3, #45	; 0x2d
 800b5d6:	426d      	negs	r5, r5
 800b5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5dc:	485e      	ldr	r0, [pc, #376]	; (800b758 <_printf_i+0x244>)
 800b5de:	230a      	movs	r3, #10
 800b5e0:	e019      	b.n	800b616 <_printf_i+0x102>
 800b5e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5e6:	6805      	ldr	r5, [r0, #0]
 800b5e8:	600b      	str	r3, [r1, #0]
 800b5ea:	bf18      	it	ne
 800b5ec:	b22d      	sxthne	r5, r5
 800b5ee:	e7ef      	b.n	800b5d0 <_printf_i+0xbc>
 800b5f0:	680b      	ldr	r3, [r1, #0]
 800b5f2:	6825      	ldr	r5, [r4, #0]
 800b5f4:	1d18      	adds	r0, r3, #4
 800b5f6:	6008      	str	r0, [r1, #0]
 800b5f8:	0628      	lsls	r0, r5, #24
 800b5fa:	d501      	bpl.n	800b600 <_printf_i+0xec>
 800b5fc:	681d      	ldr	r5, [r3, #0]
 800b5fe:	e002      	b.n	800b606 <_printf_i+0xf2>
 800b600:	0669      	lsls	r1, r5, #25
 800b602:	d5fb      	bpl.n	800b5fc <_printf_i+0xe8>
 800b604:	881d      	ldrh	r5, [r3, #0]
 800b606:	4854      	ldr	r0, [pc, #336]	; (800b758 <_printf_i+0x244>)
 800b608:	2f6f      	cmp	r7, #111	; 0x6f
 800b60a:	bf0c      	ite	eq
 800b60c:	2308      	moveq	r3, #8
 800b60e:	230a      	movne	r3, #10
 800b610:	2100      	movs	r1, #0
 800b612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b616:	6866      	ldr	r6, [r4, #4]
 800b618:	60a6      	str	r6, [r4, #8]
 800b61a:	2e00      	cmp	r6, #0
 800b61c:	bfa2      	ittt	ge
 800b61e:	6821      	ldrge	r1, [r4, #0]
 800b620:	f021 0104 	bicge.w	r1, r1, #4
 800b624:	6021      	strge	r1, [r4, #0]
 800b626:	b90d      	cbnz	r5, 800b62c <_printf_i+0x118>
 800b628:	2e00      	cmp	r6, #0
 800b62a:	d04d      	beq.n	800b6c8 <_printf_i+0x1b4>
 800b62c:	4616      	mov	r6, r2
 800b62e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b632:	fb03 5711 	mls	r7, r3, r1, r5
 800b636:	5dc7      	ldrb	r7, [r0, r7]
 800b638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b63c:	462f      	mov	r7, r5
 800b63e:	42bb      	cmp	r3, r7
 800b640:	460d      	mov	r5, r1
 800b642:	d9f4      	bls.n	800b62e <_printf_i+0x11a>
 800b644:	2b08      	cmp	r3, #8
 800b646:	d10b      	bne.n	800b660 <_printf_i+0x14c>
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	07df      	lsls	r7, r3, #31
 800b64c:	d508      	bpl.n	800b660 <_printf_i+0x14c>
 800b64e:	6923      	ldr	r3, [r4, #16]
 800b650:	6861      	ldr	r1, [r4, #4]
 800b652:	4299      	cmp	r1, r3
 800b654:	bfde      	ittt	le
 800b656:	2330      	movle	r3, #48	; 0x30
 800b658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b65c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b660:	1b92      	subs	r2, r2, r6
 800b662:	6122      	str	r2, [r4, #16]
 800b664:	f8cd a000 	str.w	sl, [sp]
 800b668:	464b      	mov	r3, r9
 800b66a:	aa03      	add	r2, sp, #12
 800b66c:	4621      	mov	r1, r4
 800b66e:	4640      	mov	r0, r8
 800b670:	f7ff fee2 	bl	800b438 <_printf_common>
 800b674:	3001      	adds	r0, #1
 800b676:	d14c      	bne.n	800b712 <_printf_i+0x1fe>
 800b678:	f04f 30ff 	mov.w	r0, #4294967295
 800b67c:	b004      	add	sp, #16
 800b67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b682:	4835      	ldr	r0, [pc, #212]	; (800b758 <_printf_i+0x244>)
 800b684:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	680e      	ldr	r6, [r1, #0]
 800b68c:	061f      	lsls	r7, r3, #24
 800b68e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b692:	600e      	str	r6, [r1, #0]
 800b694:	d514      	bpl.n	800b6c0 <_printf_i+0x1ac>
 800b696:	07d9      	lsls	r1, r3, #31
 800b698:	bf44      	itt	mi
 800b69a:	f043 0320 	orrmi.w	r3, r3, #32
 800b69e:	6023      	strmi	r3, [r4, #0]
 800b6a0:	b91d      	cbnz	r5, 800b6aa <_printf_i+0x196>
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	f023 0320 	bic.w	r3, r3, #32
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	2310      	movs	r3, #16
 800b6ac:	e7b0      	b.n	800b610 <_printf_i+0xfc>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	f043 0320 	orr.w	r3, r3, #32
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	2378      	movs	r3, #120	; 0x78
 800b6b8:	4828      	ldr	r0, [pc, #160]	; (800b75c <_printf_i+0x248>)
 800b6ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6be:	e7e3      	b.n	800b688 <_printf_i+0x174>
 800b6c0:	065e      	lsls	r6, r3, #25
 800b6c2:	bf48      	it	mi
 800b6c4:	b2ad      	uxthmi	r5, r5
 800b6c6:	e7e6      	b.n	800b696 <_printf_i+0x182>
 800b6c8:	4616      	mov	r6, r2
 800b6ca:	e7bb      	b.n	800b644 <_printf_i+0x130>
 800b6cc:	680b      	ldr	r3, [r1, #0]
 800b6ce:	6826      	ldr	r6, [r4, #0]
 800b6d0:	6960      	ldr	r0, [r4, #20]
 800b6d2:	1d1d      	adds	r5, r3, #4
 800b6d4:	600d      	str	r5, [r1, #0]
 800b6d6:	0635      	lsls	r5, r6, #24
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	d501      	bpl.n	800b6e0 <_printf_i+0x1cc>
 800b6dc:	6018      	str	r0, [r3, #0]
 800b6de:	e002      	b.n	800b6e6 <_printf_i+0x1d2>
 800b6e0:	0671      	lsls	r1, r6, #25
 800b6e2:	d5fb      	bpl.n	800b6dc <_printf_i+0x1c8>
 800b6e4:	8018      	strh	r0, [r3, #0]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	6123      	str	r3, [r4, #16]
 800b6ea:	4616      	mov	r6, r2
 800b6ec:	e7ba      	b.n	800b664 <_printf_i+0x150>
 800b6ee:	680b      	ldr	r3, [r1, #0]
 800b6f0:	1d1a      	adds	r2, r3, #4
 800b6f2:	600a      	str	r2, [r1, #0]
 800b6f4:	681e      	ldr	r6, [r3, #0]
 800b6f6:	6862      	ldr	r2, [r4, #4]
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	f7f4 fd88 	bl	8000210 <memchr>
 800b700:	b108      	cbz	r0, 800b706 <_printf_i+0x1f2>
 800b702:	1b80      	subs	r0, r0, r6
 800b704:	6060      	str	r0, [r4, #4]
 800b706:	6863      	ldr	r3, [r4, #4]
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	2300      	movs	r3, #0
 800b70c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b710:	e7a8      	b.n	800b664 <_printf_i+0x150>
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	4632      	mov	r2, r6
 800b716:	4649      	mov	r1, r9
 800b718:	4640      	mov	r0, r8
 800b71a:	47d0      	blx	sl
 800b71c:	3001      	adds	r0, #1
 800b71e:	d0ab      	beq.n	800b678 <_printf_i+0x164>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	079b      	lsls	r3, r3, #30
 800b724:	d413      	bmi.n	800b74e <_printf_i+0x23a>
 800b726:	68e0      	ldr	r0, [r4, #12]
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	4298      	cmp	r0, r3
 800b72c:	bfb8      	it	lt
 800b72e:	4618      	movlt	r0, r3
 800b730:	e7a4      	b.n	800b67c <_printf_i+0x168>
 800b732:	2301      	movs	r3, #1
 800b734:	4632      	mov	r2, r6
 800b736:	4649      	mov	r1, r9
 800b738:	4640      	mov	r0, r8
 800b73a:	47d0      	blx	sl
 800b73c:	3001      	adds	r0, #1
 800b73e:	d09b      	beq.n	800b678 <_printf_i+0x164>
 800b740:	3501      	adds	r5, #1
 800b742:	68e3      	ldr	r3, [r4, #12]
 800b744:	9903      	ldr	r1, [sp, #12]
 800b746:	1a5b      	subs	r3, r3, r1
 800b748:	42ab      	cmp	r3, r5
 800b74a:	dcf2      	bgt.n	800b732 <_printf_i+0x21e>
 800b74c:	e7eb      	b.n	800b726 <_printf_i+0x212>
 800b74e:	2500      	movs	r5, #0
 800b750:	f104 0619 	add.w	r6, r4, #25
 800b754:	e7f5      	b.n	800b742 <_printf_i+0x22e>
 800b756:	bf00      	nop
 800b758:	0800d4e1 	.word	0x0800d4e1
 800b75c:	0800d4f2 	.word	0x0800d4f2

0800b760 <__swbuf_r>:
 800b760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b762:	460e      	mov	r6, r1
 800b764:	4614      	mov	r4, r2
 800b766:	4605      	mov	r5, r0
 800b768:	b118      	cbz	r0, 800b772 <__swbuf_r+0x12>
 800b76a:	6983      	ldr	r3, [r0, #24]
 800b76c:	b90b      	cbnz	r3, 800b772 <__swbuf_r+0x12>
 800b76e:	f000 f9d9 	bl	800bb24 <__sinit>
 800b772:	4b21      	ldr	r3, [pc, #132]	; (800b7f8 <__swbuf_r+0x98>)
 800b774:	429c      	cmp	r4, r3
 800b776:	d12b      	bne.n	800b7d0 <__swbuf_r+0x70>
 800b778:	686c      	ldr	r4, [r5, #4]
 800b77a:	69a3      	ldr	r3, [r4, #24]
 800b77c:	60a3      	str	r3, [r4, #8]
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	071a      	lsls	r2, r3, #28
 800b782:	d52f      	bpl.n	800b7e4 <__swbuf_r+0x84>
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	b36b      	cbz	r3, 800b7e4 <__swbuf_r+0x84>
 800b788:	6923      	ldr	r3, [r4, #16]
 800b78a:	6820      	ldr	r0, [r4, #0]
 800b78c:	1ac0      	subs	r0, r0, r3
 800b78e:	6963      	ldr	r3, [r4, #20]
 800b790:	b2f6      	uxtb	r6, r6
 800b792:	4283      	cmp	r3, r0
 800b794:	4637      	mov	r7, r6
 800b796:	dc04      	bgt.n	800b7a2 <__swbuf_r+0x42>
 800b798:	4621      	mov	r1, r4
 800b79a:	4628      	mov	r0, r5
 800b79c:	f000 f92e 	bl	800b9fc <_fflush_r>
 800b7a0:	bb30      	cbnz	r0, 800b7f0 <__swbuf_r+0x90>
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	60a3      	str	r3, [r4, #8]
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	1c5a      	adds	r2, r3, #1
 800b7ac:	6022      	str	r2, [r4, #0]
 800b7ae:	701e      	strb	r6, [r3, #0]
 800b7b0:	6963      	ldr	r3, [r4, #20]
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	4283      	cmp	r3, r0
 800b7b6:	d004      	beq.n	800b7c2 <__swbuf_r+0x62>
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	07db      	lsls	r3, r3, #31
 800b7bc:	d506      	bpl.n	800b7cc <__swbuf_r+0x6c>
 800b7be:	2e0a      	cmp	r6, #10
 800b7c0:	d104      	bne.n	800b7cc <__swbuf_r+0x6c>
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f000 f919 	bl	800b9fc <_fflush_r>
 800b7ca:	b988      	cbnz	r0, 800b7f0 <__swbuf_r+0x90>
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d0:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <__swbuf_r+0x9c>)
 800b7d2:	429c      	cmp	r4, r3
 800b7d4:	d101      	bne.n	800b7da <__swbuf_r+0x7a>
 800b7d6:	68ac      	ldr	r4, [r5, #8]
 800b7d8:	e7cf      	b.n	800b77a <__swbuf_r+0x1a>
 800b7da:	4b09      	ldr	r3, [pc, #36]	; (800b800 <__swbuf_r+0xa0>)
 800b7dc:	429c      	cmp	r4, r3
 800b7de:	bf08      	it	eq
 800b7e0:	68ec      	ldreq	r4, [r5, #12]
 800b7e2:	e7ca      	b.n	800b77a <__swbuf_r+0x1a>
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f000 f80c 	bl	800b804 <__swsetup_r>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d0cb      	beq.n	800b788 <__swbuf_r+0x28>
 800b7f0:	f04f 37ff 	mov.w	r7, #4294967295
 800b7f4:	e7ea      	b.n	800b7cc <__swbuf_r+0x6c>
 800b7f6:	bf00      	nop
 800b7f8:	0800d524 	.word	0x0800d524
 800b7fc:	0800d544 	.word	0x0800d544
 800b800:	0800d504 	.word	0x0800d504

0800b804 <__swsetup_r>:
 800b804:	4b32      	ldr	r3, [pc, #200]	; (800b8d0 <__swsetup_r+0xcc>)
 800b806:	b570      	push	{r4, r5, r6, lr}
 800b808:	681d      	ldr	r5, [r3, #0]
 800b80a:	4606      	mov	r6, r0
 800b80c:	460c      	mov	r4, r1
 800b80e:	b125      	cbz	r5, 800b81a <__swsetup_r+0x16>
 800b810:	69ab      	ldr	r3, [r5, #24]
 800b812:	b913      	cbnz	r3, 800b81a <__swsetup_r+0x16>
 800b814:	4628      	mov	r0, r5
 800b816:	f000 f985 	bl	800bb24 <__sinit>
 800b81a:	4b2e      	ldr	r3, [pc, #184]	; (800b8d4 <__swsetup_r+0xd0>)
 800b81c:	429c      	cmp	r4, r3
 800b81e:	d10f      	bne.n	800b840 <__swsetup_r+0x3c>
 800b820:	686c      	ldr	r4, [r5, #4]
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b828:	0719      	lsls	r1, r3, #28
 800b82a:	d42c      	bmi.n	800b886 <__swsetup_r+0x82>
 800b82c:	06dd      	lsls	r5, r3, #27
 800b82e:	d411      	bmi.n	800b854 <__swsetup_r+0x50>
 800b830:	2309      	movs	r3, #9
 800b832:	6033      	str	r3, [r6, #0]
 800b834:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b838:	81a3      	strh	r3, [r4, #12]
 800b83a:	f04f 30ff 	mov.w	r0, #4294967295
 800b83e:	e03e      	b.n	800b8be <__swsetup_r+0xba>
 800b840:	4b25      	ldr	r3, [pc, #148]	; (800b8d8 <__swsetup_r+0xd4>)
 800b842:	429c      	cmp	r4, r3
 800b844:	d101      	bne.n	800b84a <__swsetup_r+0x46>
 800b846:	68ac      	ldr	r4, [r5, #8]
 800b848:	e7eb      	b.n	800b822 <__swsetup_r+0x1e>
 800b84a:	4b24      	ldr	r3, [pc, #144]	; (800b8dc <__swsetup_r+0xd8>)
 800b84c:	429c      	cmp	r4, r3
 800b84e:	bf08      	it	eq
 800b850:	68ec      	ldreq	r4, [r5, #12]
 800b852:	e7e6      	b.n	800b822 <__swsetup_r+0x1e>
 800b854:	0758      	lsls	r0, r3, #29
 800b856:	d512      	bpl.n	800b87e <__swsetup_r+0x7a>
 800b858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b85a:	b141      	cbz	r1, 800b86e <__swsetup_r+0x6a>
 800b85c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b860:	4299      	cmp	r1, r3
 800b862:	d002      	beq.n	800b86a <__swsetup_r+0x66>
 800b864:	4630      	mov	r0, r6
 800b866:	f000 fa61 	bl	800bd2c <_free_r>
 800b86a:	2300      	movs	r3, #0
 800b86c:	6363      	str	r3, [r4, #52]	; 0x34
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b874:	81a3      	strh	r3, [r4, #12]
 800b876:	2300      	movs	r3, #0
 800b878:	6063      	str	r3, [r4, #4]
 800b87a:	6923      	ldr	r3, [r4, #16]
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	89a3      	ldrh	r3, [r4, #12]
 800b880:	f043 0308 	orr.w	r3, r3, #8
 800b884:	81a3      	strh	r3, [r4, #12]
 800b886:	6923      	ldr	r3, [r4, #16]
 800b888:	b94b      	cbnz	r3, 800b89e <__swsetup_r+0x9a>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b894:	d003      	beq.n	800b89e <__swsetup_r+0x9a>
 800b896:	4621      	mov	r1, r4
 800b898:	4630      	mov	r0, r6
 800b89a:	f000 fa07 	bl	800bcac <__smakebuf_r>
 800b89e:	89a0      	ldrh	r0, [r4, #12]
 800b8a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8a4:	f010 0301 	ands.w	r3, r0, #1
 800b8a8:	d00a      	beq.n	800b8c0 <__swsetup_r+0xbc>
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60a3      	str	r3, [r4, #8]
 800b8ae:	6963      	ldr	r3, [r4, #20]
 800b8b0:	425b      	negs	r3, r3
 800b8b2:	61a3      	str	r3, [r4, #24]
 800b8b4:	6923      	ldr	r3, [r4, #16]
 800b8b6:	b943      	cbnz	r3, 800b8ca <__swsetup_r+0xc6>
 800b8b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8bc:	d1ba      	bne.n	800b834 <__swsetup_r+0x30>
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	0781      	lsls	r1, r0, #30
 800b8c2:	bf58      	it	pl
 800b8c4:	6963      	ldrpl	r3, [r4, #20]
 800b8c6:	60a3      	str	r3, [r4, #8]
 800b8c8:	e7f4      	b.n	800b8b4 <__swsetup_r+0xb0>
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	e7f7      	b.n	800b8be <__swsetup_r+0xba>
 800b8ce:	bf00      	nop
 800b8d0:	20000094 	.word	0x20000094
 800b8d4:	0800d524 	.word	0x0800d524
 800b8d8:	0800d544 	.word	0x0800d544
 800b8dc:	0800d504 	.word	0x0800d504

0800b8e0 <abort>:
 800b8e0:	b508      	push	{r3, lr}
 800b8e2:	2006      	movs	r0, #6
 800b8e4:	f000 fb04 	bl	800bef0 <raise>
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	f7f6 f837 	bl	800195c <_exit>
	...

0800b8f0 <__sflush_r>:
 800b8f0:	898a      	ldrh	r2, [r1, #12]
 800b8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	0710      	lsls	r0, r2, #28
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	d458      	bmi.n	800b9b0 <__sflush_r+0xc0>
 800b8fe:	684b      	ldr	r3, [r1, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	dc05      	bgt.n	800b910 <__sflush_r+0x20>
 800b904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b906:	2b00      	cmp	r3, #0
 800b908:	dc02      	bgt.n	800b910 <__sflush_r+0x20>
 800b90a:	2000      	movs	r0, #0
 800b90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b912:	2e00      	cmp	r6, #0
 800b914:	d0f9      	beq.n	800b90a <__sflush_r+0x1a>
 800b916:	2300      	movs	r3, #0
 800b918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b91c:	682f      	ldr	r7, [r5, #0]
 800b91e:	602b      	str	r3, [r5, #0]
 800b920:	d032      	beq.n	800b988 <__sflush_r+0x98>
 800b922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	075a      	lsls	r2, r3, #29
 800b928:	d505      	bpl.n	800b936 <__sflush_r+0x46>
 800b92a:	6863      	ldr	r3, [r4, #4]
 800b92c:	1ac0      	subs	r0, r0, r3
 800b92e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b930:	b10b      	cbz	r3, 800b936 <__sflush_r+0x46>
 800b932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b934:	1ac0      	subs	r0, r0, r3
 800b936:	2300      	movs	r3, #0
 800b938:	4602      	mov	r2, r0
 800b93a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b93c:	6a21      	ldr	r1, [r4, #32]
 800b93e:	4628      	mov	r0, r5
 800b940:	47b0      	blx	r6
 800b942:	1c43      	adds	r3, r0, #1
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	d106      	bne.n	800b956 <__sflush_r+0x66>
 800b948:	6829      	ldr	r1, [r5, #0]
 800b94a:	291d      	cmp	r1, #29
 800b94c:	d82c      	bhi.n	800b9a8 <__sflush_r+0xb8>
 800b94e:	4a2a      	ldr	r2, [pc, #168]	; (800b9f8 <__sflush_r+0x108>)
 800b950:	40ca      	lsrs	r2, r1
 800b952:	07d6      	lsls	r6, r2, #31
 800b954:	d528      	bpl.n	800b9a8 <__sflush_r+0xb8>
 800b956:	2200      	movs	r2, #0
 800b958:	6062      	str	r2, [r4, #4]
 800b95a:	04d9      	lsls	r1, r3, #19
 800b95c:	6922      	ldr	r2, [r4, #16]
 800b95e:	6022      	str	r2, [r4, #0]
 800b960:	d504      	bpl.n	800b96c <__sflush_r+0x7c>
 800b962:	1c42      	adds	r2, r0, #1
 800b964:	d101      	bne.n	800b96a <__sflush_r+0x7a>
 800b966:	682b      	ldr	r3, [r5, #0]
 800b968:	b903      	cbnz	r3, 800b96c <__sflush_r+0x7c>
 800b96a:	6560      	str	r0, [r4, #84]	; 0x54
 800b96c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b96e:	602f      	str	r7, [r5, #0]
 800b970:	2900      	cmp	r1, #0
 800b972:	d0ca      	beq.n	800b90a <__sflush_r+0x1a>
 800b974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b978:	4299      	cmp	r1, r3
 800b97a:	d002      	beq.n	800b982 <__sflush_r+0x92>
 800b97c:	4628      	mov	r0, r5
 800b97e:	f000 f9d5 	bl	800bd2c <_free_r>
 800b982:	2000      	movs	r0, #0
 800b984:	6360      	str	r0, [r4, #52]	; 0x34
 800b986:	e7c1      	b.n	800b90c <__sflush_r+0x1c>
 800b988:	6a21      	ldr	r1, [r4, #32]
 800b98a:	2301      	movs	r3, #1
 800b98c:	4628      	mov	r0, r5
 800b98e:	47b0      	blx	r6
 800b990:	1c41      	adds	r1, r0, #1
 800b992:	d1c7      	bne.n	800b924 <__sflush_r+0x34>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d0c4      	beq.n	800b924 <__sflush_r+0x34>
 800b99a:	2b1d      	cmp	r3, #29
 800b99c:	d001      	beq.n	800b9a2 <__sflush_r+0xb2>
 800b99e:	2b16      	cmp	r3, #22
 800b9a0:	d101      	bne.n	800b9a6 <__sflush_r+0xb6>
 800b9a2:	602f      	str	r7, [r5, #0]
 800b9a4:	e7b1      	b.n	800b90a <__sflush_r+0x1a>
 800b9a6:	89a3      	ldrh	r3, [r4, #12]
 800b9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ac:	81a3      	strh	r3, [r4, #12]
 800b9ae:	e7ad      	b.n	800b90c <__sflush_r+0x1c>
 800b9b0:	690f      	ldr	r7, [r1, #16]
 800b9b2:	2f00      	cmp	r7, #0
 800b9b4:	d0a9      	beq.n	800b90a <__sflush_r+0x1a>
 800b9b6:	0793      	lsls	r3, r2, #30
 800b9b8:	680e      	ldr	r6, [r1, #0]
 800b9ba:	bf08      	it	eq
 800b9bc:	694b      	ldreq	r3, [r1, #20]
 800b9be:	600f      	str	r7, [r1, #0]
 800b9c0:	bf18      	it	ne
 800b9c2:	2300      	movne	r3, #0
 800b9c4:	eba6 0807 	sub.w	r8, r6, r7
 800b9c8:	608b      	str	r3, [r1, #8]
 800b9ca:	f1b8 0f00 	cmp.w	r8, #0
 800b9ce:	dd9c      	ble.n	800b90a <__sflush_r+0x1a>
 800b9d0:	6a21      	ldr	r1, [r4, #32]
 800b9d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9d4:	4643      	mov	r3, r8
 800b9d6:	463a      	mov	r2, r7
 800b9d8:	4628      	mov	r0, r5
 800b9da:	47b0      	blx	r6
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	dc06      	bgt.n	800b9ee <__sflush_r+0xfe>
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ec:	e78e      	b.n	800b90c <__sflush_r+0x1c>
 800b9ee:	4407      	add	r7, r0
 800b9f0:	eba8 0800 	sub.w	r8, r8, r0
 800b9f4:	e7e9      	b.n	800b9ca <__sflush_r+0xda>
 800b9f6:	bf00      	nop
 800b9f8:	20400001 	.word	0x20400001

0800b9fc <_fflush_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	690b      	ldr	r3, [r1, #16]
 800ba00:	4605      	mov	r5, r0
 800ba02:	460c      	mov	r4, r1
 800ba04:	b913      	cbnz	r3, 800ba0c <_fflush_r+0x10>
 800ba06:	2500      	movs	r5, #0
 800ba08:	4628      	mov	r0, r5
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	b118      	cbz	r0, 800ba16 <_fflush_r+0x1a>
 800ba0e:	6983      	ldr	r3, [r0, #24]
 800ba10:	b90b      	cbnz	r3, 800ba16 <_fflush_r+0x1a>
 800ba12:	f000 f887 	bl	800bb24 <__sinit>
 800ba16:	4b14      	ldr	r3, [pc, #80]	; (800ba68 <_fflush_r+0x6c>)
 800ba18:	429c      	cmp	r4, r3
 800ba1a:	d11b      	bne.n	800ba54 <_fflush_r+0x58>
 800ba1c:	686c      	ldr	r4, [r5, #4]
 800ba1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0ef      	beq.n	800ba06 <_fflush_r+0xa>
 800ba26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba28:	07d0      	lsls	r0, r2, #31
 800ba2a:	d404      	bmi.n	800ba36 <_fflush_r+0x3a>
 800ba2c:	0599      	lsls	r1, r3, #22
 800ba2e:	d402      	bmi.n	800ba36 <_fflush_r+0x3a>
 800ba30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba32:	f000 f915 	bl	800bc60 <__retarget_lock_acquire_recursive>
 800ba36:	4628      	mov	r0, r5
 800ba38:	4621      	mov	r1, r4
 800ba3a:	f7ff ff59 	bl	800b8f0 <__sflush_r>
 800ba3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba40:	07da      	lsls	r2, r3, #31
 800ba42:	4605      	mov	r5, r0
 800ba44:	d4e0      	bmi.n	800ba08 <_fflush_r+0xc>
 800ba46:	89a3      	ldrh	r3, [r4, #12]
 800ba48:	059b      	lsls	r3, r3, #22
 800ba4a:	d4dd      	bmi.n	800ba08 <_fflush_r+0xc>
 800ba4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba4e:	f000 f908 	bl	800bc62 <__retarget_lock_release_recursive>
 800ba52:	e7d9      	b.n	800ba08 <_fflush_r+0xc>
 800ba54:	4b05      	ldr	r3, [pc, #20]	; (800ba6c <_fflush_r+0x70>)
 800ba56:	429c      	cmp	r4, r3
 800ba58:	d101      	bne.n	800ba5e <_fflush_r+0x62>
 800ba5a:	68ac      	ldr	r4, [r5, #8]
 800ba5c:	e7df      	b.n	800ba1e <_fflush_r+0x22>
 800ba5e:	4b04      	ldr	r3, [pc, #16]	; (800ba70 <_fflush_r+0x74>)
 800ba60:	429c      	cmp	r4, r3
 800ba62:	bf08      	it	eq
 800ba64:	68ec      	ldreq	r4, [r5, #12]
 800ba66:	e7da      	b.n	800ba1e <_fflush_r+0x22>
 800ba68:	0800d524 	.word	0x0800d524
 800ba6c:	0800d544 	.word	0x0800d544
 800ba70:	0800d504 	.word	0x0800d504

0800ba74 <std>:
 800ba74:	2300      	movs	r3, #0
 800ba76:	b510      	push	{r4, lr}
 800ba78:	4604      	mov	r4, r0
 800ba7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba82:	6083      	str	r3, [r0, #8]
 800ba84:	8181      	strh	r1, [r0, #12]
 800ba86:	6643      	str	r3, [r0, #100]	; 0x64
 800ba88:	81c2      	strh	r2, [r0, #14]
 800ba8a:	6183      	str	r3, [r0, #24]
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	2208      	movs	r2, #8
 800ba90:	305c      	adds	r0, #92	; 0x5c
 800ba92:	f7ff fb6f 	bl	800b174 <memset>
 800ba96:	4b05      	ldr	r3, [pc, #20]	; (800baac <std+0x38>)
 800ba98:	6263      	str	r3, [r4, #36]	; 0x24
 800ba9a:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <std+0x3c>)
 800ba9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba9e:	4b05      	ldr	r3, [pc, #20]	; (800bab4 <std+0x40>)
 800baa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800baa2:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <std+0x44>)
 800baa4:	6224      	str	r4, [r4, #32]
 800baa6:	6323      	str	r3, [r4, #48]	; 0x30
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	bf00      	nop
 800baac:	0800bf29 	.word	0x0800bf29
 800bab0:	0800bf4b 	.word	0x0800bf4b
 800bab4:	0800bf83 	.word	0x0800bf83
 800bab8:	0800bfa7 	.word	0x0800bfa7

0800babc <_cleanup_r>:
 800babc:	4901      	ldr	r1, [pc, #4]	; (800bac4 <_cleanup_r+0x8>)
 800babe:	f000 b8af 	b.w	800bc20 <_fwalk_reent>
 800bac2:	bf00      	nop
 800bac4:	0800b9fd 	.word	0x0800b9fd

0800bac8 <__sfmoreglue>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	1e4a      	subs	r2, r1, #1
 800bacc:	2568      	movs	r5, #104	; 0x68
 800bace:	4355      	muls	r5, r2
 800bad0:	460e      	mov	r6, r1
 800bad2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bad6:	f000 f979 	bl	800bdcc <_malloc_r>
 800bada:	4604      	mov	r4, r0
 800badc:	b140      	cbz	r0, 800baf0 <__sfmoreglue+0x28>
 800bade:	2100      	movs	r1, #0
 800bae0:	e9c0 1600 	strd	r1, r6, [r0]
 800bae4:	300c      	adds	r0, #12
 800bae6:	60a0      	str	r0, [r4, #8]
 800bae8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800baec:	f7ff fb42 	bl	800b174 <memset>
 800baf0:	4620      	mov	r0, r4
 800baf2:	bd70      	pop	{r4, r5, r6, pc}

0800baf4 <__sfp_lock_acquire>:
 800baf4:	4801      	ldr	r0, [pc, #4]	; (800bafc <__sfp_lock_acquire+0x8>)
 800baf6:	f000 b8b3 	b.w	800bc60 <__retarget_lock_acquire_recursive>
 800bafa:	bf00      	nop
 800bafc:	20004f00 	.word	0x20004f00

0800bb00 <__sfp_lock_release>:
 800bb00:	4801      	ldr	r0, [pc, #4]	; (800bb08 <__sfp_lock_release+0x8>)
 800bb02:	f000 b8ae 	b.w	800bc62 <__retarget_lock_release_recursive>
 800bb06:	bf00      	nop
 800bb08:	20004f00 	.word	0x20004f00

0800bb0c <__sinit_lock_acquire>:
 800bb0c:	4801      	ldr	r0, [pc, #4]	; (800bb14 <__sinit_lock_acquire+0x8>)
 800bb0e:	f000 b8a7 	b.w	800bc60 <__retarget_lock_acquire_recursive>
 800bb12:	bf00      	nop
 800bb14:	20004efb 	.word	0x20004efb

0800bb18 <__sinit_lock_release>:
 800bb18:	4801      	ldr	r0, [pc, #4]	; (800bb20 <__sinit_lock_release+0x8>)
 800bb1a:	f000 b8a2 	b.w	800bc62 <__retarget_lock_release_recursive>
 800bb1e:	bf00      	nop
 800bb20:	20004efb 	.word	0x20004efb

0800bb24 <__sinit>:
 800bb24:	b510      	push	{r4, lr}
 800bb26:	4604      	mov	r4, r0
 800bb28:	f7ff fff0 	bl	800bb0c <__sinit_lock_acquire>
 800bb2c:	69a3      	ldr	r3, [r4, #24]
 800bb2e:	b11b      	cbz	r3, 800bb38 <__sinit+0x14>
 800bb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb34:	f7ff bff0 	b.w	800bb18 <__sinit_lock_release>
 800bb38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb3c:	6523      	str	r3, [r4, #80]	; 0x50
 800bb3e:	4b13      	ldr	r3, [pc, #76]	; (800bb8c <__sinit+0x68>)
 800bb40:	4a13      	ldr	r2, [pc, #76]	; (800bb90 <__sinit+0x6c>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb46:	42a3      	cmp	r3, r4
 800bb48:	bf04      	itt	eq
 800bb4a:	2301      	moveq	r3, #1
 800bb4c:	61a3      	streq	r3, [r4, #24]
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f000 f820 	bl	800bb94 <__sfp>
 800bb54:	6060      	str	r0, [r4, #4]
 800bb56:	4620      	mov	r0, r4
 800bb58:	f000 f81c 	bl	800bb94 <__sfp>
 800bb5c:	60a0      	str	r0, [r4, #8]
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f000 f818 	bl	800bb94 <__sfp>
 800bb64:	2200      	movs	r2, #0
 800bb66:	60e0      	str	r0, [r4, #12]
 800bb68:	2104      	movs	r1, #4
 800bb6a:	6860      	ldr	r0, [r4, #4]
 800bb6c:	f7ff ff82 	bl	800ba74 <std>
 800bb70:	68a0      	ldr	r0, [r4, #8]
 800bb72:	2201      	movs	r2, #1
 800bb74:	2109      	movs	r1, #9
 800bb76:	f7ff ff7d 	bl	800ba74 <std>
 800bb7a:	68e0      	ldr	r0, [r4, #12]
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	2112      	movs	r1, #18
 800bb80:	f7ff ff78 	bl	800ba74 <std>
 800bb84:	2301      	movs	r3, #1
 800bb86:	61a3      	str	r3, [r4, #24]
 800bb88:	e7d2      	b.n	800bb30 <__sinit+0xc>
 800bb8a:	bf00      	nop
 800bb8c:	0800d4cc 	.word	0x0800d4cc
 800bb90:	0800babd 	.word	0x0800babd

0800bb94 <__sfp>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	4607      	mov	r7, r0
 800bb98:	f7ff ffac 	bl	800baf4 <__sfp_lock_acquire>
 800bb9c:	4b1e      	ldr	r3, [pc, #120]	; (800bc18 <__sfp+0x84>)
 800bb9e:	681e      	ldr	r6, [r3, #0]
 800bba0:	69b3      	ldr	r3, [r6, #24]
 800bba2:	b913      	cbnz	r3, 800bbaa <__sfp+0x16>
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7ff ffbd 	bl	800bb24 <__sinit>
 800bbaa:	3648      	adds	r6, #72	; 0x48
 800bbac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	d503      	bpl.n	800bbbc <__sfp+0x28>
 800bbb4:	6833      	ldr	r3, [r6, #0]
 800bbb6:	b30b      	cbz	r3, 800bbfc <__sfp+0x68>
 800bbb8:	6836      	ldr	r6, [r6, #0]
 800bbba:	e7f7      	b.n	800bbac <__sfp+0x18>
 800bbbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbc0:	b9d5      	cbnz	r5, 800bbf8 <__sfp+0x64>
 800bbc2:	4b16      	ldr	r3, [pc, #88]	; (800bc1c <__sfp+0x88>)
 800bbc4:	60e3      	str	r3, [r4, #12]
 800bbc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbca:	6665      	str	r5, [r4, #100]	; 0x64
 800bbcc:	f000 f847 	bl	800bc5e <__retarget_lock_init_recursive>
 800bbd0:	f7ff ff96 	bl	800bb00 <__sfp_lock_release>
 800bbd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbdc:	6025      	str	r5, [r4, #0]
 800bbde:	61a5      	str	r5, [r4, #24]
 800bbe0:	2208      	movs	r2, #8
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbe8:	f7ff fac4 	bl	800b174 <memset>
 800bbec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbf8:	3468      	adds	r4, #104	; 0x68
 800bbfa:	e7d9      	b.n	800bbb0 <__sfp+0x1c>
 800bbfc:	2104      	movs	r1, #4
 800bbfe:	4638      	mov	r0, r7
 800bc00:	f7ff ff62 	bl	800bac8 <__sfmoreglue>
 800bc04:	4604      	mov	r4, r0
 800bc06:	6030      	str	r0, [r6, #0]
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d1d5      	bne.n	800bbb8 <__sfp+0x24>
 800bc0c:	f7ff ff78 	bl	800bb00 <__sfp_lock_release>
 800bc10:	230c      	movs	r3, #12
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	e7ee      	b.n	800bbf4 <__sfp+0x60>
 800bc16:	bf00      	nop
 800bc18:	0800d4cc 	.word	0x0800d4cc
 800bc1c:	ffff0001 	.word	0xffff0001

0800bc20 <_fwalk_reent>:
 800bc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc24:	4606      	mov	r6, r0
 800bc26:	4688      	mov	r8, r1
 800bc28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc2c:	2700      	movs	r7, #0
 800bc2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc32:	f1b9 0901 	subs.w	r9, r9, #1
 800bc36:	d505      	bpl.n	800bc44 <_fwalk_reent+0x24>
 800bc38:	6824      	ldr	r4, [r4, #0]
 800bc3a:	2c00      	cmp	r4, #0
 800bc3c:	d1f7      	bne.n	800bc2e <_fwalk_reent+0xe>
 800bc3e:	4638      	mov	r0, r7
 800bc40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc44:	89ab      	ldrh	r3, [r5, #12]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d907      	bls.n	800bc5a <_fwalk_reent+0x3a>
 800bc4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	d003      	beq.n	800bc5a <_fwalk_reent+0x3a>
 800bc52:	4629      	mov	r1, r5
 800bc54:	4630      	mov	r0, r6
 800bc56:	47c0      	blx	r8
 800bc58:	4307      	orrs	r7, r0
 800bc5a:	3568      	adds	r5, #104	; 0x68
 800bc5c:	e7e9      	b.n	800bc32 <_fwalk_reent+0x12>

0800bc5e <__retarget_lock_init_recursive>:
 800bc5e:	4770      	bx	lr

0800bc60 <__retarget_lock_acquire_recursive>:
 800bc60:	4770      	bx	lr

0800bc62 <__retarget_lock_release_recursive>:
 800bc62:	4770      	bx	lr

0800bc64 <__swhatbuf_r>:
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	460e      	mov	r6, r1
 800bc68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc6c:	2900      	cmp	r1, #0
 800bc6e:	b096      	sub	sp, #88	; 0x58
 800bc70:	4614      	mov	r4, r2
 800bc72:	461d      	mov	r5, r3
 800bc74:	da07      	bge.n	800bc86 <__swhatbuf_r+0x22>
 800bc76:	2300      	movs	r3, #0
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	89b3      	ldrh	r3, [r6, #12]
 800bc7c:	061a      	lsls	r2, r3, #24
 800bc7e:	d410      	bmi.n	800bca2 <__swhatbuf_r+0x3e>
 800bc80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc84:	e00e      	b.n	800bca4 <__swhatbuf_r+0x40>
 800bc86:	466a      	mov	r2, sp
 800bc88:	f000 f9b4 	bl	800bff4 <_fstat_r>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	dbf2      	blt.n	800bc76 <__swhatbuf_r+0x12>
 800bc90:	9a01      	ldr	r2, [sp, #4]
 800bc92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc9a:	425a      	negs	r2, r3
 800bc9c:	415a      	adcs	r2, r3
 800bc9e:	602a      	str	r2, [r5, #0]
 800bca0:	e7ee      	b.n	800bc80 <__swhatbuf_r+0x1c>
 800bca2:	2340      	movs	r3, #64	; 0x40
 800bca4:	2000      	movs	r0, #0
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	b016      	add	sp, #88	; 0x58
 800bcaa:	bd70      	pop	{r4, r5, r6, pc}

0800bcac <__smakebuf_r>:
 800bcac:	898b      	ldrh	r3, [r1, #12]
 800bcae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcb0:	079d      	lsls	r5, r3, #30
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	d507      	bpl.n	800bcc8 <__smakebuf_r+0x1c>
 800bcb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	6123      	str	r3, [r4, #16]
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	6163      	str	r3, [r4, #20]
 800bcc4:	b002      	add	sp, #8
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	ab01      	add	r3, sp, #4
 800bcca:	466a      	mov	r2, sp
 800bccc:	f7ff ffca 	bl	800bc64 <__swhatbuf_r>
 800bcd0:	9900      	ldr	r1, [sp, #0]
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f000 f879 	bl	800bdcc <_malloc_r>
 800bcda:	b948      	cbnz	r0, 800bcf0 <__smakebuf_r+0x44>
 800bcdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bce0:	059a      	lsls	r2, r3, #22
 800bce2:	d4ef      	bmi.n	800bcc4 <__smakebuf_r+0x18>
 800bce4:	f023 0303 	bic.w	r3, r3, #3
 800bce8:	f043 0302 	orr.w	r3, r3, #2
 800bcec:	81a3      	strh	r3, [r4, #12]
 800bcee:	e7e3      	b.n	800bcb8 <__smakebuf_r+0xc>
 800bcf0:	4b0d      	ldr	r3, [pc, #52]	; (800bd28 <__smakebuf_r+0x7c>)
 800bcf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	6020      	str	r0, [r4, #0]
 800bcf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfc:	81a3      	strh	r3, [r4, #12]
 800bcfe:	9b00      	ldr	r3, [sp, #0]
 800bd00:	6163      	str	r3, [r4, #20]
 800bd02:	9b01      	ldr	r3, [sp, #4]
 800bd04:	6120      	str	r0, [r4, #16]
 800bd06:	b15b      	cbz	r3, 800bd20 <__smakebuf_r+0x74>
 800bd08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f000 f983 	bl	800c018 <_isatty_r>
 800bd12:	b128      	cbz	r0, 800bd20 <__smakebuf_r+0x74>
 800bd14:	89a3      	ldrh	r3, [r4, #12]
 800bd16:	f023 0303 	bic.w	r3, r3, #3
 800bd1a:	f043 0301 	orr.w	r3, r3, #1
 800bd1e:	81a3      	strh	r3, [r4, #12]
 800bd20:	89a0      	ldrh	r0, [r4, #12]
 800bd22:	4305      	orrs	r5, r0
 800bd24:	81a5      	strh	r5, [r4, #12]
 800bd26:	e7cd      	b.n	800bcc4 <__smakebuf_r+0x18>
 800bd28:	0800babd 	.word	0x0800babd

0800bd2c <_free_r>:
 800bd2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd2e:	2900      	cmp	r1, #0
 800bd30:	d048      	beq.n	800bdc4 <_free_r+0x98>
 800bd32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd36:	9001      	str	r0, [sp, #4]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f1a1 0404 	sub.w	r4, r1, #4
 800bd3e:	bfb8      	it	lt
 800bd40:	18e4      	addlt	r4, r4, r3
 800bd42:	f000 f98b 	bl	800c05c <__malloc_lock>
 800bd46:	4a20      	ldr	r2, [pc, #128]	; (800bdc8 <_free_r+0x9c>)
 800bd48:	9801      	ldr	r0, [sp, #4]
 800bd4a:	6813      	ldr	r3, [r2, #0]
 800bd4c:	4615      	mov	r5, r2
 800bd4e:	b933      	cbnz	r3, 800bd5e <_free_r+0x32>
 800bd50:	6063      	str	r3, [r4, #4]
 800bd52:	6014      	str	r4, [r2, #0]
 800bd54:	b003      	add	sp, #12
 800bd56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd5a:	f000 b985 	b.w	800c068 <__malloc_unlock>
 800bd5e:	42a3      	cmp	r3, r4
 800bd60:	d90b      	bls.n	800bd7a <_free_r+0x4e>
 800bd62:	6821      	ldr	r1, [r4, #0]
 800bd64:	1862      	adds	r2, r4, r1
 800bd66:	4293      	cmp	r3, r2
 800bd68:	bf04      	itt	eq
 800bd6a:	681a      	ldreq	r2, [r3, #0]
 800bd6c:	685b      	ldreq	r3, [r3, #4]
 800bd6e:	6063      	str	r3, [r4, #4]
 800bd70:	bf04      	itt	eq
 800bd72:	1852      	addeq	r2, r2, r1
 800bd74:	6022      	streq	r2, [r4, #0]
 800bd76:	602c      	str	r4, [r5, #0]
 800bd78:	e7ec      	b.n	800bd54 <_free_r+0x28>
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	b10b      	cbz	r3, 800bd84 <_free_r+0x58>
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	d9fa      	bls.n	800bd7a <_free_r+0x4e>
 800bd84:	6811      	ldr	r1, [r2, #0]
 800bd86:	1855      	adds	r5, r2, r1
 800bd88:	42a5      	cmp	r5, r4
 800bd8a:	d10b      	bne.n	800bda4 <_free_r+0x78>
 800bd8c:	6824      	ldr	r4, [r4, #0]
 800bd8e:	4421      	add	r1, r4
 800bd90:	1854      	adds	r4, r2, r1
 800bd92:	42a3      	cmp	r3, r4
 800bd94:	6011      	str	r1, [r2, #0]
 800bd96:	d1dd      	bne.n	800bd54 <_free_r+0x28>
 800bd98:	681c      	ldr	r4, [r3, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	6053      	str	r3, [r2, #4]
 800bd9e:	4421      	add	r1, r4
 800bda0:	6011      	str	r1, [r2, #0]
 800bda2:	e7d7      	b.n	800bd54 <_free_r+0x28>
 800bda4:	d902      	bls.n	800bdac <_free_r+0x80>
 800bda6:	230c      	movs	r3, #12
 800bda8:	6003      	str	r3, [r0, #0]
 800bdaa:	e7d3      	b.n	800bd54 <_free_r+0x28>
 800bdac:	6825      	ldr	r5, [r4, #0]
 800bdae:	1961      	adds	r1, r4, r5
 800bdb0:	428b      	cmp	r3, r1
 800bdb2:	bf04      	itt	eq
 800bdb4:	6819      	ldreq	r1, [r3, #0]
 800bdb6:	685b      	ldreq	r3, [r3, #4]
 800bdb8:	6063      	str	r3, [r4, #4]
 800bdba:	bf04      	itt	eq
 800bdbc:	1949      	addeq	r1, r1, r5
 800bdbe:	6021      	streq	r1, [r4, #0]
 800bdc0:	6054      	str	r4, [r2, #4]
 800bdc2:	e7c7      	b.n	800bd54 <_free_r+0x28>
 800bdc4:	b003      	add	sp, #12
 800bdc6:	bd30      	pop	{r4, r5, pc}
 800bdc8:	20004aa8 	.word	0x20004aa8

0800bdcc <_malloc_r>:
 800bdcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdce:	1ccd      	adds	r5, r1, #3
 800bdd0:	f025 0503 	bic.w	r5, r5, #3
 800bdd4:	3508      	adds	r5, #8
 800bdd6:	2d0c      	cmp	r5, #12
 800bdd8:	bf38      	it	cc
 800bdda:	250c      	movcc	r5, #12
 800bddc:	2d00      	cmp	r5, #0
 800bdde:	4606      	mov	r6, r0
 800bde0:	db01      	blt.n	800bde6 <_malloc_r+0x1a>
 800bde2:	42a9      	cmp	r1, r5
 800bde4:	d903      	bls.n	800bdee <_malloc_r+0x22>
 800bde6:	230c      	movs	r3, #12
 800bde8:	6033      	str	r3, [r6, #0]
 800bdea:	2000      	movs	r0, #0
 800bdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdee:	f000 f935 	bl	800c05c <__malloc_lock>
 800bdf2:	4921      	ldr	r1, [pc, #132]	; (800be78 <_malloc_r+0xac>)
 800bdf4:	680a      	ldr	r2, [r1, #0]
 800bdf6:	4614      	mov	r4, r2
 800bdf8:	b99c      	cbnz	r4, 800be22 <_malloc_r+0x56>
 800bdfa:	4f20      	ldr	r7, [pc, #128]	; (800be7c <_malloc_r+0xb0>)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	b923      	cbnz	r3, 800be0a <_malloc_r+0x3e>
 800be00:	4621      	mov	r1, r4
 800be02:	4630      	mov	r0, r6
 800be04:	f000 f83c 	bl	800be80 <_sbrk_r>
 800be08:	6038      	str	r0, [r7, #0]
 800be0a:	4629      	mov	r1, r5
 800be0c:	4630      	mov	r0, r6
 800be0e:	f000 f837 	bl	800be80 <_sbrk_r>
 800be12:	1c43      	adds	r3, r0, #1
 800be14:	d123      	bne.n	800be5e <_malloc_r+0x92>
 800be16:	230c      	movs	r3, #12
 800be18:	6033      	str	r3, [r6, #0]
 800be1a:	4630      	mov	r0, r6
 800be1c:	f000 f924 	bl	800c068 <__malloc_unlock>
 800be20:	e7e3      	b.n	800bdea <_malloc_r+0x1e>
 800be22:	6823      	ldr	r3, [r4, #0]
 800be24:	1b5b      	subs	r3, r3, r5
 800be26:	d417      	bmi.n	800be58 <_malloc_r+0x8c>
 800be28:	2b0b      	cmp	r3, #11
 800be2a:	d903      	bls.n	800be34 <_malloc_r+0x68>
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	441c      	add	r4, r3
 800be30:	6025      	str	r5, [r4, #0]
 800be32:	e004      	b.n	800be3e <_malloc_r+0x72>
 800be34:	6863      	ldr	r3, [r4, #4]
 800be36:	42a2      	cmp	r2, r4
 800be38:	bf0c      	ite	eq
 800be3a:	600b      	streq	r3, [r1, #0]
 800be3c:	6053      	strne	r3, [r2, #4]
 800be3e:	4630      	mov	r0, r6
 800be40:	f000 f912 	bl	800c068 <__malloc_unlock>
 800be44:	f104 000b 	add.w	r0, r4, #11
 800be48:	1d23      	adds	r3, r4, #4
 800be4a:	f020 0007 	bic.w	r0, r0, #7
 800be4e:	1ac2      	subs	r2, r0, r3
 800be50:	d0cc      	beq.n	800bdec <_malloc_r+0x20>
 800be52:	1a1b      	subs	r3, r3, r0
 800be54:	50a3      	str	r3, [r4, r2]
 800be56:	e7c9      	b.n	800bdec <_malloc_r+0x20>
 800be58:	4622      	mov	r2, r4
 800be5a:	6864      	ldr	r4, [r4, #4]
 800be5c:	e7cc      	b.n	800bdf8 <_malloc_r+0x2c>
 800be5e:	1cc4      	adds	r4, r0, #3
 800be60:	f024 0403 	bic.w	r4, r4, #3
 800be64:	42a0      	cmp	r0, r4
 800be66:	d0e3      	beq.n	800be30 <_malloc_r+0x64>
 800be68:	1a21      	subs	r1, r4, r0
 800be6a:	4630      	mov	r0, r6
 800be6c:	f000 f808 	bl	800be80 <_sbrk_r>
 800be70:	3001      	adds	r0, #1
 800be72:	d1dd      	bne.n	800be30 <_malloc_r+0x64>
 800be74:	e7cf      	b.n	800be16 <_malloc_r+0x4a>
 800be76:	bf00      	nop
 800be78:	20004aa8 	.word	0x20004aa8
 800be7c:	20004aac 	.word	0x20004aac

0800be80 <_sbrk_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	4d06      	ldr	r5, [pc, #24]	; (800be9c <_sbrk_r+0x1c>)
 800be84:	2300      	movs	r3, #0
 800be86:	4604      	mov	r4, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	602b      	str	r3, [r5, #0]
 800be8c:	f7f5 fdde 	bl	8001a4c <_sbrk>
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	d102      	bne.n	800be9a <_sbrk_r+0x1a>
 800be94:	682b      	ldr	r3, [r5, #0]
 800be96:	b103      	cbz	r3, 800be9a <_sbrk_r+0x1a>
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	bd38      	pop	{r3, r4, r5, pc}
 800be9c:	20004f04 	.word	0x20004f04

0800bea0 <_raise_r>:
 800bea0:	291f      	cmp	r1, #31
 800bea2:	b538      	push	{r3, r4, r5, lr}
 800bea4:	4604      	mov	r4, r0
 800bea6:	460d      	mov	r5, r1
 800bea8:	d904      	bls.n	800beb4 <_raise_r+0x14>
 800beaa:	2316      	movs	r3, #22
 800beac:	6003      	str	r3, [r0, #0]
 800beae:	f04f 30ff 	mov.w	r0, #4294967295
 800beb2:	bd38      	pop	{r3, r4, r5, pc}
 800beb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800beb6:	b112      	cbz	r2, 800bebe <_raise_r+0x1e>
 800beb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bebc:	b94b      	cbnz	r3, 800bed2 <_raise_r+0x32>
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 f830 	bl	800bf24 <_getpid_r>
 800bec4:	462a      	mov	r2, r5
 800bec6:	4601      	mov	r1, r0
 800bec8:	4620      	mov	r0, r4
 800beca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bece:	f000 b817 	b.w	800bf00 <_kill_r>
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d00a      	beq.n	800beec <_raise_r+0x4c>
 800bed6:	1c59      	adds	r1, r3, #1
 800bed8:	d103      	bne.n	800bee2 <_raise_r+0x42>
 800beda:	2316      	movs	r3, #22
 800bedc:	6003      	str	r3, [r0, #0]
 800bede:	2001      	movs	r0, #1
 800bee0:	e7e7      	b.n	800beb2 <_raise_r+0x12>
 800bee2:	2400      	movs	r4, #0
 800bee4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bee8:	4628      	mov	r0, r5
 800beea:	4798      	blx	r3
 800beec:	2000      	movs	r0, #0
 800beee:	e7e0      	b.n	800beb2 <_raise_r+0x12>

0800bef0 <raise>:
 800bef0:	4b02      	ldr	r3, [pc, #8]	; (800befc <raise+0xc>)
 800bef2:	4601      	mov	r1, r0
 800bef4:	6818      	ldr	r0, [r3, #0]
 800bef6:	f7ff bfd3 	b.w	800bea0 <_raise_r>
 800befa:	bf00      	nop
 800befc:	20000094 	.word	0x20000094

0800bf00 <_kill_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	4d07      	ldr	r5, [pc, #28]	; (800bf20 <_kill_r+0x20>)
 800bf04:	2300      	movs	r3, #0
 800bf06:	4604      	mov	r4, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	602b      	str	r3, [r5, #0]
 800bf0e:	f7f5 fd15 	bl	800193c <_kill>
 800bf12:	1c43      	adds	r3, r0, #1
 800bf14:	d102      	bne.n	800bf1c <_kill_r+0x1c>
 800bf16:	682b      	ldr	r3, [r5, #0]
 800bf18:	b103      	cbz	r3, 800bf1c <_kill_r+0x1c>
 800bf1a:	6023      	str	r3, [r4, #0]
 800bf1c:	bd38      	pop	{r3, r4, r5, pc}
 800bf1e:	bf00      	nop
 800bf20:	20004f04 	.word	0x20004f04

0800bf24 <_getpid_r>:
 800bf24:	f7f5 bd02 	b.w	800192c <_getpid>

0800bf28 <__sread>:
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf30:	f000 f8a0 	bl	800c074 <_read_r>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	bfab      	itete	ge
 800bf38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf3a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf3c:	181b      	addge	r3, r3, r0
 800bf3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf42:	bfac      	ite	ge
 800bf44:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf46:	81a3      	strhlt	r3, [r4, #12]
 800bf48:	bd10      	pop	{r4, pc}

0800bf4a <__swrite>:
 800bf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf4e:	461f      	mov	r7, r3
 800bf50:	898b      	ldrh	r3, [r1, #12]
 800bf52:	05db      	lsls	r3, r3, #23
 800bf54:	4605      	mov	r5, r0
 800bf56:	460c      	mov	r4, r1
 800bf58:	4616      	mov	r6, r2
 800bf5a:	d505      	bpl.n	800bf68 <__swrite+0x1e>
 800bf5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf60:	2302      	movs	r3, #2
 800bf62:	2200      	movs	r2, #0
 800bf64:	f000 f868 	bl	800c038 <_lseek_r>
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf72:	81a3      	strh	r3, [r4, #12]
 800bf74:	4632      	mov	r2, r6
 800bf76:	463b      	mov	r3, r7
 800bf78:	4628      	mov	r0, r5
 800bf7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7e:	f000 b817 	b.w	800bfb0 <_write_r>

0800bf82 <__sseek>:
 800bf82:	b510      	push	{r4, lr}
 800bf84:	460c      	mov	r4, r1
 800bf86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf8a:	f000 f855 	bl	800c038 <_lseek_r>
 800bf8e:	1c43      	adds	r3, r0, #1
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	bf15      	itete	ne
 800bf94:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf9e:	81a3      	strheq	r3, [r4, #12]
 800bfa0:	bf18      	it	ne
 800bfa2:	81a3      	strhne	r3, [r4, #12]
 800bfa4:	bd10      	pop	{r4, pc}

0800bfa6 <__sclose>:
 800bfa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfaa:	f000 b813 	b.w	800bfd4 <_close_r>
	...

0800bfb0 <_write_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4d07      	ldr	r5, [pc, #28]	; (800bfd0 <_write_r+0x20>)
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	4608      	mov	r0, r1
 800bfb8:	4611      	mov	r1, r2
 800bfba:	2200      	movs	r2, #0
 800bfbc:	602a      	str	r2, [r5, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	f7f5 fcf3 	bl	80019aa <_write>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_write_r+0x1e>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_write_r+0x1e>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20004f04 	.word	0x20004f04

0800bfd4 <_close_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4d06      	ldr	r5, [pc, #24]	; (800bff0 <_close_r+0x1c>)
 800bfd8:	2300      	movs	r3, #0
 800bfda:	4604      	mov	r4, r0
 800bfdc:	4608      	mov	r0, r1
 800bfde:	602b      	str	r3, [r5, #0]
 800bfe0:	f7f5 fcff 	bl	80019e2 <_close>
 800bfe4:	1c43      	adds	r3, r0, #1
 800bfe6:	d102      	bne.n	800bfee <_close_r+0x1a>
 800bfe8:	682b      	ldr	r3, [r5, #0]
 800bfea:	b103      	cbz	r3, 800bfee <_close_r+0x1a>
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	bd38      	pop	{r3, r4, r5, pc}
 800bff0:	20004f04 	.word	0x20004f04

0800bff4 <_fstat_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4d07      	ldr	r5, [pc, #28]	; (800c014 <_fstat_r+0x20>)
 800bff8:	2300      	movs	r3, #0
 800bffa:	4604      	mov	r4, r0
 800bffc:	4608      	mov	r0, r1
 800bffe:	4611      	mov	r1, r2
 800c000:	602b      	str	r3, [r5, #0]
 800c002:	f7f5 fcfa 	bl	80019fa <_fstat>
 800c006:	1c43      	adds	r3, r0, #1
 800c008:	d102      	bne.n	800c010 <_fstat_r+0x1c>
 800c00a:	682b      	ldr	r3, [r5, #0]
 800c00c:	b103      	cbz	r3, 800c010 <_fstat_r+0x1c>
 800c00e:	6023      	str	r3, [r4, #0]
 800c010:	bd38      	pop	{r3, r4, r5, pc}
 800c012:	bf00      	nop
 800c014:	20004f04 	.word	0x20004f04

0800c018 <_isatty_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	4d06      	ldr	r5, [pc, #24]	; (800c034 <_isatty_r+0x1c>)
 800c01c:	2300      	movs	r3, #0
 800c01e:	4604      	mov	r4, r0
 800c020:	4608      	mov	r0, r1
 800c022:	602b      	str	r3, [r5, #0]
 800c024:	f7f5 fcf9 	bl	8001a1a <_isatty>
 800c028:	1c43      	adds	r3, r0, #1
 800c02a:	d102      	bne.n	800c032 <_isatty_r+0x1a>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	b103      	cbz	r3, 800c032 <_isatty_r+0x1a>
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	20004f04 	.word	0x20004f04

0800c038 <_lseek_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4d07      	ldr	r5, [pc, #28]	; (800c058 <_lseek_r+0x20>)
 800c03c:	4604      	mov	r4, r0
 800c03e:	4608      	mov	r0, r1
 800c040:	4611      	mov	r1, r2
 800c042:	2200      	movs	r2, #0
 800c044:	602a      	str	r2, [r5, #0]
 800c046:	461a      	mov	r2, r3
 800c048:	f7f5 fcf2 	bl	8001a30 <_lseek>
 800c04c:	1c43      	adds	r3, r0, #1
 800c04e:	d102      	bne.n	800c056 <_lseek_r+0x1e>
 800c050:	682b      	ldr	r3, [r5, #0]
 800c052:	b103      	cbz	r3, 800c056 <_lseek_r+0x1e>
 800c054:	6023      	str	r3, [r4, #0]
 800c056:	bd38      	pop	{r3, r4, r5, pc}
 800c058:	20004f04 	.word	0x20004f04

0800c05c <__malloc_lock>:
 800c05c:	4801      	ldr	r0, [pc, #4]	; (800c064 <__malloc_lock+0x8>)
 800c05e:	f7ff bdff 	b.w	800bc60 <__retarget_lock_acquire_recursive>
 800c062:	bf00      	nop
 800c064:	20004efc 	.word	0x20004efc

0800c068 <__malloc_unlock>:
 800c068:	4801      	ldr	r0, [pc, #4]	; (800c070 <__malloc_unlock+0x8>)
 800c06a:	f7ff bdfa 	b.w	800bc62 <__retarget_lock_release_recursive>
 800c06e:	bf00      	nop
 800c070:	20004efc 	.word	0x20004efc

0800c074 <_read_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	4d07      	ldr	r5, [pc, #28]	; (800c094 <_read_r+0x20>)
 800c078:	4604      	mov	r4, r0
 800c07a:	4608      	mov	r0, r1
 800c07c:	4611      	mov	r1, r2
 800c07e:	2200      	movs	r2, #0
 800c080:	602a      	str	r2, [r5, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	f7f5 fc74 	bl	8001970 <_read>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d102      	bne.n	800c092 <_read_r+0x1e>
 800c08c:	682b      	ldr	r3, [r5, #0]
 800c08e:	b103      	cbz	r3, 800c092 <_read_r+0x1e>
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	20004f04 	.word	0x20004f04

0800c098 <pow>:
 800c098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c09c:	ec59 8b10 	vmov	r8, r9, d0
 800c0a0:	ec57 6b11 	vmov	r6, r7, d1
 800c0a4:	f000 f8dc 	bl	800c260 <__ieee754_pow>
 800c0a8:	4b4e      	ldr	r3, [pc, #312]	; (800c1e4 <pow+0x14c>)
 800c0aa:	f993 3000 	ldrsb.w	r3, [r3]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	ec55 4b10 	vmov	r4, r5, d0
 800c0b4:	d015      	beq.n	800c0e2 <pow+0x4a>
 800c0b6:	4632      	mov	r2, r6
 800c0b8:	463b      	mov	r3, r7
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	4639      	mov	r1, r7
 800c0be:	f7f4 fd4d 	bl	8000b5c <__aeabi_dcmpun>
 800c0c2:	b970      	cbnz	r0, 800c0e2 <pow+0x4a>
 800c0c4:	4642      	mov	r2, r8
 800c0c6:	464b      	mov	r3, r9
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	f7f4 fd46 	bl	8000b5c <__aeabi_dcmpun>
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	b148      	cbz	r0, 800c0ea <pow+0x52>
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	4639      	mov	r1, r7
 800c0da:	f7f4 fd0d 	bl	8000af8 <__aeabi_dcmpeq>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	d17d      	bne.n	800c1de <pow+0x146>
 800c0e2:	ec45 4b10 	vmov	d0, r4, r5
 800c0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	f7f4 fd03 	bl	8000af8 <__aeabi_dcmpeq>
 800c0f2:	b1e0      	cbz	r0, 800c12e <pow+0x96>
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f7f4 fcfc 	bl	8000af8 <__aeabi_dcmpeq>
 800c100:	2800      	cmp	r0, #0
 800c102:	d16c      	bne.n	800c1de <pow+0x146>
 800c104:	ec47 6b10 	vmov	d0, r6, r7
 800c108:	f000 fe89 	bl	800ce1e <finite>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d0e8      	beq.n	800c0e2 <pow+0x4a>
 800c110:	2200      	movs	r2, #0
 800c112:	2300      	movs	r3, #0
 800c114:	4630      	mov	r0, r6
 800c116:	4639      	mov	r1, r7
 800c118:	f7f4 fcf8 	bl	8000b0c <__aeabi_dcmplt>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	d0e0      	beq.n	800c0e2 <pow+0x4a>
 800c120:	f7fe ffde 	bl	800b0e0 <__errno>
 800c124:	2321      	movs	r3, #33	; 0x21
 800c126:	6003      	str	r3, [r0, #0]
 800c128:	2400      	movs	r4, #0
 800c12a:	4d2f      	ldr	r5, [pc, #188]	; (800c1e8 <pow+0x150>)
 800c12c:	e7d9      	b.n	800c0e2 <pow+0x4a>
 800c12e:	ec45 4b10 	vmov	d0, r4, r5
 800c132:	f000 fe74 	bl	800ce1e <finite>
 800c136:	bbb8      	cbnz	r0, 800c1a8 <pow+0x110>
 800c138:	ec49 8b10 	vmov	d0, r8, r9
 800c13c:	f000 fe6f 	bl	800ce1e <finite>
 800c140:	b390      	cbz	r0, 800c1a8 <pow+0x110>
 800c142:	ec47 6b10 	vmov	d0, r6, r7
 800c146:	f000 fe6a 	bl	800ce1e <finite>
 800c14a:	b368      	cbz	r0, 800c1a8 <pow+0x110>
 800c14c:	4622      	mov	r2, r4
 800c14e:	462b      	mov	r3, r5
 800c150:	4620      	mov	r0, r4
 800c152:	4629      	mov	r1, r5
 800c154:	f7f4 fd02 	bl	8000b5c <__aeabi_dcmpun>
 800c158:	b160      	cbz	r0, 800c174 <pow+0xdc>
 800c15a:	f7fe ffc1 	bl	800b0e0 <__errno>
 800c15e:	2321      	movs	r3, #33	; 0x21
 800c160:	6003      	str	r3, [r0, #0]
 800c162:	2200      	movs	r2, #0
 800c164:	2300      	movs	r3, #0
 800c166:	4610      	mov	r0, r2
 800c168:	4619      	mov	r1, r3
 800c16a:	f7f4 fb87 	bl	800087c <__aeabi_ddiv>
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	e7b6      	b.n	800c0e2 <pow+0x4a>
 800c174:	f7fe ffb4 	bl	800b0e0 <__errno>
 800c178:	2322      	movs	r3, #34	; 0x22
 800c17a:	6003      	str	r3, [r0, #0]
 800c17c:	2200      	movs	r2, #0
 800c17e:	2300      	movs	r3, #0
 800c180:	4640      	mov	r0, r8
 800c182:	4649      	mov	r1, r9
 800c184:	f7f4 fcc2 	bl	8000b0c <__aeabi_dcmplt>
 800c188:	2400      	movs	r4, #0
 800c18a:	b158      	cbz	r0, 800c1a4 <pow+0x10c>
 800c18c:	ec47 6b10 	vmov	d0, r6, r7
 800c190:	f000 fe5a 	bl	800ce48 <rint>
 800c194:	4632      	mov	r2, r6
 800c196:	ec51 0b10 	vmov	r0, r1, d0
 800c19a:	463b      	mov	r3, r7
 800c19c:	f7f4 fcac 	bl	8000af8 <__aeabi_dcmpeq>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d0c2      	beq.n	800c12a <pow+0x92>
 800c1a4:	4d11      	ldr	r5, [pc, #68]	; (800c1ec <pow+0x154>)
 800c1a6:	e79c      	b.n	800c0e2 <pow+0x4a>
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7f4 fca2 	bl	8000af8 <__aeabi_dcmpeq>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d094      	beq.n	800c0e2 <pow+0x4a>
 800c1b8:	ec49 8b10 	vmov	d0, r8, r9
 800c1bc:	f000 fe2f 	bl	800ce1e <finite>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d08e      	beq.n	800c0e2 <pow+0x4a>
 800c1c4:	ec47 6b10 	vmov	d0, r6, r7
 800c1c8:	f000 fe29 	bl	800ce1e <finite>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d088      	beq.n	800c0e2 <pow+0x4a>
 800c1d0:	f7fe ff86 	bl	800b0e0 <__errno>
 800c1d4:	2322      	movs	r3, #34	; 0x22
 800c1d6:	6003      	str	r3, [r0, #0]
 800c1d8:	2400      	movs	r4, #0
 800c1da:	2500      	movs	r5, #0
 800c1dc:	e781      	b.n	800c0e2 <pow+0x4a>
 800c1de:	4d04      	ldr	r5, [pc, #16]	; (800c1f0 <pow+0x158>)
 800c1e0:	2400      	movs	r4, #0
 800c1e2:	e77e      	b.n	800c0e2 <pow+0x4a>
 800c1e4:	200000f8 	.word	0x200000f8
 800c1e8:	fff00000 	.word	0xfff00000
 800c1ec:	7ff00000 	.word	0x7ff00000
 800c1f0:	3ff00000 	.word	0x3ff00000

0800c1f4 <sqrt>:
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	ed2d 8b02 	vpush	{d8}
 800c1fa:	ec55 4b10 	vmov	r4, r5, d0
 800c1fe:	f000 fd51 	bl	800cca4 <__ieee754_sqrt>
 800c202:	4b15      	ldr	r3, [pc, #84]	; (800c258 <sqrt+0x64>)
 800c204:	eeb0 8a40 	vmov.f32	s16, s0
 800c208:	eef0 8a60 	vmov.f32	s17, s1
 800c20c:	f993 3000 	ldrsb.w	r3, [r3]
 800c210:	3301      	adds	r3, #1
 800c212:	d019      	beq.n	800c248 <sqrt+0x54>
 800c214:	4622      	mov	r2, r4
 800c216:	462b      	mov	r3, r5
 800c218:	4620      	mov	r0, r4
 800c21a:	4629      	mov	r1, r5
 800c21c:	f7f4 fc9e 	bl	8000b5c <__aeabi_dcmpun>
 800c220:	b990      	cbnz	r0, 800c248 <sqrt+0x54>
 800c222:	2200      	movs	r2, #0
 800c224:	2300      	movs	r3, #0
 800c226:	4620      	mov	r0, r4
 800c228:	4629      	mov	r1, r5
 800c22a:	f7f4 fc6f 	bl	8000b0c <__aeabi_dcmplt>
 800c22e:	b158      	cbz	r0, 800c248 <sqrt+0x54>
 800c230:	f7fe ff56 	bl	800b0e0 <__errno>
 800c234:	2321      	movs	r3, #33	; 0x21
 800c236:	6003      	str	r3, [r0, #0]
 800c238:	2200      	movs	r2, #0
 800c23a:	2300      	movs	r3, #0
 800c23c:	4610      	mov	r0, r2
 800c23e:	4619      	mov	r1, r3
 800c240:	f7f4 fb1c 	bl	800087c <__aeabi_ddiv>
 800c244:	ec41 0b18 	vmov	d8, r0, r1
 800c248:	eeb0 0a48 	vmov.f32	s0, s16
 800c24c:	eef0 0a68 	vmov.f32	s1, s17
 800c250:	ecbd 8b02 	vpop	{d8}
 800c254:	bd38      	pop	{r3, r4, r5, pc}
 800c256:	bf00      	nop
 800c258:	200000f8 	.word	0x200000f8
 800c25c:	00000000 	.word	0x00000000

0800c260 <__ieee754_pow>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	ed2d 8b06 	vpush	{d8-d10}
 800c268:	b08d      	sub	sp, #52	; 0x34
 800c26a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c26e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c272:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c276:	ea56 0100 	orrs.w	r1, r6, r0
 800c27a:	ec53 2b10 	vmov	r2, r3, d0
 800c27e:	f000 84d1 	beq.w	800cc24 <__ieee754_pow+0x9c4>
 800c282:	497f      	ldr	r1, [pc, #508]	; (800c480 <__ieee754_pow+0x220>)
 800c284:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c288:	428c      	cmp	r4, r1
 800c28a:	ee10 8a10 	vmov	r8, s0
 800c28e:	4699      	mov	r9, r3
 800c290:	dc09      	bgt.n	800c2a6 <__ieee754_pow+0x46>
 800c292:	d103      	bne.n	800c29c <__ieee754_pow+0x3c>
 800c294:	b97a      	cbnz	r2, 800c2b6 <__ieee754_pow+0x56>
 800c296:	42a6      	cmp	r6, r4
 800c298:	dd02      	ble.n	800c2a0 <__ieee754_pow+0x40>
 800c29a:	e00c      	b.n	800c2b6 <__ieee754_pow+0x56>
 800c29c:	428e      	cmp	r6, r1
 800c29e:	dc02      	bgt.n	800c2a6 <__ieee754_pow+0x46>
 800c2a0:	428e      	cmp	r6, r1
 800c2a2:	d110      	bne.n	800c2c6 <__ieee754_pow+0x66>
 800c2a4:	b178      	cbz	r0, 800c2c6 <__ieee754_pow+0x66>
 800c2a6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c2aa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c2ae:	ea54 0308 	orrs.w	r3, r4, r8
 800c2b2:	f000 84b7 	beq.w	800cc24 <__ieee754_pow+0x9c4>
 800c2b6:	4873      	ldr	r0, [pc, #460]	; (800c484 <__ieee754_pow+0x224>)
 800c2b8:	b00d      	add	sp, #52	; 0x34
 800c2ba:	ecbd 8b06 	vpop	{d8-d10}
 800c2be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c2:	f000 bdb9 	b.w	800ce38 <nan>
 800c2c6:	f1b9 0f00 	cmp.w	r9, #0
 800c2ca:	da36      	bge.n	800c33a <__ieee754_pow+0xda>
 800c2cc:	496e      	ldr	r1, [pc, #440]	; (800c488 <__ieee754_pow+0x228>)
 800c2ce:	428e      	cmp	r6, r1
 800c2d0:	dc51      	bgt.n	800c376 <__ieee754_pow+0x116>
 800c2d2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c2d6:	428e      	cmp	r6, r1
 800c2d8:	f340 84af 	ble.w	800cc3a <__ieee754_pow+0x9da>
 800c2dc:	1531      	asrs	r1, r6, #20
 800c2de:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c2e2:	2914      	cmp	r1, #20
 800c2e4:	dd0f      	ble.n	800c306 <__ieee754_pow+0xa6>
 800c2e6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c2ea:	fa20 fc01 	lsr.w	ip, r0, r1
 800c2ee:	fa0c f101 	lsl.w	r1, ip, r1
 800c2f2:	4281      	cmp	r1, r0
 800c2f4:	f040 84a1 	bne.w	800cc3a <__ieee754_pow+0x9da>
 800c2f8:	f00c 0c01 	and.w	ip, ip, #1
 800c2fc:	f1cc 0102 	rsb	r1, ip, #2
 800c300:	9100      	str	r1, [sp, #0]
 800c302:	b180      	cbz	r0, 800c326 <__ieee754_pow+0xc6>
 800c304:	e059      	b.n	800c3ba <__ieee754_pow+0x15a>
 800c306:	2800      	cmp	r0, #0
 800c308:	d155      	bne.n	800c3b6 <__ieee754_pow+0x156>
 800c30a:	f1c1 0114 	rsb	r1, r1, #20
 800c30e:	fa46 fc01 	asr.w	ip, r6, r1
 800c312:	fa0c f101 	lsl.w	r1, ip, r1
 800c316:	42b1      	cmp	r1, r6
 800c318:	f040 848c 	bne.w	800cc34 <__ieee754_pow+0x9d4>
 800c31c:	f00c 0c01 	and.w	ip, ip, #1
 800c320:	f1cc 0102 	rsb	r1, ip, #2
 800c324:	9100      	str	r1, [sp, #0]
 800c326:	4959      	ldr	r1, [pc, #356]	; (800c48c <__ieee754_pow+0x22c>)
 800c328:	428e      	cmp	r6, r1
 800c32a:	d12d      	bne.n	800c388 <__ieee754_pow+0x128>
 800c32c:	2f00      	cmp	r7, #0
 800c32e:	da79      	bge.n	800c424 <__ieee754_pow+0x1c4>
 800c330:	4956      	ldr	r1, [pc, #344]	; (800c48c <__ieee754_pow+0x22c>)
 800c332:	2000      	movs	r0, #0
 800c334:	f7f4 faa2 	bl	800087c <__aeabi_ddiv>
 800c338:	e016      	b.n	800c368 <__ieee754_pow+0x108>
 800c33a:	2100      	movs	r1, #0
 800c33c:	9100      	str	r1, [sp, #0]
 800c33e:	2800      	cmp	r0, #0
 800c340:	d13b      	bne.n	800c3ba <__ieee754_pow+0x15a>
 800c342:	494f      	ldr	r1, [pc, #316]	; (800c480 <__ieee754_pow+0x220>)
 800c344:	428e      	cmp	r6, r1
 800c346:	d1ee      	bne.n	800c326 <__ieee754_pow+0xc6>
 800c348:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c34c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c350:	ea53 0308 	orrs.w	r3, r3, r8
 800c354:	f000 8466 	beq.w	800cc24 <__ieee754_pow+0x9c4>
 800c358:	4b4d      	ldr	r3, [pc, #308]	; (800c490 <__ieee754_pow+0x230>)
 800c35a:	429c      	cmp	r4, r3
 800c35c:	dd0d      	ble.n	800c37a <__ieee754_pow+0x11a>
 800c35e:	2f00      	cmp	r7, #0
 800c360:	f280 8464 	bge.w	800cc2c <__ieee754_pow+0x9cc>
 800c364:	2000      	movs	r0, #0
 800c366:	2100      	movs	r1, #0
 800c368:	ec41 0b10 	vmov	d0, r0, r1
 800c36c:	b00d      	add	sp, #52	; 0x34
 800c36e:	ecbd 8b06 	vpop	{d8-d10}
 800c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c376:	2102      	movs	r1, #2
 800c378:	e7e0      	b.n	800c33c <__ieee754_pow+0xdc>
 800c37a:	2f00      	cmp	r7, #0
 800c37c:	daf2      	bge.n	800c364 <__ieee754_pow+0x104>
 800c37e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c382:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c386:	e7ef      	b.n	800c368 <__ieee754_pow+0x108>
 800c388:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c38c:	d104      	bne.n	800c398 <__ieee754_pow+0x138>
 800c38e:	4610      	mov	r0, r2
 800c390:	4619      	mov	r1, r3
 800c392:	f7f4 f949 	bl	8000628 <__aeabi_dmul>
 800c396:	e7e7      	b.n	800c368 <__ieee754_pow+0x108>
 800c398:	493e      	ldr	r1, [pc, #248]	; (800c494 <__ieee754_pow+0x234>)
 800c39a:	428f      	cmp	r7, r1
 800c39c:	d10d      	bne.n	800c3ba <__ieee754_pow+0x15a>
 800c39e:	f1b9 0f00 	cmp.w	r9, #0
 800c3a2:	db0a      	blt.n	800c3ba <__ieee754_pow+0x15a>
 800c3a4:	ec43 2b10 	vmov	d0, r2, r3
 800c3a8:	b00d      	add	sp, #52	; 0x34
 800c3aa:	ecbd 8b06 	vpop	{d8-d10}
 800c3ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b2:	f000 bc77 	b.w	800cca4 <__ieee754_sqrt>
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	9100      	str	r1, [sp, #0]
 800c3ba:	ec43 2b10 	vmov	d0, r2, r3
 800c3be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3c2:	f000 fd23 	bl	800ce0c <fabs>
 800c3c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ca:	ec51 0b10 	vmov	r0, r1, d0
 800c3ce:	f1b8 0f00 	cmp.w	r8, #0
 800c3d2:	d12a      	bne.n	800c42a <__ieee754_pow+0x1ca>
 800c3d4:	b12c      	cbz	r4, 800c3e2 <__ieee754_pow+0x182>
 800c3d6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c48c <__ieee754_pow+0x22c>
 800c3da:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c3de:	45e6      	cmp	lr, ip
 800c3e0:	d123      	bne.n	800c42a <__ieee754_pow+0x1ca>
 800c3e2:	2f00      	cmp	r7, #0
 800c3e4:	da05      	bge.n	800c3f2 <__ieee754_pow+0x192>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	4927      	ldr	r1, [pc, #156]	; (800c48c <__ieee754_pow+0x22c>)
 800c3ee:	f7f4 fa45 	bl	800087c <__aeabi_ddiv>
 800c3f2:	f1b9 0f00 	cmp.w	r9, #0
 800c3f6:	dab7      	bge.n	800c368 <__ieee754_pow+0x108>
 800c3f8:	9b00      	ldr	r3, [sp, #0]
 800c3fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c3fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c402:	4323      	orrs	r3, r4
 800c404:	d108      	bne.n	800c418 <__ieee754_pow+0x1b8>
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	4610      	mov	r0, r2
 800c40c:	4619      	mov	r1, r3
 800c40e:	f7f3 ff53 	bl	80002b8 <__aeabi_dsub>
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	e78d      	b.n	800c334 <__ieee754_pow+0xd4>
 800c418:	9b00      	ldr	r3, [sp, #0]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d1a4      	bne.n	800c368 <__ieee754_pow+0x108>
 800c41e:	4602      	mov	r2, r0
 800c420:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c424:	4610      	mov	r0, r2
 800c426:	4619      	mov	r1, r3
 800c428:	e79e      	b.n	800c368 <__ieee754_pow+0x108>
 800c42a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c42e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c432:	950a      	str	r5, [sp, #40]	; 0x28
 800c434:	9d00      	ldr	r5, [sp, #0]
 800c436:	46ac      	mov	ip, r5
 800c438:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c43a:	ea5c 0505 	orrs.w	r5, ip, r5
 800c43e:	d0e4      	beq.n	800c40a <__ieee754_pow+0x1aa>
 800c440:	4b15      	ldr	r3, [pc, #84]	; (800c498 <__ieee754_pow+0x238>)
 800c442:	429e      	cmp	r6, r3
 800c444:	f340 80fc 	ble.w	800c640 <__ieee754_pow+0x3e0>
 800c448:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c44c:	429e      	cmp	r6, r3
 800c44e:	4b10      	ldr	r3, [pc, #64]	; (800c490 <__ieee754_pow+0x230>)
 800c450:	dd07      	ble.n	800c462 <__ieee754_pow+0x202>
 800c452:	429c      	cmp	r4, r3
 800c454:	dc0a      	bgt.n	800c46c <__ieee754_pow+0x20c>
 800c456:	2f00      	cmp	r7, #0
 800c458:	da84      	bge.n	800c364 <__ieee754_pow+0x104>
 800c45a:	a307      	add	r3, pc, #28	; (adr r3, 800c478 <__ieee754_pow+0x218>)
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	e795      	b.n	800c38e <__ieee754_pow+0x12e>
 800c462:	429c      	cmp	r4, r3
 800c464:	dbf7      	blt.n	800c456 <__ieee754_pow+0x1f6>
 800c466:	4b09      	ldr	r3, [pc, #36]	; (800c48c <__ieee754_pow+0x22c>)
 800c468:	429c      	cmp	r4, r3
 800c46a:	dd17      	ble.n	800c49c <__ieee754_pow+0x23c>
 800c46c:	2f00      	cmp	r7, #0
 800c46e:	dcf4      	bgt.n	800c45a <__ieee754_pow+0x1fa>
 800c470:	e778      	b.n	800c364 <__ieee754_pow+0x104>
 800c472:	bf00      	nop
 800c474:	f3af 8000 	nop.w
 800c478:	8800759c 	.word	0x8800759c
 800c47c:	7e37e43c 	.word	0x7e37e43c
 800c480:	7ff00000 	.word	0x7ff00000
 800c484:	0800d4c9 	.word	0x0800d4c9
 800c488:	433fffff 	.word	0x433fffff
 800c48c:	3ff00000 	.word	0x3ff00000
 800c490:	3fefffff 	.word	0x3fefffff
 800c494:	3fe00000 	.word	0x3fe00000
 800c498:	41e00000 	.word	0x41e00000
 800c49c:	4b64      	ldr	r3, [pc, #400]	; (800c630 <__ieee754_pow+0x3d0>)
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f7f3 ff0a 	bl	80002b8 <__aeabi_dsub>
 800c4a4:	a356      	add	r3, pc, #344	; (adr r3, 800c600 <__ieee754_pow+0x3a0>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	460d      	mov	r5, r1
 800c4ae:	f7f4 f8bb 	bl	8000628 <__aeabi_dmul>
 800c4b2:	a355      	add	r3, pc, #340	; (adr r3, 800c608 <__ieee754_pow+0x3a8>)
 800c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b8:	4606      	mov	r6, r0
 800c4ba:	460f      	mov	r7, r1
 800c4bc:	4620      	mov	r0, r4
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f7f4 f8b2 	bl	8000628 <__aeabi_dmul>
 800c4c4:	4b5b      	ldr	r3, [pc, #364]	; (800c634 <__ieee754_pow+0x3d4>)
 800c4c6:	4682      	mov	sl, r0
 800c4c8:	468b      	mov	fp, r1
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	f7f4 f8aa 	bl	8000628 <__aeabi_dmul>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	a14d      	add	r1, pc, #308	; (adr r1, 800c610 <__ieee754_pow+0x3b0>)
 800c4da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4de:	f7f3 feeb 	bl	80002b8 <__aeabi_dsub>
 800c4e2:	4622      	mov	r2, r4
 800c4e4:	462b      	mov	r3, r5
 800c4e6:	f7f4 f89f 	bl	8000628 <__aeabi_dmul>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	4951      	ldr	r1, [pc, #324]	; (800c638 <__ieee754_pow+0x3d8>)
 800c4f2:	f7f3 fee1 	bl	80002b8 <__aeabi_dsub>
 800c4f6:	4622      	mov	r2, r4
 800c4f8:	4680      	mov	r8, r0
 800c4fa:	4689      	mov	r9, r1
 800c4fc:	462b      	mov	r3, r5
 800c4fe:	4620      	mov	r0, r4
 800c500:	4629      	mov	r1, r5
 800c502:	f7f4 f891 	bl	8000628 <__aeabi_dmul>
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	4640      	mov	r0, r8
 800c50c:	4649      	mov	r1, r9
 800c50e:	f7f4 f88b 	bl	8000628 <__aeabi_dmul>
 800c512:	a341      	add	r3, pc, #260	; (adr r3, 800c618 <__ieee754_pow+0x3b8>)
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	f7f4 f886 	bl	8000628 <__aeabi_dmul>
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	4650      	mov	r0, sl
 800c522:	4659      	mov	r1, fp
 800c524:	f7f3 fec8 	bl	80002b8 <__aeabi_dsub>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4680      	mov	r8, r0
 800c52e:	4689      	mov	r9, r1
 800c530:	4630      	mov	r0, r6
 800c532:	4639      	mov	r1, r7
 800c534:	f7f3 fec2 	bl	80002bc <__adddf3>
 800c538:	2400      	movs	r4, #0
 800c53a:	4632      	mov	r2, r6
 800c53c:	463b      	mov	r3, r7
 800c53e:	4620      	mov	r0, r4
 800c540:	460d      	mov	r5, r1
 800c542:	f7f3 feb9 	bl	80002b8 <__aeabi_dsub>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4640      	mov	r0, r8
 800c54c:	4649      	mov	r1, r9
 800c54e:	f7f3 feb3 	bl	80002b8 <__aeabi_dsub>
 800c552:	9b00      	ldr	r3, [sp, #0]
 800c554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c556:	3b01      	subs	r3, #1
 800c558:	4313      	orrs	r3, r2
 800c55a:	4682      	mov	sl, r0
 800c55c:	468b      	mov	fp, r1
 800c55e:	f040 81f1 	bne.w	800c944 <__ieee754_pow+0x6e4>
 800c562:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c620 <__ieee754_pow+0x3c0>
 800c566:	eeb0 8a47 	vmov.f32	s16, s14
 800c56a:	eef0 8a67 	vmov.f32	s17, s15
 800c56e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c572:	2600      	movs	r6, #0
 800c574:	4632      	mov	r2, r6
 800c576:	463b      	mov	r3, r7
 800c578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c57c:	f7f3 fe9c 	bl	80002b8 <__aeabi_dsub>
 800c580:	4622      	mov	r2, r4
 800c582:	462b      	mov	r3, r5
 800c584:	f7f4 f850 	bl	8000628 <__aeabi_dmul>
 800c588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c58c:	4680      	mov	r8, r0
 800c58e:	4689      	mov	r9, r1
 800c590:	4650      	mov	r0, sl
 800c592:	4659      	mov	r1, fp
 800c594:	f7f4 f848 	bl	8000628 <__aeabi_dmul>
 800c598:	4602      	mov	r2, r0
 800c59a:	460b      	mov	r3, r1
 800c59c:	4640      	mov	r0, r8
 800c59e:	4649      	mov	r1, r9
 800c5a0:	f7f3 fe8c 	bl	80002bc <__adddf3>
 800c5a4:	4632      	mov	r2, r6
 800c5a6:	463b      	mov	r3, r7
 800c5a8:	4680      	mov	r8, r0
 800c5aa:	4689      	mov	r9, r1
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	f7f4 f83a 	bl	8000628 <__aeabi_dmul>
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	460d      	mov	r5, r1
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	4649      	mov	r1, r9
 800c5be:	4640      	mov	r0, r8
 800c5c0:	f7f3 fe7c 	bl	80002bc <__adddf3>
 800c5c4:	4b1d      	ldr	r3, [pc, #116]	; (800c63c <__ieee754_pow+0x3dc>)
 800c5c6:	4299      	cmp	r1, r3
 800c5c8:	ec45 4b19 	vmov	d9, r4, r5
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	460f      	mov	r7, r1
 800c5d0:	468b      	mov	fp, r1
 800c5d2:	f340 82fe 	ble.w	800cbd2 <__ieee754_pow+0x972>
 800c5d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c5da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c5de:	4303      	orrs	r3, r0
 800c5e0:	f000 81f0 	beq.w	800c9c4 <__ieee754_pow+0x764>
 800c5e4:	a310      	add	r3, pc, #64	; (adr r3, 800c628 <__ieee754_pow+0x3c8>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	ec51 0b18 	vmov	r0, r1, d8
 800c5ee:	f7f4 f81b 	bl	8000628 <__aeabi_dmul>
 800c5f2:	a30d      	add	r3, pc, #52	; (adr r3, 800c628 <__ieee754_pow+0x3c8>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	e6cb      	b.n	800c392 <__ieee754_pow+0x132>
 800c5fa:	bf00      	nop
 800c5fc:	f3af 8000 	nop.w
 800c600:	60000000 	.word	0x60000000
 800c604:	3ff71547 	.word	0x3ff71547
 800c608:	f85ddf44 	.word	0xf85ddf44
 800c60c:	3e54ae0b 	.word	0x3e54ae0b
 800c610:	55555555 	.word	0x55555555
 800c614:	3fd55555 	.word	0x3fd55555
 800c618:	652b82fe 	.word	0x652b82fe
 800c61c:	3ff71547 	.word	0x3ff71547
 800c620:	00000000 	.word	0x00000000
 800c624:	bff00000 	.word	0xbff00000
 800c628:	8800759c 	.word	0x8800759c
 800c62c:	7e37e43c 	.word	0x7e37e43c
 800c630:	3ff00000 	.word	0x3ff00000
 800c634:	3fd00000 	.word	0x3fd00000
 800c638:	3fe00000 	.word	0x3fe00000
 800c63c:	408fffff 	.word	0x408fffff
 800c640:	4bd7      	ldr	r3, [pc, #860]	; (800c9a0 <__ieee754_pow+0x740>)
 800c642:	ea03 0309 	and.w	r3, r3, r9
 800c646:	2200      	movs	r2, #0
 800c648:	b92b      	cbnz	r3, 800c656 <__ieee754_pow+0x3f6>
 800c64a:	4bd6      	ldr	r3, [pc, #856]	; (800c9a4 <__ieee754_pow+0x744>)
 800c64c:	f7f3 ffec 	bl	8000628 <__aeabi_dmul>
 800c650:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c654:	460c      	mov	r4, r1
 800c656:	1523      	asrs	r3, r4, #20
 800c658:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c65c:	4413      	add	r3, r2
 800c65e:	9309      	str	r3, [sp, #36]	; 0x24
 800c660:	4bd1      	ldr	r3, [pc, #836]	; (800c9a8 <__ieee754_pow+0x748>)
 800c662:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c666:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c66a:	429c      	cmp	r4, r3
 800c66c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c670:	dd08      	ble.n	800c684 <__ieee754_pow+0x424>
 800c672:	4bce      	ldr	r3, [pc, #824]	; (800c9ac <__ieee754_pow+0x74c>)
 800c674:	429c      	cmp	r4, r3
 800c676:	f340 8163 	ble.w	800c940 <__ieee754_pow+0x6e0>
 800c67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67c:	3301      	adds	r3, #1
 800c67e:	9309      	str	r3, [sp, #36]	; 0x24
 800c680:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c684:	2400      	movs	r4, #0
 800c686:	00e3      	lsls	r3, r4, #3
 800c688:	930b      	str	r3, [sp, #44]	; 0x2c
 800c68a:	4bc9      	ldr	r3, [pc, #804]	; (800c9b0 <__ieee754_pow+0x750>)
 800c68c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c690:	ed93 7b00 	vldr	d7, [r3]
 800c694:	4629      	mov	r1, r5
 800c696:	ec53 2b17 	vmov	r2, r3, d7
 800c69a:	eeb0 8a47 	vmov.f32	s16, s14
 800c69e:	eef0 8a67 	vmov.f32	s17, s15
 800c6a2:	4682      	mov	sl, r0
 800c6a4:	f7f3 fe08 	bl	80002b8 <__aeabi_dsub>
 800c6a8:	4652      	mov	r2, sl
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	460f      	mov	r7, r1
 800c6ae:	462b      	mov	r3, r5
 800c6b0:	ec51 0b18 	vmov	r0, r1, d8
 800c6b4:	f7f3 fe02 	bl	80002bc <__adddf3>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	2000      	movs	r0, #0
 800c6be:	49bd      	ldr	r1, [pc, #756]	; (800c9b4 <__ieee754_pow+0x754>)
 800c6c0:	f7f4 f8dc 	bl	800087c <__aeabi_ddiv>
 800c6c4:	ec41 0b19 	vmov	d9, r0, r1
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	4639      	mov	r1, r7
 800c6d0:	f7f3 ffaa 	bl	8000628 <__aeabi_dmul>
 800c6d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c6d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	9304      	str	r3, [sp, #16]
 800c6e4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c6e8:	46ab      	mov	fp, r5
 800c6ea:	106d      	asrs	r5, r5, #1
 800c6ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c6f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c6f4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	4649      	mov	r1, r9
 800c6fe:	4614      	mov	r4, r2
 800c700:	461d      	mov	r5, r3
 800c702:	f7f3 ff91 	bl	8000628 <__aeabi_dmul>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4630      	mov	r0, r6
 800c70c:	4639      	mov	r1, r7
 800c70e:	f7f3 fdd3 	bl	80002b8 <__aeabi_dsub>
 800c712:	ec53 2b18 	vmov	r2, r3, d8
 800c716:	4606      	mov	r6, r0
 800c718:	460f      	mov	r7, r1
 800c71a:	4620      	mov	r0, r4
 800c71c:	4629      	mov	r1, r5
 800c71e:	f7f3 fdcb 	bl	80002b8 <__aeabi_dsub>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4650      	mov	r0, sl
 800c728:	4659      	mov	r1, fp
 800c72a:	f7f3 fdc5 	bl	80002b8 <__aeabi_dsub>
 800c72e:	4642      	mov	r2, r8
 800c730:	464b      	mov	r3, r9
 800c732:	f7f3 ff79 	bl	8000628 <__aeabi_dmul>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4630      	mov	r0, r6
 800c73c:	4639      	mov	r1, r7
 800c73e:	f7f3 fdbb 	bl	80002b8 <__aeabi_dsub>
 800c742:	ec53 2b19 	vmov	r2, r3, d9
 800c746:	f7f3 ff6f 	bl	8000628 <__aeabi_dmul>
 800c74a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c74e:	ec41 0b18 	vmov	d8, r0, r1
 800c752:	4610      	mov	r0, r2
 800c754:	4619      	mov	r1, r3
 800c756:	f7f3 ff67 	bl	8000628 <__aeabi_dmul>
 800c75a:	a37d      	add	r3, pc, #500	; (adr r3, 800c950 <__ieee754_pow+0x6f0>)
 800c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c760:	4604      	mov	r4, r0
 800c762:	460d      	mov	r5, r1
 800c764:	f7f3 ff60 	bl	8000628 <__aeabi_dmul>
 800c768:	a37b      	add	r3, pc, #492	; (adr r3, 800c958 <__ieee754_pow+0x6f8>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	f7f3 fda5 	bl	80002bc <__adddf3>
 800c772:	4622      	mov	r2, r4
 800c774:	462b      	mov	r3, r5
 800c776:	f7f3 ff57 	bl	8000628 <__aeabi_dmul>
 800c77a:	a379      	add	r3, pc, #484	; (adr r3, 800c960 <__ieee754_pow+0x700>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	f7f3 fd9c 	bl	80002bc <__adddf3>
 800c784:	4622      	mov	r2, r4
 800c786:	462b      	mov	r3, r5
 800c788:	f7f3 ff4e 	bl	8000628 <__aeabi_dmul>
 800c78c:	a376      	add	r3, pc, #472	; (adr r3, 800c968 <__ieee754_pow+0x708>)
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	f7f3 fd93 	bl	80002bc <__adddf3>
 800c796:	4622      	mov	r2, r4
 800c798:	462b      	mov	r3, r5
 800c79a:	f7f3 ff45 	bl	8000628 <__aeabi_dmul>
 800c79e:	a374      	add	r3, pc, #464	; (adr r3, 800c970 <__ieee754_pow+0x710>)
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	f7f3 fd8a 	bl	80002bc <__adddf3>
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	462b      	mov	r3, r5
 800c7ac:	f7f3 ff3c 	bl	8000628 <__aeabi_dmul>
 800c7b0:	a371      	add	r3, pc, #452	; (adr r3, 800c978 <__ieee754_pow+0x718>)
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	f7f3 fd81 	bl	80002bc <__adddf3>
 800c7ba:	4622      	mov	r2, r4
 800c7bc:	4606      	mov	r6, r0
 800c7be:	460f      	mov	r7, r1
 800c7c0:	462b      	mov	r3, r5
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7f3 ff2f 	bl	8000628 <__aeabi_dmul>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	4639      	mov	r1, r7
 800c7d2:	f7f3 ff29 	bl	8000628 <__aeabi_dmul>
 800c7d6:	4642      	mov	r2, r8
 800c7d8:	4604      	mov	r4, r0
 800c7da:	460d      	mov	r5, r1
 800c7dc:	464b      	mov	r3, r9
 800c7de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7e2:	f7f3 fd6b 	bl	80002bc <__adddf3>
 800c7e6:	ec53 2b18 	vmov	r2, r3, d8
 800c7ea:	f7f3 ff1d 	bl	8000628 <__aeabi_dmul>
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	462b      	mov	r3, r5
 800c7f2:	f7f3 fd63 	bl	80002bc <__adddf3>
 800c7f6:	4642      	mov	r2, r8
 800c7f8:	4682      	mov	sl, r0
 800c7fa:	468b      	mov	fp, r1
 800c7fc:	464b      	mov	r3, r9
 800c7fe:	4640      	mov	r0, r8
 800c800:	4649      	mov	r1, r9
 800c802:	f7f3 ff11 	bl	8000628 <__aeabi_dmul>
 800c806:	4b6c      	ldr	r3, [pc, #432]	; (800c9b8 <__ieee754_pow+0x758>)
 800c808:	2200      	movs	r2, #0
 800c80a:	4606      	mov	r6, r0
 800c80c:	460f      	mov	r7, r1
 800c80e:	f7f3 fd55 	bl	80002bc <__adddf3>
 800c812:	4652      	mov	r2, sl
 800c814:	465b      	mov	r3, fp
 800c816:	f7f3 fd51 	bl	80002bc <__adddf3>
 800c81a:	9c04      	ldr	r4, [sp, #16]
 800c81c:	460d      	mov	r5, r1
 800c81e:	4622      	mov	r2, r4
 800c820:	460b      	mov	r3, r1
 800c822:	4640      	mov	r0, r8
 800c824:	4649      	mov	r1, r9
 800c826:	f7f3 feff 	bl	8000628 <__aeabi_dmul>
 800c82a:	4b63      	ldr	r3, [pc, #396]	; (800c9b8 <__ieee754_pow+0x758>)
 800c82c:	4680      	mov	r8, r0
 800c82e:	4689      	mov	r9, r1
 800c830:	2200      	movs	r2, #0
 800c832:	4620      	mov	r0, r4
 800c834:	4629      	mov	r1, r5
 800c836:	f7f3 fd3f 	bl	80002b8 <__aeabi_dsub>
 800c83a:	4632      	mov	r2, r6
 800c83c:	463b      	mov	r3, r7
 800c83e:	f7f3 fd3b 	bl	80002b8 <__aeabi_dsub>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4650      	mov	r0, sl
 800c848:	4659      	mov	r1, fp
 800c84a:	f7f3 fd35 	bl	80002b8 <__aeabi_dsub>
 800c84e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c852:	f7f3 fee9 	bl	8000628 <__aeabi_dmul>
 800c856:	4622      	mov	r2, r4
 800c858:	4606      	mov	r6, r0
 800c85a:	460f      	mov	r7, r1
 800c85c:	462b      	mov	r3, r5
 800c85e:	ec51 0b18 	vmov	r0, r1, d8
 800c862:	f7f3 fee1 	bl	8000628 <__aeabi_dmul>
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	4630      	mov	r0, r6
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f3 fd25 	bl	80002bc <__adddf3>
 800c872:	4606      	mov	r6, r0
 800c874:	460f      	mov	r7, r1
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4640      	mov	r0, r8
 800c87c:	4649      	mov	r1, r9
 800c87e:	f7f3 fd1d 	bl	80002bc <__adddf3>
 800c882:	9c04      	ldr	r4, [sp, #16]
 800c884:	a33e      	add	r3, pc, #248	; (adr r3, 800c980 <__ieee754_pow+0x720>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	4620      	mov	r0, r4
 800c88c:	460d      	mov	r5, r1
 800c88e:	f7f3 fecb 	bl	8000628 <__aeabi_dmul>
 800c892:	4642      	mov	r2, r8
 800c894:	ec41 0b18 	vmov	d8, r0, r1
 800c898:	464b      	mov	r3, r9
 800c89a:	4620      	mov	r0, r4
 800c89c:	4629      	mov	r1, r5
 800c89e:	f7f3 fd0b 	bl	80002b8 <__aeabi_dsub>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f3 fd05 	bl	80002b8 <__aeabi_dsub>
 800c8ae:	a336      	add	r3, pc, #216	; (adr r3, 800c988 <__ieee754_pow+0x728>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	f7f3 feb8 	bl	8000628 <__aeabi_dmul>
 800c8b8:	a335      	add	r3, pc, #212	; (adr r3, 800c990 <__ieee754_pow+0x730>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	4606      	mov	r6, r0
 800c8c0:	460f      	mov	r7, r1
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	4629      	mov	r1, r5
 800c8c6:	f7f3 feaf 	bl	8000628 <__aeabi_dmul>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	f7f3 fcf3 	bl	80002bc <__adddf3>
 800c8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8d8:	4b38      	ldr	r3, [pc, #224]	; (800c9bc <__ieee754_pow+0x75c>)
 800c8da:	4413      	add	r3, r2
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	f7f3 fcec 	bl	80002bc <__adddf3>
 800c8e4:	4682      	mov	sl, r0
 800c8e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8e8:	468b      	mov	fp, r1
 800c8ea:	f7f3 fe33 	bl	8000554 <__aeabi_i2d>
 800c8ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8f0:	4b33      	ldr	r3, [pc, #204]	; (800c9c0 <__ieee754_pow+0x760>)
 800c8f2:	4413      	add	r3, r2
 800c8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c8f8:	4606      	mov	r6, r0
 800c8fa:	460f      	mov	r7, r1
 800c8fc:	4652      	mov	r2, sl
 800c8fe:	465b      	mov	r3, fp
 800c900:	ec51 0b18 	vmov	r0, r1, d8
 800c904:	f7f3 fcda 	bl	80002bc <__adddf3>
 800c908:	4642      	mov	r2, r8
 800c90a:	464b      	mov	r3, r9
 800c90c:	f7f3 fcd6 	bl	80002bc <__adddf3>
 800c910:	4632      	mov	r2, r6
 800c912:	463b      	mov	r3, r7
 800c914:	f7f3 fcd2 	bl	80002bc <__adddf3>
 800c918:	9c04      	ldr	r4, [sp, #16]
 800c91a:	4632      	mov	r2, r6
 800c91c:	463b      	mov	r3, r7
 800c91e:	4620      	mov	r0, r4
 800c920:	460d      	mov	r5, r1
 800c922:	f7f3 fcc9 	bl	80002b8 <__aeabi_dsub>
 800c926:	4642      	mov	r2, r8
 800c928:	464b      	mov	r3, r9
 800c92a:	f7f3 fcc5 	bl	80002b8 <__aeabi_dsub>
 800c92e:	ec53 2b18 	vmov	r2, r3, d8
 800c932:	f7f3 fcc1 	bl	80002b8 <__aeabi_dsub>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	4650      	mov	r0, sl
 800c93c:	4659      	mov	r1, fp
 800c93e:	e606      	b.n	800c54e <__ieee754_pow+0x2ee>
 800c940:	2401      	movs	r4, #1
 800c942:	e6a0      	b.n	800c686 <__ieee754_pow+0x426>
 800c944:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c998 <__ieee754_pow+0x738>
 800c948:	e60d      	b.n	800c566 <__ieee754_pow+0x306>
 800c94a:	bf00      	nop
 800c94c:	f3af 8000 	nop.w
 800c950:	4a454eef 	.word	0x4a454eef
 800c954:	3fca7e28 	.word	0x3fca7e28
 800c958:	93c9db65 	.word	0x93c9db65
 800c95c:	3fcd864a 	.word	0x3fcd864a
 800c960:	a91d4101 	.word	0xa91d4101
 800c964:	3fd17460 	.word	0x3fd17460
 800c968:	518f264d 	.word	0x518f264d
 800c96c:	3fd55555 	.word	0x3fd55555
 800c970:	db6fabff 	.word	0xdb6fabff
 800c974:	3fdb6db6 	.word	0x3fdb6db6
 800c978:	33333303 	.word	0x33333303
 800c97c:	3fe33333 	.word	0x3fe33333
 800c980:	e0000000 	.word	0xe0000000
 800c984:	3feec709 	.word	0x3feec709
 800c988:	dc3a03fd 	.word	0xdc3a03fd
 800c98c:	3feec709 	.word	0x3feec709
 800c990:	145b01f5 	.word	0x145b01f5
 800c994:	be3e2fe0 	.word	0xbe3e2fe0
 800c998:	00000000 	.word	0x00000000
 800c99c:	3ff00000 	.word	0x3ff00000
 800c9a0:	7ff00000 	.word	0x7ff00000
 800c9a4:	43400000 	.word	0x43400000
 800c9a8:	0003988e 	.word	0x0003988e
 800c9ac:	000bb679 	.word	0x000bb679
 800c9b0:	0800d568 	.word	0x0800d568
 800c9b4:	3ff00000 	.word	0x3ff00000
 800c9b8:	40080000 	.word	0x40080000
 800c9bc:	0800d588 	.word	0x0800d588
 800c9c0:	0800d578 	.word	0x0800d578
 800c9c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800cc9c <__ieee754_pow+0xa3c>)
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	f7f3 fc75 	bl	80002bc <__adddf3>
 800c9d2:	4622      	mov	r2, r4
 800c9d4:	ec41 0b1a 	vmov	d10, r0, r1
 800c9d8:	462b      	mov	r3, r5
 800c9da:	4630      	mov	r0, r6
 800c9dc:	4639      	mov	r1, r7
 800c9de:	f7f3 fc6b 	bl	80002b8 <__aeabi_dsub>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	ec51 0b1a 	vmov	r0, r1, d10
 800c9ea:	f7f4 f8ad 	bl	8000b48 <__aeabi_dcmpgt>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f47f adf8 	bne.w	800c5e4 <__ieee754_pow+0x384>
 800c9f4:	4aa4      	ldr	r2, [pc, #656]	; (800cc88 <__ieee754_pow+0xa28>)
 800c9f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	f340 810b 	ble.w	800cc16 <__ieee754_pow+0x9b6>
 800ca00:	151b      	asrs	r3, r3, #20
 800ca02:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ca06:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ca0a:	fa4a f303 	asr.w	r3, sl, r3
 800ca0e:	445b      	add	r3, fp
 800ca10:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ca14:	4e9d      	ldr	r6, [pc, #628]	; (800cc8c <__ieee754_pow+0xa2c>)
 800ca16:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ca1a:	4116      	asrs	r6, r2
 800ca1c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ca20:	2000      	movs	r0, #0
 800ca22:	ea23 0106 	bic.w	r1, r3, r6
 800ca26:	f1c2 0214 	rsb	r2, r2, #20
 800ca2a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ca2e:	fa4a fa02 	asr.w	sl, sl, r2
 800ca32:	f1bb 0f00 	cmp.w	fp, #0
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	4629      	mov	r1, r5
 800ca3e:	bfb8      	it	lt
 800ca40:	f1ca 0a00 	rsblt	sl, sl, #0
 800ca44:	f7f3 fc38 	bl	80002b8 <__aeabi_dsub>
 800ca48:	ec41 0b19 	vmov	d9, r0, r1
 800ca4c:	4642      	mov	r2, r8
 800ca4e:	464b      	mov	r3, r9
 800ca50:	ec51 0b19 	vmov	r0, r1, d9
 800ca54:	f7f3 fc32 	bl	80002bc <__adddf3>
 800ca58:	2400      	movs	r4, #0
 800ca5a:	a379      	add	r3, pc, #484	; (adr r3, 800cc40 <__ieee754_pow+0x9e0>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	4620      	mov	r0, r4
 800ca62:	460d      	mov	r5, r1
 800ca64:	f7f3 fde0 	bl	8000628 <__aeabi_dmul>
 800ca68:	ec53 2b19 	vmov	r2, r3, d9
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	460f      	mov	r7, r1
 800ca70:	4620      	mov	r0, r4
 800ca72:	4629      	mov	r1, r5
 800ca74:	f7f3 fc20 	bl	80002b8 <__aeabi_dsub>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	4649      	mov	r1, r9
 800ca80:	f7f3 fc1a 	bl	80002b8 <__aeabi_dsub>
 800ca84:	a370      	add	r3, pc, #448	; (adr r3, 800cc48 <__ieee754_pow+0x9e8>)
 800ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8a:	f7f3 fdcd 	bl	8000628 <__aeabi_dmul>
 800ca8e:	a370      	add	r3, pc, #448	; (adr r3, 800cc50 <__ieee754_pow+0x9f0>)
 800ca90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca94:	4680      	mov	r8, r0
 800ca96:	4689      	mov	r9, r1
 800ca98:	4620      	mov	r0, r4
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	f7f3 fdc4 	bl	8000628 <__aeabi_dmul>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4640      	mov	r0, r8
 800caa6:	4649      	mov	r1, r9
 800caa8:	f7f3 fc08 	bl	80002bc <__adddf3>
 800caac:	4604      	mov	r4, r0
 800caae:	460d      	mov	r5, r1
 800cab0:	4602      	mov	r2, r0
 800cab2:	460b      	mov	r3, r1
 800cab4:	4630      	mov	r0, r6
 800cab6:	4639      	mov	r1, r7
 800cab8:	f7f3 fc00 	bl	80002bc <__adddf3>
 800cabc:	4632      	mov	r2, r6
 800cabe:	463b      	mov	r3, r7
 800cac0:	4680      	mov	r8, r0
 800cac2:	4689      	mov	r9, r1
 800cac4:	f7f3 fbf8 	bl	80002b8 <__aeabi_dsub>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4620      	mov	r0, r4
 800cace:	4629      	mov	r1, r5
 800cad0:	f7f3 fbf2 	bl	80002b8 <__aeabi_dsub>
 800cad4:	4642      	mov	r2, r8
 800cad6:	4606      	mov	r6, r0
 800cad8:	460f      	mov	r7, r1
 800cada:	464b      	mov	r3, r9
 800cadc:	4640      	mov	r0, r8
 800cade:	4649      	mov	r1, r9
 800cae0:	f7f3 fda2 	bl	8000628 <__aeabi_dmul>
 800cae4:	a35c      	add	r3, pc, #368	; (adr r3, 800cc58 <__ieee754_pow+0x9f8>)
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	4604      	mov	r4, r0
 800caec:	460d      	mov	r5, r1
 800caee:	f7f3 fd9b 	bl	8000628 <__aeabi_dmul>
 800caf2:	a35b      	add	r3, pc, #364	; (adr r3, 800cc60 <__ieee754_pow+0xa00>)
 800caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf8:	f7f3 fbde 	bl	80002b8 <__aeabi_dsub>
 800cafc:	4622      	mov	r2, r4
 800cafe:	462b      	mov	r3, r5
 800cb00:	f7f3 fd92 	bl	8000628 <__aeabi_dmul>
 800cb04:	a358      	add	r3, pc, #352	; (adr r3, 800cc68 <__ieee754_pow+0xa08>)
 800cb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0a:	f7f3 fbd7 	bl	80002bc <__adddf3>
 800cb0e:	4622      	mov	r2, r4
 800cb10:	462b      	mov	r3, r5
 800cb12:	f7f3 fd89 	bl	8000628 <__aeabi_dmul>
 800cb16:	a356      	add	r3, pc, #344	; (adr r3, 800cc70 <__ieee754_pow+0xa10>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	f7f3 fbcc 	bl	80002b8 <__aeabi_dsub>
 800cb20:	4622      	mov	r2, r4
 800cb22:	462b      	mov	r3, r5
 800cb24:	f7f3 fd80 	bl	8000628 <__aeabi_dmul>
 800cb28:	a353      	add	r3, pc, #332	; (adr r3, 800cc78 <__ieee754_pow+0xa18>)
 800cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2e:	f7f3 fbc5 	bl	80002bc <__adddf3>
 800cb32:	4622      	mov	r2, r4
 800cb34:	462b      	mov	r3, r5
 800cb36:	f7f3 fd77 	bl	8000628 <__aeabi_dmul>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4640      	mov	r0, r8
 800cb40:	4649      	mov	r1, r9
 800cb42:	f7f3 fbb9 	bl	80002b8 <__aeabi_dsub>
 800cb46:	4604      	mov	r4, r0
 800cb48:	460d      	mov	r5, r1
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4649      	mov	r1, r9
 800cb52:	f7f3 fd69 	bl	8000628 <__aeabi_dmul>
 800cb56:	2200      	movs	r2, #0
 800cb58:	ec41 0b19 	vmov	d9, r0, r1
 800cb5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb60:	4620      	mov	r0, r4
 800cb62:	4629      	mov	r1, r5
 800cb64:	f7f3 fba8 	bl	80002b8 <__aeabi_dsub>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	ec51 0b19 	vmov	r0, r1, d9
 800cb70:	f7f3 fe84 	bl	800087c <__aeabi_ddiv>
 800cb74:	4632      	mov	r2, r6
 800cb76:	4604      	mov	r4, r0
 800cb78:	460d      	mov	r5, r1
 800cb7a:	463b      	mov	r3, r7
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	4649      	mov	r1, r9
 800cb80:	f7f3 fd52 	bl	8000628 <__aeabi_dmul>
 800cb84:	4632      	mov	r2, r6
 800cb86:	463b      	mov	r3, r7
 800cb88:	f7f3 fb98 	bl	80002bc <__adddf3>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	4620      	mov	r0, r4
 800cb92:	4629      	mov	r1, r5
 800cb94:	f7f3 fb90 	bl	80002b8 <__aeabi_dsub>
 800cb98:	4642      	mov	r2, r8
 800cb9a:	464b      	mov	r3, r9
 800cb9c:	f7f3 fb8c 	bl	80002b8 <__aeabi_dsub>
 800cba0:	460b      	mov	r3, r1
 800cba2:	4602      	mov	r2, r0
 800cba4:	493a      	ldr	r1, [pc, #232]	; (800cc90 <__ieee754_pow+0xa30>)
 800cba6:	2000      	movs	r0, #0
 800cba8:	f7f3 fb86 	bl	80002b8 <__aeabi_dsub>
 800cbac:	e9cd 0100 	strd	r0, r1, [sp]
 800cbb0:	9b01      	ldr	r3, [sp, #4]
 800cbb2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cbb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbba:	da2f      	bge.n	800cc1c <__ieee754_pow+0x9bc>
 800cbbc:	4650      	mov	r0, sl
 800cbbe:	ed9d 0b00 	vldr	d0, [sp]
 800cbc2:	f000 f9cd 	bl	800cf60 <scalbn>
 800cbc6:	ec51 0b10 	vmov	r0, r1, d0
 800cbca:	ec53 2b18 	vmov	r2, r3, d8
 800cbce:	f7ff bbe0 	b.w	800c392 <__ieee754_pow+0x132>
 800cbd2:	4b30      	ldr	r3, [pc, #192]	; (800cc94 <__ieee754_pow+0xa34>)
 800cbd4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cbd8:	429e      	cmp	r6, r3
 800cbda:	f77f af0b 	ble.w	800c9f4 <__ieee754_pow+0x794>
 800cbde:	4b2e      	ldr	r3, [pc, #184]	; (800cc98 <__ieee754_pow+0xa38>)
 800cbe0:	440b      	add	r3, r1
 800cbe2:	4303      	orrs	r3, r0
 800cbe4:	d00b      	beq.n	800cbfe <__ieee754_pow+0x99e>
 800cbe6:	a326      	add	r3, pc, #152	; (adr r3, 800cc80 <__ieee754_pow+0xa20>)
 800cbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbec:	ec51 0b18 	vmov	r0, r1, d8
 800cbf0:	f7f3 fd1a 	bl	8000628 <__aeabi_dmul>
 800cbf4:	a322      	add	r3, pc, #136	; (adr r3, 800cc80 <__ieee754_pow+0xa20>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	f7ff bbca 	b.w	800c392 <__ieee754_pow+0x132>
 800cbfe:	4622      	mov	r2, r4
 800cc00:	462b      	mov	r3, r5
 800cc02:	f7f3 fb59 	bl	80002b8 <__aeabi_dsub>
 800cc06:	4642      	mov	r2, r8
 800cc08:	464b      	mov	r3, r9
 800cc0a:	f7f3 ff93 	bl	8000b34 <__aeabi_dcmpge>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	f43f aef0 	beq.w	800c9f4 <__ieee754_pow+0x794>
 800cc14:	e7e7      	b.n	800cbe6 <__ieee754_pow+0x986>
 800cc16:	f04f 0a00 	mov.w	sl, #0
 800cc1a:	e717      	b.n	800ca4c <__ieee754_pow+0x7ec>
 800cc1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc20:	4619      	mov	r1, r3
 800cc22:	e7d2      	b.n	800cbca <__ieee754_pow+0x96a>
 800cc24:	491a      	ldr	r1, [pc, #104]	; (800cc90 <__ieee754_pow+0xa30>)
 800cc26:	2000      	movs	r0, #0
 800cc28:	f7ff bb9e 	b.w	800c368 <__ieee754_pow+0x108>
 800cc2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc30:	f7ff bb9a 	b.w	800c368 <__ieee754_pow+0x108>
 800cc34:	9000      	str	r0, [sp, #0]
 800cc36:	f7ff bb76 	b.w	800c326 <__ieee754_pow+0xc6>
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	f7ff bb60 	b.w	800c300 <__ieee754_pow+0xa0>
 800cc40:	00000000 	.word	0x00000000
 800cc44:	3fe62e43 	.word	0x3fe62e43
 800cc48:	fefa39ef 	.word	0xfefa39ef
 800cc4c:	3fe62e42 	.word	0x3fe62e42
 800cc50:	0ca86c39 	.word	0x0ca86c39
 800cc54:	be205c61 	.word	0xbe205c61
 800cc58:	72bea4d0 	.word	0x72bea4d0
 800cc5c:	3e663769 	.word	0x3e663769
 800cc60:	c5d26bf1 	.word	0xc5d26bf1
 800cc64:	3ebbbd41 	.word	0x3ebbbd41
 800cc68:	af25de2c 	.word	0xaf25de2c
 800cc6c:	3f11566a 	.word	0x3f11566a
 800cc70:	16bebd93 	.word	0x16bebd93
 800cc74:	3f66c16c 	.word	0x3f66c16c
 800cc78:	5555553e 	.word	0x5555553e
 800cc7c:	3fc55555 	.word	0x3fc55555
 800cc80:	c2f8f359 	.word	0xc2f8f359
 800cc84:	01a56e1f 	.word	0x01a56e1f
 800cc88:	3fe00000 	.word	0x3fe00000
 800cc8c:	000fffff 	.word	0x000fffff
 800cc90:	3ff00000 	.word	0x3ff00000
 800cc94:	4090cbff 	.word	0x4090cbff
 800cc98:	3f6f3400 	.word	0x3f6f3400
 800cc9c:	652b82fe 	.word	0x652b82fe
 800cca0:	3c971547 	.word	0x3c971547

0800cca4 <__ieee754_sqrt>:
 800cca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca8:	ec55 4b10 	vmov	r4, r5, d0
 800ccac:	4e56      	ldr	r6, [pc, #344]	; (800ce08 <__ieee754_sqrt+0x164>)
 800ccae:	43ae      	bics	r6, r5
 800ccb0:	ee10 0a10 	vmov	r0, s0
 800ccb4:	ee10 3a10 	vmov	r3, s0
 800ccb8:	4629      	mov	r1, r5
 800ccba:	462a      	mov	r2, r5
 800ccbc:	d110      	bne.n	800cce0 <__ieee754_sqrt+0x3c>
 800ccbe:	ee10 2a10 	vmov	r2, s0
 800ccc2:	462b      	mov	r3, r5
 800ccc4:	f7f3 fcb0 	bl	8000628 <__aeabi_dmul>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	4620      	mov	r0, r4
 800ccce:	4629      	mov	r1, r5
 800ccd0:	f7f3 faf4 	bl	80002bc <__adddf3>
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	460d      	mov	r5, r1
 800ccd8:	ec45 4b10 	vmov	d0, r4, r5
 800ccdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cce0:	2d00      	cmp	r5, #0
 800cce2:	dc10      	bgt.n	800cd06 <__ieee754_sqrt+0x62>
 800cce4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cce8:	4330      	orrs	r0, r6
 800ccea:	d0f5      	beq.n	800ccd8 <__ieee754_sqrt+0x34>
 800ccec:	b15d      	cbz	r5, 800cd06 <__ieee754_sqrt+0x62>
 800ccee:	ee10 2a10 	vmov	r2, s0
 800ccf2:	462b      	mov	r3, r5
 800ccf4:	ee10 0a10 	vmov	r0, s0
 800ccf8:	f7f3 fade 	bl	80002b8 <__aeabi_dsub>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	460b      	mov	r3, r1
 800cd00:	f7f3 fdbc 	bl	800087c <__aeabi_ddiv>
 800cd04:	e7e6      	b.n	800ccd4 <__ieee754_sqrt+0x30>
 800cd06:	1509      	asrs	r1, r1, #20
 800cd08:	d076      	beq.n	800cdf8 <__ieee754_sqrt+0x154>
 800cd0a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cd0e:	07ce      	lsls	r6, r1, #31
 800cd10:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cd14:	bf5e      	ittt	pl
 800cd16:	0fda      	lsrpl	r2, r3, #31
 800cd18:	005b      	lslpl	r3, r3, #1
 800cd1a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cd1e:	0fda      	lsrs	r2, r3, #31
 800cd20:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cd24:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cd28:	2000      	movs	r0, #0
 800cd2a:	106d      	asrs	r5, r5, #1
 800cd2c:	005b      	lsls	r3, r3, #1
 800cd2e:	f04f 0e16 	mov.w	lr, #22
 800cd32:	4684      	mov	ip, r0
 800cd34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd38:	eb0c 0401 	add.w	r4, ip, r1
 800cd3c:	4294      	cmp	r4, r2
 800cd3e:	bfde      	ittt	le
 800cd40:	1b12      	suble	r2, r2, r4
 800cd42:	eb04 0c01 	addle.w	ip, r4, r1
 800cd46:	1840      	addle	r0, r0, r1
 800cd48:	0052      	lsls	r2, r2, #1
 800cd4a:	f1be 0e01 	subs.w	lr, lr, #1
 800cd4e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cd52:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd5a:	d1ed      	bne.n	800cd38 <__ieee754_sqrt+0x94>
 800cd5c:	4671      	mov	r1, lr
 800cd5e:	2720      	movs	r7, #32
 800cd60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cd64:	4562      	cmp	r2, ip
 800cd66:	eb04 060e 	add.w	r6, r4, lr
 800cd6a:	dc02      	bgt.n	800cd72 <__ieee754_sqrt+0xce>
 800cd6c:	d113      	bne.n	800cd96 <__ieee754_sqrt+0xf2>
 800cd6e:	429e      	cmp	r6, r3
 800cd70:	d811      	bhi.n	800cd96 <__ieee754_sqrt+0xf2>
 800cd72:	2e00      	cmp	r6, #0
 800cd74:	eb06 0e04 	add.w	lr, r6, r4
 800cd78:	da43      	bge.n	800ce02 <__ieee754_sqrt+0x15e>
 800cd7a:	f1be 0f00 	cmp.w	lr, #0
 800cd7e:	db40      	blt.n	800ce02 <__ieee754_sqrt+0x15e>
 800cd80:	f10c 0801 	add.w	r8, ip, #1
 800cd84:	eba2 020c 	sub.w	r2, r2, ip
 800cd88:	429e      	cmp	r6, r3
 800cd8a:	bf88      	it	hi
 800cd8c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cd90:	1b9b      	subs	r3, r3, r6
 800cd92:	4421      	add	r1, r4
 800cd94:	46c4      	mov	ip, r8
 800cd96:	0052      	lsls	r2, r2, #1
 800cd98:	3f01      	subs	r7, #1
 800cd9a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cd9e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cda2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cda6:	d1dd      	bne.n	800cd64 <__ieee754_sqrt+0xc0>
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	d006      	beq.n	800cdba <__ieee754_sqrt+0x116>
 800cdac:	1c4c      	adds	r4, r1, #1
 800cdae:	bf13      	iteet	ne
 800cdb0:	3101      	addne	r1, #1
 800cdb2:	3001      	addeq	r0, #1
 800cdb4:	4639      	moveq	r1, r7
 800cdb6:	f021 0101 	bicne.w	r1, r1, #1
 800cdba:	1043      	asrs	r3, r0, #1
 800cdbc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cdc0:	0849      	lsrs	r1, r1, #1
 800cdc2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cdc6:	07c2      	lsls	r2, r0, #31
 800cdc8:	bf48      	it	mi
 800cdca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cdce:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cdd2:	460c      	mov	r4, r1
 800cdd4:	463d      	mov	r5, r7
 800cdd6:	e77f      	b.n	800ccd8 <__ieee754_sqrt+0x34>
 800cdd8:	0ada      	lsrs	r2, r3, #11
 800cdda:	3815      	subs	r0, #21
 800cddc:	055b      	lsls	r3, r3, #21
 800cdde:	2a00      	cmp	r2, #0
 800cde0:	d0fa      	beq.n	800cdd8 <__ieee754_sqrt+0x134>
 800cde2:	02d7      	lsls	r7, r2, #11
 800cde4:	d50a      	bpl.n	800cdfc <__ieee754_sqrt+0x158>
 800cde6:	f1c1 0420 	rsb	r4, r1, #32
 800cdea:	fa23 f404 	lsr.w	r4, r3, r4
 800cdee:	1e4d      	subs	r5, r1, #1
 800cdf0:	408b      	lsls	r3, r1
 800cdf2:	4322      	orrs	r2, r4
 800cdf4:	1b41      	subs	r1, r0, r5
 800cdf6:	e788      	b.n	800cd0a <__ieee754_sqrt+0x66>
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	e7f0      	b.n	800cdde <__ieee754_sqrt+0x13a>
 800cdfc:	0052      	lsls	r2, r2, #1
 800cdfe:	3101      	adds	r1, #1
 800ce00:	e7ef      	b.n	800cde2 <__ieee754_sqrt+0x13e>
 800ce02:	46e0      	mov	r8, ip
 800ce04:	e7be      	b.n	800cd84 <__ieee754_sqrt+0xe0>
 800ce06:	bf00      	nop
 800ce08:	7ff00000 	.word	0x7ff00000

0800ce0c <fabs>:
 800ce0c:	ec51 0b10 	vmov	r0, r1, d0
 800ce10:	ee10 2a10 	vmov	r2, s0
 800ce14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce18:	ec43 2b10 	vmov	d0, r2, r3
 800ce1c:	4770      	bx	lr

0800ce1e <finite>:
 800ce1e:	b082      	sub	sp, #8
 800ce20:	ed8d 0b00 	vstr	d0, [sp]
 800ce24:	9801      	ldr	r0, [sp, #4]
 800ce26:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ce2a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ce2e:	0fc0      	lsrs	r0, r0, #31
 800ce30:	b002      	add	sp, #8
 800ce32:	4770      	bx	lr
 800ce34:	0000      	movs	r0, r0
	...

0800ce38 <nan>:
 800ce38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce40 <nan+0x8>
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop
 800ce40:	00000000 	.word	0x00000000
 800ce44:	7ff80000 	.word	0x7ff80000

0800ce48 <rint>:
 800ce48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce4a:	ec51 0b10 	vmov	r0, r1, d0
 800ce4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce52:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ce56:	2e13      	cmp	r6, #19
 800ce58:	ee10 4a10 	vmov	r4, s0
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ce62:	dc58      	bgt.n	800cf16 <rint+0xce>
 800ce64:	2e00      	cmp	r6, #0
 800ce66:	da2b      	bge.n	800cec0 <rint+0x78>
 800ce68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ce6c:	4302      	orrs	r2, r0
 800ce6e:	d023      	beq.n	800ceb8 <rint+0x70>
 800ce70:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ce74:	4302      	orrs	r2, r0
 800ce76:	4254      	negs	r4, r2
 800ce78:	4314      	orrs	r4, r2
 800ce7a:	0c4b      	lsrs	r3, r1, #17
 800ce7c:	0b24      	lsrs	r4, r4, #12
 800ce7e:	045b      	lsls	r3, r3, #17
 800ce80:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ce84:	ea44 0103 	orr.w	r1, r4, r3
 800ce88:	4b32      	ldr	r3, [pc, #200]	; (800cf54 <rint+0x10c>)
 800ce8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ce8e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	4630      	mov	r0, r6
 800ce98:	4639      	mov	r1, r7
 800ce9a:	f7f3 fa0f 	bl	80002bc <__adddf3>
 800ce9e:	e9cd 0100 	strd	r0, r1, [sp]
 800cea2:	463b      	mov	r3, r7
 800cea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea8:	4632      	mov	r2, r6
 800ceaa:	f7f3 fa05 	bl	80002b8 <__aeabi_dsub>
 800ceae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ceb2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	ec41 0b10 	vmov	d0, r0, r1
 800cebc:	b003      	add	sp, #12
 800cebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec0:	4a25      	ldr	r2, [pc, #148]	; (800cf58 <rint+0x110>)
 800cec2:	4132      	asrs	r2, r6
 800cec4:	ea01 0702 	and.w	r7, r1, r2
 800cec8:	4307      	orrs	r7, r0
 800ceca:	d0f5      	beq.n	800ceb8 <rint+0x70>
 800cecc:	0851      	lsrs	r1, r2, #1
 800cece:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800ced2:	4314      	orrs	r4, r2
 800ced4:	d00c      	beq.n	800cef0 <rint+0xa8>
 800ced6:	ea23 0201 	bic.w	r2, r3, r1
 800ceda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cede:	2e13      	cmp	r6, #19
 800cee0:	fa43 f606 	asr.w	r6, r3, r6
 800cee4:	bf0c      	ite	eq
 800cee6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ceea:	2400      	movne	r4, #0
 800ceec:	ea42 0306 	orr.w	r3, r2, r6
 800cef0:	4918      	ldr	r1, [pc, #96]	; (800cf54 <rint+0x10c>)
 800cef2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cef6:	4622      	mov	r2, r4
 800cef8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cefc:	4620      	mov	r0, r4
 800cefe:	4629      	mov	r1, r5
 800cf00:	f7f3 f9dc 	bl	80002bc <__adddf3>
 800cf04:	e9cd 0100 	strd	r0, r1, [sp]
 800cf08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	462b      	mov	r3, r5
 800cf10:	f7f3 f9d2 	bl	80002b8 <__aeabi_dsub>
 800cf14:	e7d0      	b.n	800ceb8 <rint+0x70>
 800cf16:	2e33      	cmp	r6, #51	; 0x33
 800cf18:	dd07      	ble.n	800cf2a <rint+0xe2>
 800cf1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cf1e:	d1cb      	bne.n	800ceb8 <rint+0x70>
 800cf20:	ee10 2a10 	vmov	r2, s0
 800cf24:	f7f3 f9ca 	bl	80002bc <__adddf3>
 800cf28:	e7c6      	b.n	800ceb8 <rint+0x70>
 800cf2a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cf2e:	f04f 36ff 	mov.w	r6, #4294967295
 800cf32:	40d6      	lsrs	r6, r2
 800cf34:	4230      	tst	r0, r6
 800cf36:	d0bf      	beq.n	800ceb8 <rint+0x70>
 800cf38:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cf3c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cf40:	bf1f      	itttt	ne
 800cf42:	ea24 0101 	bicne.w	r1, r4, r1
 800cf46:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cf4a:	fa44 f202 	asrne.w	r2, r4, r2
 800cf4e:	ea41 0402 	orrne.w	r4, r1, r2
 800cf52:	e7cd      	b.n	800cef0 <rint+0xa8>
 800cf54:	0800d598 	.word	0x0800d598
 800cf58:	000fffff 	.word	0x000fffff
 800cf5c:	00000000 	.word	0x00000000

0800cf60 <scalbn>:
 800cf60:	b570      	push	{r4, r5, r6, lr}
 800cf62:	ec55 4b10 	vmov	r4, r5, d0
 800cf66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cf6a:	4606      	mov	r6, r0
 800cf6c:	462b      	mov	r3, r5
 800cf6e:	b99a      	cbnz	r2, 800cf98 <scalbn+0x38>
 800cf70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cf74:	4323      	orrs	r3, r4
 800cf76:	d036      	beq.n	800cfe6 <scalbn+0x86>
 800cf78:	4b39      	ldr	r3, [pc, #228]	; (800d060 <scalbn+0x100>)
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	ee10 0a10 	vmov	r0, s0
 800cf80:	2200      	movs	r2, #0
 800cf82:	f7f3 fb51 	bl	8000628 <__aeabi_dmul>
 800cf86:	4b37      	ldr	r3, [pc, #220]	; (800d064 <scalbn+0x104>)
 800cf88:	429e      	cmp	r6, r3
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	460d      	mov	r5, r1
 800cf8e:	da10      	bge.n	800cfb2 <scalbn+0x52>
 800cf90:	a32b      	add	r3, pc, #172	; (adr r3, 800d040 <scalbn+0xe0>)
 800cf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf96:	e03a      	b.n	800d00e <scalbn+0xae>
 800cf98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cf9c:	428a      	cmp	r2, r1
 800cf9e:	d10c      	bne.n	800cfba <scalbn+0x5a>
 800cfa0:	ee10 2a10 	vmov	r2, s0
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f7f3 f988 	bl	80002bc <__adddf3>
 800cfac:	4604      	mov	r4, r0
 800cfae:	460d      	mov	r5, r1
 800cfb0:	e019      	b.n	800cfe6 <scalbn+0x86>
 800cfb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	3a36      	subs	r2, #54	; 0x36
 800cfba:	4432      	add	r2, r6
 800cfbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cfc0:	428a      	cmp	r2, r1
 800cfc2:	dd08      	ble.n	800cfd6 <scalbn+0x76>
 800cfc4:	2d00      	cmp	r5, #0
 800cfc6:	a120      	add	r1, pc, #128	; (adr r1, 800d048 <scalbn+0xe8>)
 800cfc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfcc:	da1c      	bge.n	800d008 <scalbn+0xa8>
 800cfce:	a120      	add	r1, pc, #128	; (adr r1, 800d050 <scalbn+0xf0>)
 800cfd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfd4:	e018      	b.n	800d008 <scalbn+0xa8>
 800cfd6:	2a00      	cmp	r2, #0
 800cfd8:	dd08      	ble.n	800cfec <scalbn+0x8c>
 800cfda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cfde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cfe2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cfe6:	ec45 4b10 	vmov	d0, r4, r5
 800cfea:	bd70      	pop	{r4, r5, r6, pc}
 800cfec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cff0:	da19      	bge.n	800d026 <scalbn+0xc6>
 800cff2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cff6:	429e      	cmp	r6, r3
 800cff8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cffc:	dd0a      	ble.n	800d014 <scalbn+0xb4>
 800cffe:	a112      	add	r1, pc, #72	; (adr r1, 800d048 <scalbn+0xe8>)
 800d000:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1e2      	bne.n	800cfce <scalbn+0x6e>
 800d008:	a30f      	add	r3, pc, #60	; (adr r3, 800d048 <scalbn+0xe8>)
 800d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00e:	f7f3 fb0b 	bl	8000628 <__aeabi_dmul>
 800d012:	e7cb      	b.n	800cfac <scalbn+0x4c>
 800d014:	a10a      	add	r1, pc, #40	; (adr r1, 800d040 <scalbn+0xe0>)
 800d016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0b8      	beq.n	800cf90 <scalbn+0x30>
 800d01e:	a10e      	add	r1, pc, #56	; (adr r1, 800d058 <scalbn+0xf8>)
 800d020:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d024:	e7b4      	b.n	800cf90 <scalbn+0x30>
 800d026:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d02a:	3236      	adds	r2, #54	; 0x36
 800d02c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d030:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d034:	4620      	mov	r0, r4
 800d036:	4b0c      	ldr	r3, [pc, #48]	; (800d068 <scalbn+0x108>)
 800d038:	2200      	movs	r2, #0
 800d03a:	e7e8      	b.n	800d00e <scalbn+0xae>
 800d03c:	f3af 8000 	nop.w
 800d040:	c2f8f359 	.word	0xc2f8f359
 800d044:	01a56e1f 	.word	0x01a56e1f
 800d048:	8800759c 	.word	0x8800759c
 800d04c:	7e37e43c 	.word	0x7e37e43c
 800d050:	8800759c 	.word	0x8800759c
 800d054:	fe37e43c 	.word	0xfe37e43c
 800d058:	c2f8f359 	.word	0xc2f8f359
 800d05c:	81a56e1f 	.word	0x81a56e1f
 800d060:	43500000 	.word	0x43500000
 800d064:	ffff3cb0 	.word	0xffff3cb0
 800d068:	3c900000 	.word	0x3c900000

0800d06c <_init>:
 800d06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06e:	bf00      	nop
 800d070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d072:	bc08      	pop	{r3}
 800d074:	469e      	mov	lr, r3
 800d076:	4770      	bx	lr

0800d078 <_fini>:
 800d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07a:	bf00      	nop
 800d07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d07e:	bc08      	pop	{r3}
 800d080:	469e      	mov	lr, r3
 800d082:	4770      	bx	lr
